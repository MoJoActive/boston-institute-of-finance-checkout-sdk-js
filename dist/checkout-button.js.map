{"version":3,"file":"checkout-button.js","mappings":"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zC,OANJ,IAUR64C,EAASpnE,SACL,GAAyB+oE,yBACzB,WACI,WAAI,GACA17C,EACAm6C,EACAiB,EACAG,EACAhH,EACArzC,OANJ,IAUR64C,EAASpnE,SACL,GAAyBwuC,iBACzB,WACI,WAAI,GACAnhB,EACAw6C,EACAY,EACAG,EACAhH,EALJ,IASRwF,EAASpnE,SACL,GAAyBuyD,mBACzB,WACI,WAAI,GACAllC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASRrB,EAASpnE,SACL,GAAyByyD,mBACzB,WACI,WAAI,GACAplC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASRrB,EAASpnE,SACL,GAAyB2yD,wBACzB,WACI,WAAI,GACAtlC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASRrB,EAASpnE,SACL,GAAyB6yD,eACzB,WACI,WAAI,GACAxlC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASRrB,EAASpnE,SACL,GAAyB+yD,qBACzB,WACI,WAAI,GACA1lC,EACAu0C,EACA4F,EACA9hB,GACIr4B,EACA,IAAI,GAA8Bu7C,IAEtCH,EARJ,IAYRrB,EAASpnE,SACL,GAAyBizD,uBACzB,WACI,WAAI,GACA5lC,EACAu0C,EACA4F,EACA9hB,GACIr4B,EACA,IAAI,GAAgCu4B,IAExC6iB,EARJ,IAYRrB,EAASpnE,SACL,GAAyBmzD,yBACzB,WACI,WAAI,GACA9lC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASRrB,EAASpnE,SACL,GAAyBqzD,mBACzB,WACI,WAAI,GACAhmC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASRrB,EAASpnE,SACL,GAAyBuzD,kBACzB,WACI,WAAI,GACAlmC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASRrB,EAASpnE,SACL,GAAyByzD,qBACzB,WACI,WAAI,GACApmC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASRrB,EAASpnE,SACL,GAAyBgpE,YACzB,WACI,WAAI,GACA37C,EACAm6C,EACA,IAAI,GAAuBvqC,GAC3Bjd,EAJJ,IAQRonD,EAASpnE,SACL,GAAyBipE,eACzB,WACI,WAAI,GACA57C,EACAm6C,EACA,IAAI,GAAmBvqC,GACvB2kC,EACA9hD,EALJ,IASRsnD,EAASpnE,SACL,GAAyB2zD,0BACzB,WACI,WAAI,GACAtmC,EACAu0C,EACA4F,EACA9hB,GAAgCr4B,EAAO,IAAI,IAC3Co7C,EALJ,IASDrB,CACX,CLnOY8B,CAA6B77C,EAAOu4B,EAAegc,EAAY5hD,EAAQF,GACvEonD,EACA,IAAI,GAA2B,IAAI,GAA2BthB,KAG1E,C","sources":["webpack://@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://@bigcommerce/checkout-sdk/webpack/runtime/compat get default export","webpack://@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://@bigcommerce/checkout-sdk/webpack/runtime/make namespace object","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/request-sender\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/form-poster\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"tslib\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/data-store\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/standard-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/set-prototype-of.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/request-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unrecoverable-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"lodash\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-internal-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-payment-error-response.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/timeout-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/map-from-storefront-error-response.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs\"","webpack://@bigcommerce/checkout-sdk/external commonjs \"rxjs/operators\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/error-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/omit-deep.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/clear-error-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-set.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-plain-object.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/array-replace.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-merge.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/merge-or-push.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-flatten.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/object-with-sorted-keys.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-actions.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-reducer.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/memoize\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"reselect\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/create-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/with-memoized-combiner.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/guard.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/create-freeze-proxy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-status-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/supported-payment-instruments.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/is-address-equal.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-state.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-internal-checkout-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/coupon-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/remote-checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order-billing-address/order-billing-address-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/signin-email/signin-email-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/geography/country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/gift-certificate-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/instrument/instrument-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/pickup-option-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-country-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/shipping-strategy-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/extension/extension-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/create-request-error-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-action-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/create-checkout-store-reducer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cachable-action-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/is-action-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/cache-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/apple-pay/is-apple-pay-window.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-method-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/script-loader\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/throw-error-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/billing-address-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/join-or-merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/http-request/merge-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-default-includes.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/errors/checkout-not-available-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/cart-comparator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-changed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-validator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/config/config-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/is-spam-protection-succeeded-action.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/customer-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/form/form-fields-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/errors/unexpected-detachment-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/detachment-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/mutation-observer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/parse-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/is-iframe-event.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-poster.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/bind-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/iframe/iframe-event-listener.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/url/append-www.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/carding-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/payment-human-verification-handler.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/google-recaptcha-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/create-spam-protection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/hosted-input-events.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-field.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/is-vaulted-instrument.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-order-data-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/hosted-form-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/cart-consistency-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/errors/order-tax-provider-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/order-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"@bigcommerce/bigpay-client\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/address/map-to-internal-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/billing/is-billing-address-like.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/amount-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-coupon.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/generated/checkout-button-method-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/coupon/map-to-internal-gift-certificate.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-items.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-line-item.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/map-to-internal-cart.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/promotion/map-to-discount-notifications.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/customer/map-to-internal-customer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"card-validator\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/hosted-form/iframe-content/card-number-formatter.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/order/map-to-internal-order.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/map-to-internal-shipping-option.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/payment-request-transformer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout/checkout-params.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/consignment-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/spam-protection/spam-protection-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/store-credit/store-credit-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/errors/update-subscriptions-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/subscription/subscriptions-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/clone-result.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/default-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/data-store/create-data-store-projection.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/payment-integration-store-projection-factory.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"shallowequal\"","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-maps.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/cache-key-resolver.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/selector/selector-decorator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/is-private.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-error-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-status-selector.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/is-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/dom/set-unique-element-id.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getShippableItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/shipping/getLineItemsCount.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/error/errors/unsupported-browser-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-get-first-and-last-name.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-adyenv3-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-bnz-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-cybersourcev2-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-orbital-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-stripe-upe-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/googlepay/googlepay-worldpay-access-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/cart/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-options.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/errors/amazon-pay-v2-config-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/get-valid-button-style.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-billing-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/map-to-legacy-shipping-address.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/paypal/paypal-sdk.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-paypal-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/braintree/braintree-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/masterpass-supported-locales.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/format-locale.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/masterpass/get-callback-url.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/utility/get-environment.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/console-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/noop-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/get-default-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/log/create-logger.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/common/registry/resolve-id-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/external commonjs \"query-string\"","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/bolt-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/bolt-integration/src/create-bolt-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/cart/cart-source.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-request-sender.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/create-paypal-commerce-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce/create-paypal-commerce-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-credit/create-paypal-commerce-credit-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-venmo/create-paypal-commerce-venmo-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-commerce-integration/src/paypal-commerce-alternative-methods/create-paypal-commerce-alternative-methods-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-types.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/paypal-express-script-loader.ts","webpack://@bigcommerce/checkout-sdk/./packages/paypal-express-integration/src/create-paypal-express-button-strategy.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry-v2.ts","webpack://@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/is-resolvable-module.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment-integration/create-payment-integration-service.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/create-payment-client.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/checkout-buttons/create-checkout-button-registry.ts","webpack://@bigcommerce/checkout-sdk/./packages/core/src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/request-sender\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/form-poster\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/data-store\");","import CustomError from './custom-error';\r\nimport setPrototypeOf from './set-prototype-of';\r\n\r\n/**\r\n * This error type should not be constructed directly. It is a base class for\r\n * all custom errors thrown in this library.\r\n */\r\nexport default abstract class StandardError extends Error implements CustomError {\r\n    name = 'StandardError';\r\n    type = 'standard';\r\n\r\n    constructor(message?: string) {\r\n        super(message || 'An unexpected error has occurred.');\r\n\r\n        setPrototypeOf(this, new.target.prototype);\r\n\r\n        if (typeof Error.captureStackTrace === 'function') {\r\n            Error.captureStackTrace(this, new.target);\r\n        } else {\r\n            this.stack = new Error(this.message).stack;\r\n        }\r\n    }\r\n}\r\n","export default function setPrototypeOf(object: any, prototype: object) {\r\n    if (Object.setPrototypeOf) {\r\n        Object.setPrototypeOf(object, prototype);\r\n    } else {\r\n        object.__proto__ = prototype;\r\n    }\r\n\r\n    return object;\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport StandardError from './standard-error';\r\n\r\nconst DEFAULT_RESPONSE = {\r\n    body: {},\r\n    headers: {},\r\n    status: 0,\r\n};\r\n\r\n/**\r\n * Throw this error if we are unable to make a request to the server. It wraps\r\n * any server response into a JS error object.\r\n */\r\nexport default class RequestError<TBody = any> extends StandardError {\r\n    body: TBody | {};\r\n    headers: { [key: string]: any };\r\n    errors: Array<{ code: string; message?: string }>;\r\n    status: number;\r\n\r\n    constructor(\r\n        response?: Response<TBody | {}>,\r\n        {\r\n            message,\r\n            errors,\r\n        }: {\r\n            message?: string;\r\n            errors?: Array<{ code: string; message?: string }>;\r\n        } = {},\r\n    ) {\r\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\r\n\r\n        super(message || 'An unexpected error has occurred.');\r\n\r\n        this.name = 'RequestError';\r\n        this.type = 'request';\r\n        this.body = body;\r\n        this.headers = headers;\r\n        this.status = status;\r\n        this.errors = errors || [];\r\n    }\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport RequestError from './request-error';\r\n\r\n/**\r\n * Throw this error if we are unable to successfully submit a server request\r\n * using a payment method because the method has invalid configuration or is in\r\n * an invalid state.\r\n */\r\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\r\n    constructor(response?: Response<T>) {\r\n        super(response, {\r\n            message: 'There is a problem processing your payment. Please try again later.',\r\n        });\r\n\r\n        this.name = 'PaymentMethodInvalidError';\r\n        this.type = 'payment_method_invalid';\r\n    }\r\n}\r\n","import { setPrototypeOf } from '../../utility';\r\n\r\nimport CustomError from './custom-error';\r\n\r\n/**\r\n * This error type should not be constructed directly. It is a base class for\r\n * all custom errors thrown in this library.\r\n */\r\nexport default abstract class StandardError extends Error implements CustomError {\r\n    name = 'StandardError';\r\n    type = 'standard';\r\n\r\n    constructor(message?: string) {\r\n        super(message || 'An unexpected error has occurred.');\r\n\r\n        setPrototypeOf(this, new.target.prototype);\r\n\r\n        if (typeof Error.captureStackTrace === 'function') {\r\n            Error.captureStackTrace(this, new.target);\r\n        } else {\r\n            this.stack = new Error(this.message).stack;\r\n        }\r\n    }\r\n}\r\n","export default function setPrototypeOf(object: any, prototype: object) {\r\n    if (Object.setPrototypeOf) {\r\n        Object.setPrototypeOf(object, prototype);\r\n    } else {\r\n        object.__proto__ = prototype;\r\n    }\r\n\r\n    return object;\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport StandardError from './standard-error';\r\n\r\nconst DEFAULT_RESPONSE = {\r\n    body: {},\r\n    headers: {},\r\n    status: 0,\r\n};\r\n\r\n/**\r\n * Throw this error if we are unable to make a request to the server. It wraps\r\n * any server response into a JS error object.\r\n */\r\nexport default class RequestError<TBody = any> extends StandardError {\r\n    body: TBody | {};\r\n    headers: { [key: string]: any };\r\n    errors: Array<{ code: string; message?: string }>;\r\n    status: number;\r\n\r\n    constructor(\r\n        response?: Response<TBody | {}>,\r\n        {\r\n            message,\r\n            errors,\r\n        }: {\r\n            message?: string;\r\n            errors?: Array<{ code: string; message?: string }>;\r\n        } = {},\r\n    ) {\r\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\r\n\r\n        super(message || 'An unexpected error has occurred.');\r\n\r\n        this.name = 'RequestError';\r\n        this.type = 'request';\r\n        this.body = body;\r\n        this.headers = headers;\r\n        this.status = status;\r\n        this.errors = errors || [];\r\n    }\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport RequestError from './request-error';\r\n\r\n/**\r\n * Throw this error if there is an unexpected error and it is not possible to\r\n * recover from unless the shopper creates a new checkout session.\r\n */\r\nexport default class UnrecoverableError<T = any> extends RequestError {\r\n    constructor(response: Response<T>, message?: string) {\r\n        super(response, {\r\n            message:\r\n                message ||\r\n                'An unexpected error has occurred. The checkout process cannot continue as a result.',\r\n        });\r\n\r\n        this.name = 'UnrecoverableError';\r\n        this.type = 'unrecoverable';\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport RequestError from './request-error';\r\n\r\nexport default function mapFromInternalErrorResponse(\r\n    response: Response<InternalErrorResponseBody>,\r\n    message?: string,\r\n): RequestError {\r\n    const { body } = response;\r\n    const { errors = [] } = body;\r\n\r\n    return new RequestError(response, {\r\n        message: joinErrors(errors) || body.detail || body.title || message,\r\n        errors: errors.length\r\n            ? errors.map((message) => ({ code: body.type, message }))\r\n            : [{ code: body.type, message: body.detail || body.title }],\r\n    });\r\n}\r\n\r\nfunction joinErrors(errors: string[]): string | undefined {\r\n    return errors\r\n        .reduce((result: string[], error) => {\r\n            if (error) {\r\n                return [...result, error];\r\n            }\r\n\r\n            return result;\r\n        }, [])\r\n        .join(' ');\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport { PaymentErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport RequestError from './request-error';\r\n\r\nexport default function mapFromPaymentErrorResponse(\r\n    response: Response<PaymentErrorResponseBody>,\r\n    message?: string,\r\n): RequestError {\r\n    const { body } = response;\r\n    const { errors = [] } = body;\r\n\r\n    return new RequestError(response, {\r\n        message: joinErrors(errors) || message,\r\n        errors,\r\n    });\r\n}\r\n\r\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\r\n    if (!Array.isArray(errors)) {\r\n        return;\r\n    }\r\n\r\n    return errors\r\n        .reduce((result: string[], error) => {\r\n            if (error && error.message) {\r\n                return [...result, error.message];\r\n            }\r\n\r\n            return result;\r\n        }, [])\r\n        .join(' ');\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport RequestError from './request-error';\r\n\r\n/**\r\n * Throw this error if a request fails to complete within its required timeframe\r\n * because of a network issue.\r\n */\r\nexport default class TimeoutError<T = any> extends RequestError<T> {\r\n    constructor(response?: Response<T>) {\r\n        super(response, {\r\n            message: 'The request has timed out or aborted.',\r\n        });\r\n\r\n        this.name = 'TimeoutError';\r\n        this.type = 'timeout';\r\n    }\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\nimport { last } from 'lodash';\r\n\r\nimport {\r\n    ErrorResponseBody,\r\n    InternalErrorResponseBody,\r\n    StorefrontErrorResponseBody,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport {\r\n    mapFromInternalErrorResponse,\r\n    mapFromPaymentErrorResponse,\r\n    mapFromStorefrontErrorResponse,\r\n    RequestError,\r\n    TimeoutError,\r\n} from './errors';\r\n\r\nexport default class RequestErrorFactory {\r\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\r\n\r\n    constructor() {\r\n        this.register('default', (response, message) => new RequestError(response, { message }));\r\n        this.register('internal', (response, message) =>\r\n            mapFromInternalErrorResponse(response, message),\r\n        );\r\n        this.register('storefront', (response, message) =>\r\n            mapFromStorefrontErrorResponse(response, message),\r\n        );\r\n        this.register('payment', (response, message) =>\r\n            mapFromPaymentErrorResponse(response, message),\r\n        );\r\n        this.register('timeout', (response) => new TimeoutError(response));\r\n    }\r\n\r\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\r\n        this._factoryMethods[type] = factoryMethod;\r\n    }\r\n\r\n    createError(response: Response<any>, message?: string): RequestError {\r\n        const factoryMethod =\r\n            this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\r\n\r\n        return factoryMethod(response, message);\r\n    }\r\n\r\n    private _getType(response: Response<ErrorResponseBody>): string {\r\n        if (response.status === 0) {\r\n            return 'timeout';\r\n        }\r\n\r\n        if (this._isStorefrontErrorResponseBody(response.body)) {\r\n            return 'storefront';\r\n        }\r\n\r\n        if (this._isInternalErrorResponseBody(response.body)) {\r\n            const internalType = last(response.body.type.split('/'));\r\n\r\n            return internalType && this._factoryMethods[internalType] ? internalType : 'internal';\r\n        }\r\n\r\n        const error = last(response.body && response.body.errors);\r\n\r\n        if (error && error.code && this._factoryMethods[error.code]) {\r\n            return error.code;\r\n        }\r\n\r\n        return 'payment';\r\n    }\r\n\r\n    private _isStorefrontErrorResponseBody(\r\n        errorResponse: ErrorResponseBody,\r\n    ): errorResponse is StorefrontErrorResponseBody {\r\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\r\n\r\n        return (\r\n            !this._isInternalErrorResponseBody(errorResponse) &&\r\n            typeof storefrontErrorResponse.title === 'string' &&\r\n            typeof storefrontErrorResponse.type === 'string' &&\r\n            typeof storefrontErrorResponse.status === 'number' &&\r\n            typeof storefrontErrorResponse.detail === 'string'\r\n        );\r\n    }\r\n\r\n    private _isInternalErrorResponseBody(\r\n        errorResponse: ErrorResponseBody,\r\n    ): errorResponse is InternalErrorResponseBody {\r\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\r\n\r\n        return (\r\n            typeof internalErrorResponse.errors === 'object' &&\r\n            typeof internalErrorResponse.title === 'string' &&\r\n            typeof internalErrorResponse.type === 'string' &&\r\n            typeof internalErrorResponse.status === 'number'\r\n        );\r\n    }\r\n}\r\n\r\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport RequestError from './request-error';\r\n\r\nexport default function mapFromStorefrontErrorResponse(\r\n    response: Response<StorefrontErrorResponseBody>,\r\n    message?: string,\r\n): RequestError<StorefrontErrorResponseBody> {\r\n    const { body } = response;\r\n\r\n    return new RequestError(response, {\r\n        message: message || body.detail || body.title,\r\n        errors: [\r\n            {\r\n                code: body.code || body.type,\r\n                message: body.detail || body.title,\r\n            },\r\n        ],\r\n    });\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { LoadConfigAction } from '../config';\r\nimport { LoadFormFieldsAction } from '../form';\r\n\r\nimport Checkout from './checkout';\r\n\r\nexport enum CheckoutActionType {\r\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\r\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\r\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\r\n\r\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\r\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\r\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\r\n}\r\n\r\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\r\n\r\nexport type LoadCheckoutAction =\r\n    | LoadCheckoutRequestedAction\r\n    | LoadCheckoutSucceededAction\r\n    | LoadCheckoutFailedAction\r\n    | LoadFormFieldsAction\r\n    | LoadConfigAction;\r\n\r\nexport type UpdateCheckoutAction =\r\n    | UpdateCheckoutRequestedAction\r\n    | UpdateCheckoutSucceededAction\r\n    | UpdateCheckoutFailedAction;\r\n\r\nexport interface LoadCheckoutRequestedAction extends Action {\r\n    type: CheckoutActionType.LoadCheckoutRequested;\r\n}\r\n\r\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\r\n    type: CheckoutActionType.LoadCheckoutSucceeded;\r\n}\r\n\r\nexport interface LoadCheckoutFailedAction extends Action<Error> {\r\n    type: CheckoutActionType.LoadCheckoutFailed;\r\n}\r\n\r\nexport interface UpdateCheckoutRequestedAction extends Action {\r\n    type: CheckoutActionType.UpdateCheckoutRequested;\r\n}\r\n\r\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\r\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\r\n}\r\n\r\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\r\n    type: CheckoutActionType.UpdateCheckoutFailed;\r\n}\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nexport enum ErrorActionType {\r\n    ClearError = 'CLEAR_ERROR',\r\n}\r\n\r\nexport type ErrorAction = ClearErrorAction;\r\n\r\nexport interface ClearErrorAction extends Action {\r\n    type: ErrorActionType.ClearError;\r\n    payload: Error;\r\n}\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { Subscriptions } from './subscriptions';\r\n\r\nexport enum SubscriptionsActionType {\r\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\r\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\r\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\r\n}\r\nexport type UpdateSubscriptionsAction =\r\n    | UpdateSubscriptionsRequestedAction\r\n    | UpdateSubscriptionsSucceededAction\r\n    | UpdateSubscriptionsFailedAction;\r\n\r\nexport interface UpdateSubscriptionsRequestedAction extends Action {\r\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\r\n}\r\n\r\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\r\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\r\n}\r\n\r\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\r\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\r\n}\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { Checkout } from '../checkout';\r\n\r\nexport enum BillingAddressActionType {\r\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\r\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\r\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\r\n\r\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\r\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\r\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\r\n}\r\n\r\nexport type BillingAddressAction = ContinueAsGuestAction | UpdateBillingAddressAction;\r\n\r\nexport type UpdateBillingAddressAction =\r\n    | UpdateBillingAddressRequested\r\n    | UpdateBillingAddressSucceeded\r\n    | UpdateBillingAddressFailed;\r\n\r\nexport type ContinueAsGuestAction =\r\n    | ContinueAsGuestRequested\r\n    | ContinueAsGuestSucceeded\r\n    | ContinueAsGuestFailed;\r\n\r\nexport interface UpdateBillingAddressRequested extends Action {\r\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\r\n}\r\n\r\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\r\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\r\n}\r\n\r\nexport interface UpdateBillingAddressFailed extends Action<Error> {\r\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\r\n}\r\n\r\nexport interface ContinueAsGuestRequested extends Action {\r\n    type: BillingAddressActionType.ContinueAsGuestRequested;\r\n}\r\n\r\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\r\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\r\n}\r\n\r\nexport interface ContinueAsGuestFailed extends Action<Error> {\r\n    type: BillingAddressActionType.ContinueAsGuestFailed;\r\n}\r\n","import { isPlainObject, omitBy, transform } from 'lodash';\r\n\r\nexport default function omitDeep(\r\n    object: any,\r\n    predicate: (value: any, key: string) => boolean,\r\n): any {\r\n    if (Array.isArray(object)) {\r\n        return object.map((value) => omitDeep(value, predicate));\r\n    }\r\n\r\n    if (isPlainObject(object)) {\r\n        return transform(\r\n            omitBy(object, predicate),\r\n            (result, value, key) => {\r\n                result[key] = omitDeep(value, predicate);\r\n            },\r\n            {} as { [key: string]: any },\r\n        );\r\n    }\r\n\r\n    return object;\r\n}\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { omitDeep } from '../utility';\r\n\r\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\r\n\r\nexport default function clearErrorReducer<\r\n    TState extends { [key: string]: any },\r\n    TAction extends Action,\r\n>(state: TState, action: TAction): TState | undefined {\r\n    if (isClearErrorAction(action)) {\r\n        return omitDeep(state, (value) => value === action.payload);\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\r\n    return action.type === ErrorActionType.ClearError;\r\n}\r\n","export interface CompareOptions {\r\n    keyFilter?(key: string): boolean;\r\n}\r\n\r\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\r\n    if (objectA === objectB) {\r\n        return true;\r\n    }\r\n\r\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\r\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\r\n            return isArrayEqual(objectA, objectB, options);\r\n        }\r\n\r\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\r\n            return false;\r\n        }\r\n\r\n        if (objectA instanceof Date && objectB instanceof Date) {\r\n            return isDateEqual(objectA, objectB);\r\n        }\r\n\r\n        if (objectA instanceof Date || objectB instanceof Date) {\r\n            return false;\r\n        }\r\n\r\n        if (objectA instanceof RegExp && objectB instanceof RegExp) {\r\n            return isRegExpEqual(objectA, objectB);\r\n        }\r\n\r\n        if (objectA instanceof RegExp || objectB instanceof RegExp) {\r\n            return false;\r\n        }\r\n\r\n        return isObjectEqual(objectA, objectB, options);\r\n    }\r\n\r\n    return objectA === objectB;\r\n}\r\n\r\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\r\n    return objectA.toString() === objectB.toString();\r\n}\r\n\r\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\r\n    return objectA.getTime() === objectB.getTime();\r\n}\r\n\r\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\r\n    if (objectA.length !== objectB.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let index = 0, length = objectA.length; index < length; index++) {\r\n        if (!isEqual(objectA[index], objectB[index], options)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction isObjectEqual(\r\n    objectA: { [key: string]: any },\r\n    objectB: { [key: string]: any },\r\n    options?: CompareOptions,\r\n): boolean {\r\n    const filter = options && options.keyFilter;\r\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\r\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\r\n\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let index = 0, length = keysA.length; index < length; index++) {\r\n        const key = keysA[index];\r\n\r\n        if (!Object.prototype.hasOwnProperty.call(objectB, key)) {\r\n            return false;\r\n        }\r\n\r\n        if (!isEqual(objectA[key], objectB[key], options)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","import isEqual from './is-equal';\r\n\r\n/**\r\n * Replace the current value with a new value if the former is different to the\r\n * latter.\r\n */\r\nexport default function replace<T>(currentValue: T, newValue?: T): T {\r\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\r\n        return currentValue;\r\n    }\r\n\r\n    return newValue;\r\n}\r\n","import isEqual from './is-equal';\r\n\r\n/**\r\n * Set a new value to an object under a key if the new value is different to the\r\n * current value of the key.\r\n */\r\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\r\n    object: T | undefined,\r\n    key: K,\r\n    value: T[K],\r\n): T {\r\n    if (\r\n        object &&\r\n        Object.prototype.hasOwnProperty.call(object, key) &&\r\n        isEqual(object[key], value)\r\n    ) {\r\n        return object;\r\n    }\r\n\r\n    return {\r\n        ...(object as any),\r\n        [key]: value,\r\n    };\r\n}\r\n","import BillingAddress from './billing-address';\r\n\r\nexport default interface BillingAddressState {\r\n    data?: BillingAddress;\r\n    errors: BillingAddressErrorsState;\r\n    statuses: BillingAddressStatusesState;\r\n}\r\n\r\nexport interface BillingAddressErrorsState {\r\n    loadError?: Error;\r\n    updateError?: Error;\r\n    continueAsGuestError?: Error;\r\n}\r\n\r\nexport interface BillingAddressStatusesState {\r\n    isLoading?: boolean;\r\n    isUpdating?: boolean;\r\n    isContinuingAsGuest?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: BillingAddressState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectSet, replace } from '../common/utility';\r\nimport { OrderAction } from '../order';\r\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\r\n\r\nimport BillingAddress from './billing-address';\r\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\r\nimport BillingAddressState, {\r\n    BillingAddressErrorsState,\r\n    BillingAddressStatusesState,\r\n    DEFAULT_STATE,\r\n} from './billing-address-state';\r\n\r\nexport default function billingAddressReducer(\r\n    state: BillingAddressState = DEFAULT_STATE,\r\n    action: Action,\r\n): BillingAddressState {\r\n    const reducer = combineReducers<BillingAddressState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: BillingAddress | undefined,\r\n    action: CheckoutAction | BillingAddressAction | OrderAction,\r\n): BillingAddress | undefined {\r\n    switch (action.type) {\r\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\r\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n            return replace(data, action.payload && action.payload.billingAddress);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\r\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\r\n): BillingAddressErrorsState {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutRequested:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case CheckoutActionType.LoadCheckoutFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        case BillingAddressActionType.UpdateBillingAddressRequested:\r\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\r\n            return objectSet(errors, 'updateError', undefined);\r\n\r\n        case BillingAddressActionType.UpdateBillingAddressFailed:\r\n            return objectSet(errors, 'updateError', action.payload);\r\n\r\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\r\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\r\n        case BillingAddressActionType.ContinueAsGuestRequested:\r\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\r\n            return objectSet(errors, 'continueAsGuestError', undefined);\r\n\r\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\r\n        case BillingAddressActionType.ContinueAsGuestFailed:\r\n            return objectSet(errors, 'continueAsGuestError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\r\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction,\r\n): BillingAddressStatusesState {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n        case CheckoutActionType.LoadCheckoutFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        case BillingAddressActionType.UpdateBillingAddressRequested:\r\n            return objectSet(statuses, 'isUpdating', true);\r\n\r\n        case BillingAddressActionType.UpdateBillingAddressFailed:\r\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\r\n            return objectSet(statuses, 'isUpdating', false);\r\n\r\n        case BillingAddressActionType.ContinueAsGuestRequested:\r\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\r\n            return objectSet(statuses, 'isContinuingAsGuest', true);\r\n\r\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\r\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\r\n        case BillingAddressActionType.ContinueAsGuestFailed:\r\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\r\n            return objectSet(statuses, 'isContinuingAsGuest', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\r\n\r\n// We need this wrapper because Lodash's version doesn't act as a type guard\r\nexport default function isPlainObject(value: any): value is object {\r\n    return lodashIsPlainObject(value);\r\n}\r\n","import { isArray } from 'lodash';\r\n\r\nimport isPlainObject from './is-plain-object';\r\nimport objectMerge from './object-merge';\r\nimport replace from './replace';\r\n\r\nexport interface ArrayReplaceOptions {\r\n    matchObject(objectA: any, objectB: any): boolean;\r\n}\r\n\r\nfunction arrayReplace<T>(\r\n    currentArray: T[] | undefined,\r\n    newArray: T[],\r\n    options?: ArrayReplaceOptions,\r\n): T[];\r\nfunction arrayReplace<T>(\r\n    currentArray: T[],\r\n    newArray?: T[],\r\n    options?: ArrayReplaceOptions,\r\n): undefined;\r\nfunction arrayReplace<T>(\r\n    currentArray?: T[],\r\n    newArray?: T[],\r\n    options?: ArrayReplaceOptions,\r\n): T[] | undefined;\r\n\r\nfunction arrayReplace<T>(\r\n    currentArray?: T[],\r\n    newArray?: T[],\r\n    options?: ArrayReplaceOptions,\r\n): T[] | undefined {\r\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\r\n\r\n    // Return the new array if the current array does not exist\r\n    if (!currentArray) {\r\n        return newArray;\r\n    }\r\n\r\n    // If the new array does not exist, or the current array is strictly equal\r\n    // to the new array, exit early and return the current array so that the\r\n    // object reference doesn't change\r\n    if (!newArray || currentArray === newArray) {\r\n        return currentArray;\r\n    }\r\n\r\n    // Otherwise, try to replace the items of the current array with the new\r\n    // array. If the item from the two arrays are the same, keep the current\r\n    // one. Do it recursively until all arrays are replaced.\r\n    let sameAsCurrentCount = 0;\r\n    let sameAsNewCount = 0;\r\n\r\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\r\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\r\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\r\n\r\n        return replacedValue;\r\n    };\r\n\r\n    const result = newArray.map((newItem, index) => {\r\n        const currentItem = currentArray && currentArray[index];\r\n\r\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\r\n            if (matchObject(currentItem, newItem)) {\r\n                return countSameAsReplaced(objectMerge(currentItem, newItem), currentItem, newItem);\r\n            }\r\n\r\n            return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\r\n        }\r\n\r\n        if (isArray(currentItem) && isArray(newItem)) {\r\n            return countSameAsReplaced(arrayReplace(currentItem, newItem), currentItem, newItem);\r\n        }\r\n\r\n        return countSameAsReplaced(replace(currentItem, newItem), currentItem, newItem);\r\n    }) as T[];\r\n\r\n    // If all items in the result are identical to the current array, and the\r\n    // current array and the new array have the same size, simply return the\r\n    // current array instead of the result.\r\n    if (\r\n        sameAsCurrentCount === newArray.length &&\r\n        currentArray &&\r\n        currentArray.length === newArray.length\r\n    ) {\r\n        return currentArray;\r\n    }\r\n\r\n    // If all items in the result are identical to the new array, simply return\r\n    // the new array.\r\n    if (sameAsNewCount === newArray.length) {\r\n        return newArray;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport default arrayReplace;\r\n","import { isArray } from 'lodash';\r\n\r\nimport arrayReplace from './array-replace';\r\nimport isPlainObject from './is-plain-object';\r\nimport objectSet from './object-set';\r\n\r\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\r\nfunction objectMerge<T extends object>(\r\n    currentObject: T | undefined,\r\n    newObject: Partial<T>,\r\n): Partial<T>;\r\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\r\n\r\nfunction objectMerge<T extends object>(\r\n    currentObject?: T,\r\n    newObject?: Partial<T>,\r\n): T | Partial<T> | undefined {\r\n    if (!currentObject) {\r\n        return newObject;\r\n    }\r\n\r\n    // If the new object does not exist but the current object does, or the new\r\n    // object is strictly equal to the current object, return the current object\r\n    if (!newObject || currentObject === newObject) {\r\n        return currentObject;\r\n    }\r\n\r\n    // If both objects exist, but some values might be different, perform a merge.\r\n    // Retain values that are equal and only replace them with the new values if\r\n    // they are different.\r\n    return (Object.keys(newObject) as Array<keyof T>).reduce((result, key) => {\r\n        const currentValue = result[key];\r\n        const newValue = newObject[key];\r\n\r\n        if (isPlainObject(currentValue) && isPlainObject(newValue)) {\r\n            return objectSet(result, key, objectMerge(currentValue, newValue));\r\n        }\r\n\r\n        if (isArray(currentValue) && isArray(newValue)) {\r\n            return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\r\n        }\r\n\r\n        return objectSet(result, key, newValue as any);\r\n    }, currentObject);\r\n}\r\n\r\nexport default objectMerge;\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { Checkout } from '../checkout';\r\nimport { RequestError } from '../common/error/errors';\r\n\r\nexport enum CouponActionType {\r\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\r\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\r\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\r\n\r\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\r\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\r\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\r\n}\r\n\r\nexport type CouponAction = ApplyCouponAction | RemoveCouponAction;\r\n\r\nexport type ApplyCouponAction =\r\n    | ApplyCouponRequestedAction\r\n    | ApplyCouponSucceededAction\r\n    | ApplyCouponFailedAction;\r\n\r\nexport type RemoveCouponAction =\r\n    | RemoveCouponRequestedAction\r\n    | RemoveCouponSucceededAction\r\n    | RemoveCouponFailedAction;\r\n\r\nexport interface ApplyCouponRequestedAction extends Action {\r\n    type: CouponActionType.ApplyCouponRequested;\r\n}\r\n\r\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\r\n    type: CouponActionType.ApplyCouponSucceeded;\r\n}\r\n\r\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\r\n    type: CouponActionType.ApplyCouponFailed;\r\n}\r\n\r\nexport interface RemoveCouponRequestedAction extends Action {\r\n    type: CouponActionType.RemoveCouponRequested;\r\n}\r\n\r\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\r\n    type: CouponActionType.RemoveCouponSucceeded;\r\n}\r\n\r\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\r\n    type: CouponActionType.RemoveCouponFailed;\r\n}\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { Checkout } from '../checkout';\r\nimport { RequestError } from '../common/error/errors';\r\n\r\nexport enum GiftCertificateActionType {\r\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\r\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\r\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\r\n\r\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\r\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\r\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\r\n}\r\n\r\nexport type GiftCertificateAction = ApplyGiftCertificateAction | RemoveGiftCertificateAction;\r\n\r\nexport type ApplyGiftCertificateAction =\r\n    | ApplyGiftCertificateRequestedAction\r\n    | ApplyGiftCertificateSucceededAction\r\n    | ApplyGiftCertificateFailedAction;\r\n\r\nexport type RemoveGiftCertificateAction =\r\n    | RemoveGiftCertificateRequestedAction\r\n    | RemoveGiftCertificateSucceededAction\r\n    | RemoveGiftCertificateFailedAction;\r\n\r\nexport interface ApplyGiftCertificateRequestedAction extends Action {\r\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\r\n}\r\n\r\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\r\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\r\n}\r\n\r\nexport interface ApplyGiftCertificateFailedAction\r\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\r\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\r\n}\r\n\r\nexport interface RemoveGiftCertificateRequestedAction extends Action {\r\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\r\n}\r\n\r\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\r\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\r\n}\r\n\r\nexport interface RemoveGiftCertificateFailedAction\r\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\r\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\r\n}\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { Checkout } from '../checkout';\r\n\r\nimport { ConsignmentMeta } from './consignment';\r\n\r\nexport enum ConsignmentActionType {\r\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\r\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\r\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\r\n\r\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\r\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\r\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\r\n\r\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\r\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\r\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\r\n\r\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\r\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\r\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\r\n\r\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\r\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\r\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\r\n}\r\n\r\nexport type ConsignmentAction =\r\n    | CreateConsignmentsAction\r\n    | UpdateConsignmentAction\r\n    | DeleteConsignmentAction\r\n    | UpdateShippingOptionAction\r\n    | LoadShippingOptionsAction;\r\n\r\nexport type CreateConsignmentsAction =\r\n    | CreateConsignmentsRequestedAction\r\n    | CreateConsignmentsSucceededAction\r\n    | CreateConsignmentsFailedAction;\r\n\r\nexport type UpdateConsignmentAction =\r\n    | UpdateConsignmentRequestedAction\r\n    | UpdateConsignmentSucceededAction\r\n    | UpdateConsignmentFailedAction;\r\n\r\nexport type DeleteConsignmentAction =\r\n    | DeleteConsignmentRequestedAction\r\n    | DeleteConsignmentSucceededAction\r\n    | DeleteConsignmentFailedAction;\r\n\r\nexport type UpdateShippingOptionAction =\r\n    | UpdateShippingOptionRequestedAction\r\n    | UpdateShippingOptionSucceededAction\r\n    | UpdateShippingOptionFailedAction;\r\n\r\nexport type LoadShippingOptionsAction =\r\n    | LoadShippingOptionsRequestedAction\r\n    | LoadShippingOptionsSucceededAction\r\n    | LoadShippingOptionsFailedAction;\r\n\r\nexport interface CreateConsignmentsRequestedAction extends Action {\r\n    type: ConsignmentActionType.CreateConsignmentsRequested;\r\n}\r\n\r\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\r\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\r\n}\r\n\r\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\r\n    type: ConsignmentActionType.CreateConsignmentsFailed;\r\n}\r\n\r\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\r\n    type: ConsignmentActionType.UpdateConsignmentRequested;\r\n}\r\n\r\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\r\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\r\n}\r\n\r\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\r\n    type: ConsignmentActionType.UpdateConsignmentFailed;\r\n}\r\n\r\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\r\n    type: ConsignmentActionType.DeleteConsignmentRequested;\r\n}\r\n\r\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\r\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\r\n}\r\n\r\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\r\n    type: ConsignmentActionType.DeleteConsignmentFailed;\r\n}\r\n\r\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\r\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\r\n}\r\n\r\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\r\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\r\n}\r\n\r\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\r\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\r\n}\r\n\r\nexport interface LoadShippingOptionsRequestedAction extends Action {\r\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\r\n}\r\n\r\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\r\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\r\n}\r\n\r\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\r\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\r\n}\r\n","import Cart from './cart';\r\n\r\nexport default interface CartState {\r\n    data?: Cart;\r\n    errors: CartErrorsState;\r\n    statuses: CartStatusesState;\r\n}\r\n\r\nexport interface CartErrorsState {\r\n    loadError?: Error;\r\n}\r\n\r\nexport interface CartStatusesState {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: CartState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { LoadPaymentMethodAction } from '../payment';\r\n\r\nimport { CheckoutButtonMethodType } from './strategies';\r\n\r\nexport enum CheckoutButtonActionType {\r\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\r\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\r\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\r\n\r\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\r\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\r\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\r\n}\r\n\r\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\r\n\r\nexport type InitializeButtonAction =\r\n    | InitializeButtonRequestedAction\r\n    | InitializeButtonSucceededAction\r\n    | InitializeButtonFailedAction\r\n    | LoadPaymentMethodAction;\r\n\r\nexport type DeinitializeButtonAction =\r\n    | DeinitializeButtonRequestedAction\r\n    | DeinitializeButtonSucceededAction\r\n    | DeinitializeButtonFailedAction;\r\n\r\nexport interface CheckoutButtonActionMeta {\r\n    methodId: CheckoutButtonMethodType;\r\n}\r\n\r\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\r\n    containerId: string;\r\n}\r\n\r\nexport interface InitializeButtonRequestedAction\r\n    extends Action<undefined, InitializeButtonActionMeta> {\r\n    type: CheckoutButtonActionType.InitializeButtonRequested;\r\n}\r\n\r\nexport interface InitializeButtonSucceededAction\r\n    extends Action<undefined, InitializeButtonActionMeta> {\r\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\r\n}\r\n\r\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\r\n    type: CheckoutButtonActionType.InitializeButtonFailed;\r\n}\r\n\r\nexport interface DeinitializeButtonRequestedAction\r\n    extends Action<undefined, CheckoutButtonActionMeta> {\r\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\r\n}\r\n\r\nexport interface DeinitializeButtonSucceededAction\r\n    extends Action<undefined, CheckoutButtonActionMeta> {\r\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\r\n}\r\n\r\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\r\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\r\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge, objectSet } from '../common/utility';\r\nimport {\r\n    CouponAction,\r\n    CouponActionType,\r\n    GiftCertificateAction,\r\n    GiftCertificateActionType,\r\n} from '../coupon';\r\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\r\n\r\nimport Cart from './cart';\r\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\r\n\r\nexport default function cartReducer(state: CartState = DEFAULT_STATE, action: Action): CartState {\r\n    const reducer = combineReducers<CartState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: Cart | undefined,\r\n    action:\r\n        | BillingAddressAction\r\n        | CheckoutAction\r\n        | ConsignmentAction\r\n        | CouponAction\r\n        | GiftCertificateAction,\r\n): Cart | undefined {\r\n    switch (action.type) {\r\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\r\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\r\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\r\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\r\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\r\n        case CouponActionType.ApplyCouponSucceeded:\r\n        case CouponActionType.RemoveCouponSucceeded:\r\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\r\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\r\n            return objectMerge(data, action.payload && action.payload.cart);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\r\n    action: CheckoutAction,\r\n): CartStatusesState {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case CheckoutActionType.LoadCheckoutFailed:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: CartErrorsState = DEFAULT_STATE.errors,\r\n    action: CheckoutAction,\r\n): CartErrorsState {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutRequested:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case CheckoutActionType.LoadCheckoutFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n","import { CheckoutButtonMethodType } from './strategies';\r\n\r\nexport default interface CheckoutButtonState {\r\n    data: {\r\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined;\r\n    };\r\n    errors: {\r\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined;\r\n    };\r\n    statuses: {\r\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined;\r\n    };\r\n}\r\n\r\nexport interface CheckoutButtonDataState {\r\n    initializedContainers: {\r\n        [key: string]: boolean;\r\n    };\r\n}\r\n\r\nexport interface CheckoutButtonErrorsState {\r\n    initializeError?: Error;\r\n    deinitializeError?: Error;\r\n}\r\n\r\nexport interface CheckoutButtonStatusesState {\r\n    isInitializing?: boolean;\r\n    isDeinitializing?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: CheckoutButtonState = {\r\n    data: {},\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport Config from './config';\r\n\r\nexport enum ConfigActionType {\r\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\r\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\r\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\r\n}\r\n\r\nexport type LoadConfigAction =\r\n    | LoadConfigRequestedAction\r\n    | LoadConfigSucceededAction\r\n    | LoadConfigFailedAction;\r\n\r\nexport interface LoadConfigRequestedAction extends Action {\r\n    type: ConfigActionType.LoadConfigRequested;\r\n}\r\n\r\nexport interface LoadConfigSucceededAction extends Action<Config> {\r\n    type: ConfigActionType.LoadConfigSucceeded;\r\n}\r\n\r\nexport interface LoadConfigFailedAction extends Action<Error> {\r\n    type: ConfigActionType.LoadConfigFailed;\r\n}\r\n","import { combineReducers } from '@bigcommerce/data-store';\r\n\r\nimport { objectMerge, objectSet } from '../common/utility';\r\n\r\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\r\nimport CheckoutButtonState, {\r\n    CheckoutButtonDataState,\r\n    CheckoutButtonErrorsState,\r\n    CheckoutButtonStatusesState,\r\n    DEFAULT_STATE,\r\n} from './checkout-button-state';\r\n\r\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\r\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\r\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\r\n\r\nexport default function checkoutButtonReducer(\r\n    state: CheckoutButtonState = DEFAULT_STATE,\r\n    action: CheckoutButtonAction,\r\n): CheckoutButtonState {\r\n    if (!action.meta || !action.meta.methodId) {\r\n        return state;\r\n    }\r\n\r\n    const reducer = combineReducers<CheckoutButtonState>({\r\n        data: combineReducers({\r\n            [action.meta.methodId]: dataReducer,\r\n        }),\r\n        errors: combineReducers({\r\n            [action.meta.methodId]: errorsReducer,\r\n        }),\r\n        statuses: combineReducers({\r\n            [action.meta.methodId]: statusesReducer,\r\n        }),\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\r\n    action: CheckoutButtonAction,\r\n): CheckoutButtonDataState {\r\n    switch (action.type) {\r\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\r\n            if (!action.meta || !action.meta.containerId) {\r\n                return data;\r\n            }\r\n\r\n            return objectMerge(data, {\r\n                initializedContainers: {\r\n                    [action.meta.containerId]: true,\r\n                },\r\n            });\r\n\r\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\r\n            return objectSet(data, 'initializedContainers', {});\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\r\n    action: CheckoutButtonAction,\r\n): CheckoutButtonErrorsState {\r\n    switch (action.type) {\r\n        case CheckoutButtonActionType.InitializeButtonRequested:\r\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\r\n            return objectSet(errors, 'initializeError', undefined);\r\n\r\n        case CheckoutButtonActionType.InitializeButtonFailed:\r\n            return objectSet(errors, 'initializeError', action.payload);\r\n\r\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\r\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\r\n            return objectSet(errors, 'deinitializeError', undefined);\r\n\r\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\r\n            return objectSet(errors, 'deinitializeError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\r\n    action: CheckoutButtonAction,\r\n): CheckoutButtonStatusesState {\r\n    switch (action.type) {\r\n        case CheckoutButtonActionType.InitializeButtonRequested:\r\n            return objectSet(statuses, 'isInitializing', true);\r\n\r\n        case CheckoutButtonActionType.InitializeButtonFailed:\r\n        case CheckoutButtonActionType.InitializeButtonSucceeded:\r\n            return objectSet(statuses, 'isInitializing', false);\r\n\r\n        case CheckoutButtonActionType.DeinitializeButtonRequested:\r\n            return objectSet(statuses, 'isDeinitializing', true);\r\n\r\n        case CheckoutButtonActionType.DeinitializeButtonFailed:\r\n        case CheckoutButtonActionType.DeinitializeButtonSucceeded:\r\n            return objectSet(statuses, 'isDeinitializing', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import Config from './config';\r\n\r\nexport default interface ConfigState {\r\n    data?: Config;\r\n    meta?: ConfigMetaState;\r\n    errors: ConfigErrorsState;\r\n    statuses: ConfigStatusesState;\r\n}\r\n\r\nexport interface ConfigMetaState {\r\n    externalSource?: string;\r\n    variantIdentificationToken?: string;\r\n    host?: string;\r\n    locale?: string;\r\n}\r\n\r\nexport interface ConfigErrorsState {\r\n    loadError?: Error;\r\n}\r\n\r\nexport interface ConfigStatusesState {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: ConfigState = {\r\n    meta: {},\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { InternalOrderResponseData } from './internal-order-responses';\r\nimport Order from './order';\r\n\r\nexport enum OrderActionType {\r\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\r\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\r\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\r\n\r\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\r\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\r\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\r\n\r\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\r\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\r\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\r\n\r\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\r\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\r\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\r\n}\r\n\r\nexport type OrderAction =\r\n    | LoadOrderAction\r\n    | LoadOrderPaymentsAction\r\n    | SubmitOrderAction\r\n    | FinalizeOrderAction;\r\n\r\nexport type LoadOrderPaymentsAction =\r\n    | LoadOrderPaymentsRequestedAction\r\n    | LoadOrderPaymentsSucceededAction\r\n    | LoadOrderPaymentsFailedAction;\r\n\r\nexport type LoadOrderAction =\r\n    | LoadOrderRequestedAction\r\n    | LoadOrderSucceededAction\r\n    | LoadOrderFailedAction;\r\n\r\nexport type SubmitOrderAction =\r\n    | SubmitOrderRequestedAction\r\n    | SubmitOrderSucceededAction\r\n    | SubmitOrderFailedAction\r\n    | LoadOrderAction;\r\n\r\nexport type FinalizeOrderAction =\r\n    | FinalizeOrderRequestedAction\r\n    | FinalizeOrderSucceededAction\r\n    | FinalizeOrderFailedAction\r\n    | LoadOrderAction;\r\n\r\nexport interface LoadOrderRequestedAction extends Action {\r\n    type: OrderActionType.LoadOrderRequested;\r\n}\r\n\r\nexport interface LoadOrderSucceededAction extends Action<Order> {\r\n    type: OrderActionType.LoadOrderSucceeded;\r\n}\r\n\r\nexport interface LoadOrderFailedAction extends Action<Error> {\r\n    type: OrderActionType.LoadOrderFailed;\r\n}\r\n\r\nexport interface LoadOrderPaymentsRequestedAction extends Action {\r\n    type: OrderActionType.LoadOrderPaymentsRequested;\r\n}\r\n\r\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\r\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\r\n}\r\n\r\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\r\n    type: OrderActionType.LoadOrderPaymentsFailed;\r\n}\r\n\r\nexport interface SubmitOrderRequestedAction extends Action {\r\n    type: OrderActionType.SubmitOrderRequested;\r\n}\r\n\r\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\r\n    type: OrderActionType.SubmitOrderSucceeded;\r\n}\r\n\r\nexport interface SubmitOrderFailedAction extends Action<Error> {\r\n    type: OrderActionType.SubmitOrderFailed;\r\n}\r\n\r\nexport interface FinalizeOrderRequestedAction extends Action {\r\n    type: OrderActionType.FinalizeOrderRequested;\r\n}\r\n\r\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\r\n    type: OrderActionType.FinalizeOrderSucceeded;\r\n}\r\n\r\nexport interface FinalizeOrderFailedAction extends Action<Error> {\r\n    type: OrderActionType.FinalizeOrderFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge, objectSet } from '../common/utility';\r\n\r\nimport Config from './config';\r\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\r\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\r\n\r\nexport default function configReducer(\r\n    state: ConfigState = DEFAULT_STATE,\r\n    action: Action,\r\n): ConfigState {\r\n    const reducer = combineReducers<ConfigState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(data: Config | undefined, action: LoadConfigAction): Config | undefined {\r\n    switch (action.type) {\r\n        case ConfigActionType.LoadConfigSucceeded:\r\n            return objectMerge(data, action.payload);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\r\n    action: LoadConfigAction,\r\n): ConfigErrorsState {\r\n    switch (action.type) {\r\n        case ConfigActionType.LoadConfigSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case ConfigActionType.LoadConfigFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\r\n    action: LoadConfigAction,\r\n): ConfigStatusesState {\r\n    switch (action.type) {\r\n        case ConfigActionType.LoadConfigRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case ConfigActionType.LoadConfigSucceeded:\r\n        case ConfigActionType.LoadConfigFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { RequestError } from '../common/error/errors';\r\n\r\nimport Coupon from './coupon';\r\n\r\nexport default interface CouponState {\r\n    data?: Coupon[];\r\n    errors: CouponErrorsState;\r\n    statuses: CouponStatusesState;\r\n}\r\n\r\nexport interface CouponErrorsState {\r\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\r\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\r\n}\r\n\r\nexport interface CouponStatusesState {\r\n    isApplyingCoupon?: boolean;\r\n    isRemovingCoupon?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: CouponState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { arrayReplace, objectSet } from '../common/utility';\r\nimport { OrderAction, OrderActionType } from '../order';\r\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\r\n\r\nimport Coupon from './coupon';\r\nimport { CouponAction, CouponActionType } from './coupon-actions';\r\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\r\n\r\nexport default function couponReducer(\r\n    state: CouponState = DEFAULT_STATE,\r\n    action: Action,\r\n): CouponState {\r\n    const reducer = combineReducers<CouponState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: Coupon[] | undefined,\r\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction,\r\n): Coupon[] | undefined {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n        case CouponActionType.ApplyCouponSucceeded:\r\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\r\n        case CouponActionType.RemoveCouponSucceeded:\r\n        case OrderActionType.LoadOrderSucceeded:\r\n            return arrayReplace(data, action.payload && action.payload.coupons);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(errors: CouponErrorsState = {}, action: CouponAction): CouponErrorsState {\r\n    switch (action.type) {\r\n        case CouponActionType.ApplyCouponRequested:\r\n        case CouponActionType.ApplyCouponSucceeded:\r\n            return objectSet(errors, 'applyCouponError', undefined);\r\n\r\n        case CouponActionType.ApplyCouponFailed:\r\n            return objectSet(errors, 'applyCouponError', action.payload);\r\n\r\n        case CouponActionType.RemoveCouponRequested:\r\n        case CouponActionType.RemoveCouponSucceeded:\r\n            return objectSet(errors, 'removeCouponError', undefined);\r\n\r\n        case CouponActionType.RemoveCouponFailed:\r\n            return objectSet(errors, 'removeCouponError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: CouponStatusesState = {},\r\n    action: CouponAction,\r\n): CouponStatusesState {\r\n    switch (action.type) {\r\n        case CouponActionType.ApplyCouponRequested:\r\n            return objectSet(statuses, 'isApplyingCoupon', true);\r\n\r\n        case CouponActionType.ApplyCouponSucceeded:\r\n        case CouponActionType.ApplyCouponFailed:\r\n            return objectSet(statuses, 'isApplyingCoupon', false);\r\n\r\n        case CouponActionType.RemoveCouponRequested:\r\n            return objectSet(statuses, 'isRemovingCoupon', true);\r\n\r\n        case CouponActionType.RemoveCouponSucceeded:\r\n        case CouponActionType.RemoveCouponFailed:\r\n            return objectSet(statuses, 'isRemovingCoupon', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { RequestError } from '../common/error/errors';\r\n\r\nimport GiftCertificate from './gift-certificate';\r\n\r\nexport default interface GiftCertificateState {\r\n    data?: GiftCertificate[];\r\n    errors: GiftCertificateErrorsState;\r\n    statuses: GiftCertificateStatusesState;\r\n}\r\n\r\nexport interface GiftCertificateErrorsState {\r\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\r\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\r\n}\r\n\r\nexport interface GiftCertificateStatusesState {\r\n    isApplyingGiftCertificate?: boolean;\r\n    isRemovingGiftCertificate?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: GiftCertificateState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { LoadCheckoutAction } from '../checkout';\r\nimport { SpamProtectionAction } from '../spam-protection';\r\n\r\nimport Customer from './customer';\r\nimport { InternalCustomerResponseData } from './internal-customer-responses';\r\n\r\nexport enum CustomerActionType {\r\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\r\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\r\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\r\n\r\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\r\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\r\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\r\n\r\n    CreateCustomerRequested = 'CREATE_CUSTOMER_REQUESTED',\r\n    CreateCustomerSucceeded = 'CREATE_CUSTOMER_SUCCEEDED',\r\n    CreateCustomerFailed = 'CREATE_CUSTOMER_FAILED',\r\n\r\n    CreateCustomerAddressRequested = 'CREATE_CUSTOMER_ADDRESS_REQUESTED',\r\n    CreateCustomerAddressSucceeded = 'CREATE_CUSTOMER_ADDRESS_SUCCEEDED',\r\n    CreateCustomerAddressFailed = 'CREATE_CUSTOMER_ADDRESS_FAILED',\r\n\r\n    StripeLinkAuthenticated = 'STRIPE_LINK_AUTHENTICATED',\r\n}\r\n\r\nexport type CustomerAction =\r\n    | SignInCustomerAction\r\n    | SignOutCustomerAction\r\n    | CreateCustomerAddressAction\r\n    | CreateCustomerAction;\r\n\r\nexport type CreateCustomerAction =\r\n    | CreateCustomerRequestedAction\r\n    | CreateCustomerSucceededAction\r\n    | CreateCustomerFailedAction\r\n    | SpamProtectionAction\r\n    | LoadCheckoutAction;\r\n\r\nexport type CreateCustomerAddressAction =\r\n    | CreateCustomerAddressRequestedAction\r\n    | CreateCustomerAddressSucceededAction\r\n    | CreateCustomerAddressFailedAction\r\n    | LoadCheckoutAction;\r\n\r\nexport type SignInCustomerAction =\r\n    | SignInCustomerRequestedAction\r\n    | SignInCustomerSucceededAction\r\n    | SignInCustomerFailedAction\r\n    | LoadCheckoutAction;\r\n\r\nexport type SignOutCustomerAction =\r\n    | SignOutCustomerRequestedAction\r\n    | SignOutCustomerSucceededAction\r\n    | SignOutCustomerFailedAction\r\n    | LoadCheckoutAction;\r\n\r\nexport interface SignInCustomerRequestedAction extends Action {\r\n    type: CustomerActionType.SignInCustomerRequested;\r\n}\r\n\r\nexport interface StripeLinkAuthenticatedAction extends Action {\r\n    type: CustomerActionType.StripeLinkAuthenticated;\r\n}\r\n\r\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\r\n    type: CustomerActionType.SignInCustomerSucceeded;\r\n}\r\n\r\nexport interface SignInCustomerFailedAction extends Action<Error> {\r\n    type: CustomerActionType.SignInCustomerFailed;\r\n}\r\n\r\nexport interface SignOutCustomerRequestedAction extends Action {\r\n    type: CustomerActionType.SignOutCustomerRequested;\r\n}\r\n\r\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\r\n    type: CustomerActionType.SignOutCustomerSucceeded;\r\n}\r\n\r\nexport interface SignOutCustomerFailedAction extends Action<Error> {\r\n    type: CustomerActionType.SignOutCustomerFailed;\r\n}\r\n\r\nexport interface CreateCustomerRequestedAction extends Action {\r\n    type: CustomerActionType.CreateCustomerRequested;\r\n}\r\n\r\nexport interface CreateCustomerSucceededAction extends Action {\r\n    type: CustomerActionType.CreateCustomerSucceeded;\r\n}\r\n\r\nexport interface CreateCustomerFailedAction extends Action<Error> {\r\n    type: CustomerActionType.CreateCustomerFailed;\r\n}\r\n\r\nexport interface CreateCustomerAddressRequestedAction extends Action {\r\n    type: CustomerActionType.CreateCustomerAddressRequested;\r\n}\r\n\r\nexport interface CreateCustomerAddressSucceededAction extends Action<Customer> {\r\n    type: CustomerActionType.CreateCustomerAddressSucceeded;\r\n}\r\n\r\nexport interface CreateCustomerAddressFailedAction extends Action<Error> {\r\n    type: CustomerActionType.CreateCustomerAddressFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { arrayReplace, objectSet } from '../common/utility';\r\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\r\n\r\nimport { CouponAction, CouponActionType } from './coupon-actions';\r\nimport GiftCertificate from './gift-certificate';\r\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\r\nimport GiftCertificateState, {\r\n    DEFAULT_STATE,\r\n    GiftCertificateErrorsState,\r\n    GiftCertificateStatusesState,\r\n} from './gift-certificate-state';\r\n\r\nexport default function giftCertificateReducer(\r\n    state: GiftCertificateState = DEFAULT_STATE,\r\n    action: Action,\r\n): GiftCertificateState {\r\n    const reducer = combineReducers<GiftCertificateState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: GiftCertificate[] | undefined,\r\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction,\r\n): GiftCertificate[] | undefined {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\r\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\r\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\r\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\r\n        case CouponActionType.ApplyCouponSucceeded:\r\n        case CouponActionType.RemoveCouponSucceeded:\r\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\r\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\r\n            return arrayReplace(data, action.payload && action.payload.giftCertificates);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\r\n    action: GiftCertificateAction,\r\n): GiftCertificateErrorsState {\r\n    switch (action.type) {\r\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\r\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\r\n            return objectSet(errors, 'applyGiftCertificateError', undefined);\r\n\r\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\r\n            return objectSet(errors, 'applyGiftCertificateError', action.payload);\r\n\r\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\r\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\r\n            return objectSet(errors, 'removeGiftCertificateError', undefined);\r\n\r\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\r\n            return objectSet(errors, 'removeGiftCertificateError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\r\n    action: GiftCertificateAction,\r\n): GiftCertificateStatusesState {\r\n    switch (action.type) {\r\n        case GiftCertificateActionType.ApplyGiftCertificateRequested:\r\n            return objectSet(statuses, 'isApplyingGiftCertificate', true);\r\n\r\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\r\n        case GiftCertificateActionType.ApplyGiftCertificateFailed:\r\n            return objectSet(statuses, 'isApplyingGiftCertificate', false);\r\n\r\n        case GiftCertificateActionType.RemoveGiftCertificateRequested:\r\n            return objectSet(statuses, 'isRemovingGiftCertificate', true);\r\n\r\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\r\n        case GiftCertificateActionType.RemoveGiftCertificateFailed:\r\n            return objectSet(statuses, 'isRemovingGiftCertificate', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import Customer from './customer';\r\n\r\nexport default interface CustomerState {\r\n    data?: Customer;\r\n    statuses: CustomerStatusesState;\r\n    errors: CustomerErrorsState;\r\n}\r\n\r\nexport interface CustomerErrorsState {\r\n    createError?: Error;\r\n    createAddressError?: Error;\r\n}\r\n\r\nexport interface CustomerStatusesState {\r\n    isCreating?: boolean;\r\n    isCreatingAddress?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: CustomerState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nexport enum CustomerStrategyActionType {\r\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\r\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\r\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\r\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\r\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\r\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\r\n    ExecutePaymentMethodCheckoutFailed = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_FAILED',\r\n    ExecutePaymentMethodCheckoutRequested = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_REQUESTED',\r\n    ExecutePaymentMethodCheckoutSucceeded = 'CUSTOMER_STRATEGY_EXECUTE_PAYMENT_METHOD_CHECKOUT_SUCCEEDED',\r\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\r\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\r\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\r\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\r\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\r\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\r\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\r\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\r\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\r\n}\r\n\r\nexport type CustomerStrategyAction =\r\n    | CustomerStrategySignInAction\r\n    | CustomerStrategySignOutAction\r\n    | CustomerStrategyExecutePaymentMethodCheckoutAction\r\n    | CustomerStrategyInitializeAction\r\n    | CustomerStrategyDeinitializeAction\r\n    | CustomerStrategyWidgetAction;\r\n\r\nexport type CustomerStrategySignInAction =\r\n    | SignInRequestedAction\r\n    | SignInSucceededAction\r\n    | SignInFailedAction;\r\n\r\nexport type CustomerStrategySignOutAction =\r\n    | SignOutRequestedAction\r\n    | SignOutSucceededAction\r\n    | SignOutFailedAction;\r\n\r\nexport type CustomerStrategyExecutePaymentMethodCheckoutAction =\r\n    | ExecutePaymentMethodCheckoutRequestedAction\r\n    | ExecutePaymentMethodCheckoutSucceededAction\r\n    | ExecutePaymentMethodCheckoutFailedAction;\r\n\r\nexport type CustomerStrategyInitializeAction =\r\n    | InitializeRequestedAction\r\n    | InitializeSucceededAction\r\n    | InitializeFailedAction;\r\n\r\nexport type CustomerStrategyDeinitializeAction =\r\n    | DeinitializeRequestedAction\r\n    | DeinitializeSucceededAction\r\n    | DeinitializeFailedAction;\r\n\r\nexport type CustomerStrategyWidgetAction =\r\n    | WidgetInteractionStartedAction\r\n    | WidgetInteractionFinishedAction\r\n    | WidgetInteractionFailedAction;\r\n\r\nexport interface SignInRequestedAction extends Action {\r\n    type: CustomerStrategyActionType.SignInRequested;\r\n}\r\n\r\nexport interface SignInSucceededAction extends Action {\r\n    type: CustomerStrategyActionType.SignInSucceeded;\r\n}\r\n\r\nexport interface SignInFailedAction extends Action<Error> {\r\n    type: CustomerStrategyActionType.SignInFailed;\r\n}\r\n\r\nexport interface SignOutRequestedAction extends Action {\r\n    type: CustomerStrategyActionType.SignOutRequested;\r\n}\r\n\r\nexport interface SignOutSucceededAction extends Action {\r\n    type: CustomerStrategyActionType.SignOutSucceeded;\r\n}\r\n\r\nexport interface SignOutFailedAction extends Action<Error> {\r\n    type: CustomerStrategyActionType.SignOutFailed;\r\n}\r\n\r\nexport interface ExecutePaymentMethodCheckoutRequestedAction extends Action {\r\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested;\r\n}\r\n\r\nexport interface ExecutePaymentMethodCheckoutSucceededAction extends Action {\r\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded;\r\n}\r\n\r\nexport interface ExecutePaymentMethodCheckoutFailedAction extends Action<Error> {\r\n    type: CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed;\r\n}\r\n\r\nexport interface InitializeRequestedAction extends Action {\r\n    type: CustomerStrategyActionType.InitializeRequested;\r\n}\r\n\r\nexport interface InitializeSucceededAction extends Action {\r\n    type: CustomerStrategyActionType.InitializeSucceeded;\r\n}\r\n\r\nexport interface InitializeFailedAction extends Action<Error> {\r\n    type: CustomerStrategyActionType.InitializeFailed;\r\n}\r\n\r\nexport interface DeinitializeRequestedAction extends Action {\r\n    type: CustomerStrategyActionType.DeinitializeRequested;\r\n}\r\n\r\nexport interface DeinitializeSucceededAction extends Action {\r\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\r\n}\r\n\r\nexport interface DeinitializeFailedAction extends Action<Error> {\r\n    type: CustomerStrategyActionType.DeinitializeFailed;\r\n}\r\n\r\nexport interface WidgetInteractionStartedAction extends Action {\r\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\r\n}\r\n\r\nexport interface WidgetInteractionFinishedAction extends Action {\r\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\r\n}\r\n\r\nexport interface WidgetInteractionFailedAction extends Action<Error> {\r\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\r\n}\r\n","import { combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\r\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge, objectSet } from '../common/utility';\r\n\r\nimport Customer from './customer';\r\nimport {\r\n    CustomerAction,\r\n    CustomerActionType,\r\n    StripeLinkAuthenticatedAction,\r\n} from './customer-actions';\r\nimport CustomerState, {\r\n    CustomerErrorsState,\r\n    CustomerStatusesState,\r\n    DEFAULT_STATE,\r\n} from './customer-state';\r\n\r\ntype ReducerActionType =\r\n    | CheckoutAction\r\n    | ContinueAsGuestAction\r\n    | CustomerAction\r\n    | StripeLinkAuthenticatedAction;\r\n\r\nexport default function customerReducer(\r\n    state: CustomerState = DEFAULT_STATE,\r\n    action: ReducerActionType,\r\n): CustomerState {\r\n    const reducer = combineReducers<CustomerState, ReducerActionType>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(data: Customer | undefined, action: ReducerActionType): Customer | undefined {\r\n    switch (action.type) {\r\n        case BillingAddressActionType.ContinueAsGuestSucceeded:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n            return objectMerge(data, action.payload && action.payload.customer);\r\n\r\n        case CustomerActionType.CreateCustomerAddressSucceeded:\r\n            return objectMerge(data, action.payload);\r\n\r\n        case CustomerActionType.StripeLinkAuthenticated:\r\n            return objectSet(data, 'isStripeLinkAuthenticated', action.payload);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: CustomerErrorsState = DEFAULT_STATE.errors,\r\n    action: ReducerActionType,\r\n): CustomerErrorsState {\r\n    switch (action.type) {\r\n        case CustomerActionType.CreateCustomerRequested:\r\n        case CustomerActionType.CreateCustomerSucceeded:\r\n            return objectSet(errors, 'createError', undefined);\r\n\r\n        case CustomerActionType.CreateCustomerFailed:\r\n            return objectSet(errors, 'createError', action.payload);\r\n\r\n        case CustomerActionType.CreateCustomerAddressRequested:\r\n        case CustomerActionType.CreateCustomerAddressSucceeded:\r\n            return objectSet(errors, 'createAddressError', undefined);\r\n\r\n        case CustomerActionType.CreateCustomerAddressFailed:\r\n            return objectSet(errors, 'createAddressError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: CustomerStatusesState = DEFAULT_STATE.statuses,\r\n    action: ReducerActionType,\r\n): CustomerStatusesState {\r\n    switch (action.type) {\r\n        case CustomerActionType.CreateCustomerRequested:\r\n            return objectSet(statuses, 'isCreating', true);\r\n\r\n        case CustomerActionType.CreateCustomerFailed:\r\n        case CustomerActionType.CreateCustomerSucceeded:\r\n            return objectSet(statuses, 'isCreating', false);\r\n\r\n        case CustomerActionType.CreateCustomerAddressRequested:\r\n            return objectSet(statuses, 'isCreatingAddress', true);\r\n\r\n        case CustomerActionType.CreateCustomerAddressFailed:\r\n        case CustomerActionType.CreateCustomerAddressSucceeded:\r\n            return objectSet(statuses, 'isCreatingAddress', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","export default interface CustomerStrategyState {\r\n    data: CustomerStrategyDataState;\r\n    errors: CustomerStrategyErrorsState;\r\n    statuses: CustomerStrategyStatusesState;\r\n}\r\n\r\nexport interface CustomerStrategyDataState {\r\n    [key: string]: {\r\n        isInitialized: boolean;\r\n    };\r\n}\r\n\r\nexport interface CustomerStrategyErrorsState {\r\n    deinitializeError?: Error;\r\n    deinitializeMethodId?: string;\r\n    initializeErrors?: { [key: string]: Error };\r\n    initializeMethodId?: string;\r\n    signInError?: Error;\r\n    signInMethodId?: string;\r\n    signOutError?: Error;\r\n    signOutMethodId?: string;\r\n    executePaymentMethodCheckoutError?: Error;\r\n    executePaymentMethodCheckoutMethodId?: string;\r\n    widgetInteractionError?: Error;\r\n    widgetInteractionMethodId?: string;\r\n}\r\n\r\nexport interface CustomerStrategyStatusesState {\r\n    deinitializeMethodId?: string;\r\n    initializeMethodId?: string;\r\n    isDeinitializing?: boolean;\r\n    isInitializing?: boolean;\r\n    isSigningIn?: boolean;\r\n    isSigningOut?: boolean;\r\n    signInMethodId?: string;\r\n    signOutMethodId?: string;\r\n    isExecutingPaymentMethodCheckout?: boolean;\r\n    executePaymentMethodCheckoutMethodId?: string;\r\n    isWidgetInteracting?: boolean;\r\n    widgetInteractionMethodId?: string;\r\n}\r\n\r\nexport const DEFAULT_STATE: CustomerStrategyState = {\r\n    data: {},\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { Extension } from './extension';\r\n\r\nexport enum ExtensionActionType {\r\n    LoadExtensionsRequested = 'LOAD_EXTENSIONS_REQUESTED',\r\n    LoadExtensionsSucceeded = 'LOAD_EXTENSIONS_SUCCEEDED',\r\n    LoadExtensionsFailed = 'LOAD_EXTENSIONS_FAILED',\r\n    RenderExtensionRequested = 'RENDER_EXTENSION_REQUESTED',\r\n    RenderExtensionSucceeded = 'RENDER_EXTENSION_SUCCEEDED',\r\n    RenderExtensionFailed = 'RENDER_EXTENSION_FAILED',\r\n}\r\n\r\nexport type ExtensionAction =\r\n    | LoadExtensionsRequestedAction\r\n    | LoadExtensionsSucceededAction\r\n    | LoadExtensionsFailedAction\r\n    | RenderExtensionRequestedAction\r\n    | RenderExtensionSucceededAction\r\n    | RenderExtensionFailedAction;\r\n\r\nexport interface LoadExtensionsRequestedAction extends Action {\r\n    type: ExtensionActionType.LoadExtensionsRequested;\r\n}\r\n\r\nexport interface LoadExtensionsSucceededAction extends Action<Extension[]> {\r\n    type: ExtensionActionType.LoadExtensionsSucceeded;\r\n}\r\n\r\nexport interface LoadExtensionsFailedAction extends Action<Error> {\r\n    type: ExtensionActionType.LoadExtensionsFailed;\r\n}\r\n\r\nexport interface RenderExtensionRequestedAction extends Action {\r\n    type: ExtensionActionType.RenderExtensionRequested;\r\n}\r\n\r\nexport interface RenderExtensionSucceededAction extends Action<Extension> {\r\n    type: ExtensionActionType.RenderExtensionSucceeded;\r\n}\r\n\r\nexport interface RenderExtensionFailedAction extends Action<Error> {\r\n    type: ExtensionActionType.RenderExtensionFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge } from '../common/utility';\r\n\r\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\r\nimport CustomerStrategyState, {\r\n    CustomerStrategyDataState,\r\n    CustomerStrategyErrorsState,\r\n    CustomerStrategyStatusesState,\r\n    DEFAULT_STATE,\r\n} from './customer-strategy-state';\r\n\r\nexport default function customerStrategyReducer(\r\n    state: CustomerStrategyState = DEFAULT_STATE,\r\n    action: Action,\r\n): CustomerStrategyState {\r\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\r\n    action: CustomerStrategyAction,\r\n): CustomerStrategyDataState {\r\n    switch (action.type) {\r\n        case CustomerStrategyActionType.InitializeSucceeded:\r\n            return objectMerge(data, {\r\n                [action.meta && action.meta.methodId]: {\r\n                    isInitialized: true,\r\n                },\r\n            });\r\n\r\n        case CustomerStrategyActionType.DeinitializeSucceeded:\r\n            return objectMerge(data, {\r\n                [action.meta && action.meta.methodId]: {\r\n                    isInitialized: false,\r\n                },\r\n            });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\r\n    action: CustomerStrategyAction,\r\n): CustomerStrategyErrorsState {\r\n    switch (action.type) {\r\n        case CustomerStrategyActionType.InitializeRequested:\r\n        case CustomerStrategyActionType.InitializeSucceeded:\r\n            return objectMerge(errors, {\r\n                initializeErrors: { ...errors.initializeErrors },\r\n                initializeMethodId: errors.initializeMethodId\r\n                    ? errors.initializeMethodId\r\n                    : undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.InitializeFailed:\r\n            return objectMerge(errors, {\r\n                initializeErrors: {\r\n                    ...errors.initializeErrors,\r\n                    [action.meta && action.meta.methodId]: action.payload,\r\n                },\r\n                initializeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.DeinitializeRequested:\r\n        case CustomerStrategyActionType.DeinitializeSucceeded:\r\n            return objectMerge(errors, {\r\n                deinitializeError: undefined,\r\n                deinitializeMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.DeinitializeFailed:\r\n            return objectMerge(errors, {\r\n                deinitializeError: action.payload,\r\n                deinitializeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.SignInRequested:\r\n        case CustomerStrategyActionType.SignInSucceeded:\r\n            return objectMerge(errors, {\r\n                signInError: undefined,\r\n                signInMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.SignInFailed:\r\n            return objectMerge(errors, {\r\n                signInError: action.payload,\r\n                signInMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.SignOutRequested:\r\n        case CustomerStrategyActionType.SignOutSucceeded:\r\n            return objectMerge(errors, {\r\n                signOutError: undefined,\r\n                signOutMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.SignOutFailed:\r\n            return objectMerge(errors, {\r\n                signOutError: action.payload,\r\n                signOutMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\r\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\r\n            return objectMerge(errors, {\r\n                executePaymentMethodCheckoutError: undefined,\r\n                executePaymentMethodCheckoutMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\r\n            return objectMerge(errors, {\r\n                executePaymentMethodCheckoutError: action.payload,\r\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.WidgetInteractionStarted:\r\n        case CustomerStrategyActionType.WidgetInteractionFinished:\r\n            return objectMerge(errors, {\r\n                widgetInteractionError: undefined,\r\n                widgetInteractionMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.WidgetInteractionFailed:\r\n            return objectMerge(errors, {\r\n                widgetInteractionError: action.payload,\r\n                widgetInteractionMethodId: action.meta.methodId,\r\n            });\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\r\n    action: CustomerStrategyAction,\r\n): CustomerStrategyStatusesState {\r\n    switch (action.type) {\r\n        case CustomerStrategyActionType.InitializeRequested:\r\n            return objectMerge(statuses, {\r\n                isInitializing: true,\r\n                initializeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.InitializeFailed:\r\n        case CustomerStrategyActionType.InitializeSucceeded:\r\n            return objectMerge(statuses, {\r\n                isInitializing: false,\r\n                initializeMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.DeinitializeRequested:\r\n            return objectMerge(statuses, {\r\n                isDeinitializing: true,\r\n                deinitializeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.DeinitializeFailed:\r\n        case CustomerStrategyActionType.DeinitializeSucceeded:\r\n            return objectMerge(statuses, {\r\n                isDeinitializing: false,\r\n                deinitializeMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.SignInRequested:\r\n            return objectMerge(statuses, {\r\n                isSigningIn: true,\r\n                signInMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.SignInFailed:\r\n        case CustomerStrategyActionType.SignInSucceeded:\r\n            return objectMerge(statuses, {\r\n                isSigningIn: false,\r\n                signInMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.SignOutRequested:\r\n            return objectMerge(statuses, {\r\n                isSigningOut: true,\r\n                signOutMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.SignOutFailed:\r\n        case CustomerStrategyActionType.SignOutSucceeded:\r\n            return objectMerge(statuses, {\r\n                isSigningOut: false,\r\n                signOutMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutRequested:\r\n            return objectMerge(statuses, {\r\n                isExecutingPaymentMethodCheckout: true,\r\n                executePaymentMethodCheckoutMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutFailed:\r\n        case CustomerStrategyActionType.ExecutePaymentMethodCheckoutSucceeded:\r\n            return objectMerge(statuses, {\r\n                isExecutingPaymentMethodCheckout: false,\r\n                executePaymentMethodCheckoutMethodId: undefined,\r\n            });\r\n\r\n        case CustomerStrategyActionType.WidgetInteractionStarted:\r\n            return objectMerge(statuses, {\r\n                isWidgetInteracting: true,\r\n                widgetInteractionMethodId: action.meta.methodId,\r\n            });\r\n\r\n        case CustomerStrategyActionType.WidgetInteractionFinished:\r\n        case CustomerStrategyActionType.WidgetInteractionFailed:\r\n            return objectMerge(statuses, {\r\n                isWidgetInteracting: false,\r\n                widgetInteractionMethodId: undefined,\r\n            });\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { Extension } from './extension';\r\n\r\nexport interface ExtensionState {\r\n    data?: Extension[];\r\n    errors: ExtensionErrorsState;\r\n    statuses: ExtensionStatusesState;\r\n}\r\n\r\nexport interface ExtensionErrorsState {\r\n    loadError?: Error;\r\n}\r\n\r\nexport interface ExtensionStatusesState {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: ExtensionState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { FormFields } from './form-field';\r\n\r\nexport enum FormFieldsActionType {\r\n    LoadFormFieldsRequested = 'LOAD_FORM_FIELDS_REQUESTED',\r\n    LoadFormFieldsSucceeded = 'LOAD_FORM_FIELDS_SUCCEEDED',\r\n    LoadFormFieldsFailed = 'LOAD_FORM_FIELDS_FAILED',\r\n}\r\n\r\nexport type LoadFormFieldsAction =\r\n    | LoadFormFieldsRequestedAction\r\n    | LoadFormFieldsSucceededAction\r\n    | LoadFormFieldsFailedAction;\r\n\r\nexport interface LoadFormFieldsRequestedAction extends Action {\r\n    type: FormFieldsActionType.LoadFormFieldsRequested;\r\n}\r\n\r\nexport interface LoadFormFieldsSucceededAction extends Action<FormFields> {\r\n    type: FormFieldsActionType.LoadFormFieldsSucceeded;\r\n}\r\n\r\nexport interface LoadFormFieldsFailedAction extends Action<Error> {\r\n    type: FormFieldsActionType.LoadFormFieldsFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { arrayReplace, objectSet } from '../common/utility';\r\n\r\nimport { Extension } from './extension';\r\nimport { ExtensionAction, ExtensionActionType } from './extension-actions';\r\nimport {\r\n    DEFAULT_STATE,\r\n    ExtensionErrorsState,\r\n    ExtensionState,\r\n    ExtensionStatusesState,\r\n} from './extension-state';\r\n\r\nexport function extensionReducer(\r\n    state: ExtensionState = DEFAULT_STATE,\r\n    action: Action,\r\n): ExtensionState {\r\n    const reducer = combineReducers<ExtensionState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: Extension[] | undefined,\r\n    action: ExtensionAction,\r\n): Extension[] | undefined {\r\n    if (action.type === ExtensionActionType.LoadExtensionsSucceeded) {\r\n        return arrayReplace(data, action.payload);\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: ExtensionErrorsState = DEFAULT_STATE.errors,\r\n    action: ExtensionAction,\r\n): ExtensionErrorsState {\r\n    switch (action.type) {\r\n        case ExtensionActionType.LoadExtensionsRequested:\r\n        case ExtensionActionType.LoadExtensionsSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case ExtensionActionType.LoadExtensionsFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: ExtensionStatusesState = DEFAULT_STATE.statuses,\r\n    action: ExtensionAction,\r\n): ExtensionStatusesState {\r\n    switch (action.type) {\r\n        case ExtensionActionType.LoadExtensionsRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case ExtensionActionType.LoadExtensionsSucceeded:\r\n        case ExtensionActionType.LoadExtensionsFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { FormFields } from './form-field';\r\n\r\nexport default interface FormFieldsState {\r\n    data?: FormFields;\r\n    errors: FormFieldsErrorState;\r\n    statuses: FormFieldsStatusesState;\r\n}\r\n\r\nexport interface FormFieldsErrorState {\r\n    loadError?: Error;\r\n}\r\n\r\nexport interface FormFieldsStatusesState {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: FormFieldsState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport Country from './country';\r\n\r\nexport enum CountryActionType {\r\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\r\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\r\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\r\n}\r\n\r\nexport type LoadCountriesAction =\r\n    | LoadCountriesRequestedAction\r\n    | LoadCountriesSucceededAction\r\n    | LoadCountriesFailedAction;\r\n\r\nexport interface LoadCountriesRequestedAction extends Action {\r\n    type: CountryActionType.LoadCountriesRequested;\r\n}\r\n\r\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\r\n    type: CountryActionType.LoadCountriesSucceeded;\r\n}\r\n\r\nexport interface LoadCountriesFailedAction extends Action<Error> {\r\n    type: CountryActionType.LoadCountriesFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge, objectSet } from '../common/utility';\r\n\r\nimport { FormFields } from './form-field';\r\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\r\nimport FormFieldsState, {\r\n    DEFAULT_STATE,\r\n    FormFieldsErrorState,\r\n    FormFieldsStatusesState,\r\n} from './form-fields-state';\r\n\r\nexport default function formFieldsReducer(\r\n    state: FormFieldsState = DEFAULT_STATE,\r\n    action: Action,\r\n): FormFieldsState {\r\n    const reducer = combineReducers<FormFieldsState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: FormFields | undefined,\r\n    action: LoadFormFieldsAction,\r\n): FormFields | undefined {\r\n    switch (action.type) {\r\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\r\n            return objectMerge(data, action.payload);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: FormFieldsErrorState = DEFAULT_STATE.errors,\r\n    action: LoadFormFieldsAction,\r\n): FormFieldsErrorState {\r\n    switch (action.type) {\r\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case FormFieldsActionType.LoadFormFieldsFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: FormFieldsStatusesState = DEFAULT_STATE.statuses,\r\n    action: LoadFormFieldsAction,\r\n): FormFieldsStatusesState {\r\n    switch (action.type) {\r\n        case FormFieldsActionType.LoadFormFieldsRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case FormFieldsActionType.LoadFormFieldsSucceeded:\r\n        case FormFieldsActionType.LoadFormFieldsFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import Country from './country';\r\n\r\nexport default interface CountryState {\r\n    data?: Country[];\r\n    errors: CountryErrorsState;\r\n    statuses: CountryStatusesState;\r\n}\r\n\r\nexport interface CountryErrorsState {\r\n    loadError?: Error;\r\n}\r\n\r\nexport interface CountryStatusesState {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: CountryState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { arrayReplace, objectSet } from '../common/utility';\r\n\r\nimport Country from './country';\r\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\r\nimport CountryState, {\r\n    CountryErrorsState,\r\n    CountryStatusesState,\r\n    DEFAULT_STATE,\r\n} from './country-state';\r\n\r\nexport default function countryReducer(\r\n    state: CountryState = DEFAULT_STATE,\r\n    action: Action,\r\n): CountryState {\r\n    const reducer = combineReducers<CountryState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: Country[] | undefined,\r\n    action: LoadCountriesAction,\r\n): Country[] | undefined {\r\n    switch (action.type) {\r\n        case CountryActionType.LoadCountriesSucceeded:\r\n            return arrayReplace(data, action.payload);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\r\n    action: LoadCountriesAction,\r\n): CountryErrorsState {\r\n    switch (action.type) {\r\n        case CountryActionType.LoadCountriesRequested:\r\n        case CountryActionType.LoadCountriesSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case CountryActionType.LoadCountriesFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\r\n    action: LoadCountriesAction,\r\n): CountryStatusesState {\r\n    switch (action.type) {\r\n        case CountryActionType.LoadCountriesRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case CountryActionType.LoadCountriesSucceeded:\r\n        case CountryActionType.LoadCountriesFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { Omit } from '../common/types';\r\n\r\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\r\nimport Order from './order';\r\n\r\nexport default interface OrderState {\r\n    data?: OrderDataState;\r\n    meta?: OrderMetaState;\r\n    errors: OrderErrorsState;\r\n    statuses: OrderStatusesState;\r\n}\r\n\r\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\r\n\r\nexport interface OrderMetaState extends InternalOrderMeta {\r\n    token?: string;\r\n    orderToken?: string;\r\n    callbackUrl?: string;\r\n    payment?: InternalOrderPayment;\r\n}\r\n\r\nexport interface OrderErrorsState {\r\n    loadError?: Error;\r\n    submitError?: Error;\r\n    finalizeError?: Error;\r\n}\r\n\r\nexport interface OrderStatusesState {\r\n    isLoading?: boolean;\r\n    isSubmitting?: boolean;\r\n    isFinalizing?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: OrderState = {\r\n    errors: {},\r\n    meta: {},\r\n    statuses: {},\r\n};\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\nimport { omit } from 'lodash';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge, objectSet } from '../common/utility';\r\n\r\nimport { OrderAction, OrderActionType } from './order-actions';\r\nimport OrderState, {\r\n    DEFAULT_STATE,\r\n    OrderDataState,\r\n    OrderErrorsState,\r\n    OrderMetaState,\r\n    OrderStatusesState,\r\n} from './order-state';\r\n\r\nexport default function orderReducer(\r\n    state: OrderState = DEFAULT_STATE,\r\n    action: Action,\r\n): OrderState {\r\n    const reducer = combineReducers<OrderState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        meta: metaReducer,\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: OrderDataState | undefined,\r\n    action: OrderAction,\r\n): OrderDataState | undefined {\r\n    switch (action.type) {\r\n        case OrderActionType.LoadOrderSucceeded:\r\n        case OrderActionType.LoadOrderPaymentsSucceeded:\r\n            return objectMerge(\r\n                data,\r\n                omit(action.payload, ['billingAddress', 'coupons']),\r\n            ) as OrderDataState;\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction metaReducer(\r\n    meta: OrderMetaState | undefined,\r\n    action: OrderAction,\r\n): OrderMetaState | undefined {\r\n    switch (action.type) {\r\n        case OrderActionType.FinalizeOrderSucceeded:\r\n        case OrderActionType.SubmitOrderSucceeded:\r\n            return objectMerge(meta, {\r\n                ...action.meta,\r\n                callbackUrl: action.payload && action.payload.order.callbackUrl,\r\n                orderToken: action.payload && action.payload.order.token,\r\n                payment: action.payload && action.payload.order && action.payload.order.payment,\r\n            });\r\n\r\n        default:\r\n            return meta;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\r\n    action: OrderAction,\r\n): OrderErrorsState {\r\n    switch (action.type) {\r\n        case OrderActionType.LoadOrderRequested:\r\n        case OrderActionType.LoadOrderSucceeded:\r\n        case OrderActionType.LoadOrderPaymentsSucceeded:\r\n        case OrderActionType.LoadOrderPaymentsRequested:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case OrderActionType.LoadOrderFailed:\r\n        case OrderActionType.LoadOrderPaymentsFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\r\n    action: OrderAction,\r\n): OrderStatusesState {\r\n    switch (action.type) {\r\n        case OrderActionType.LoadOrderRequested:\r\n        case OrderActionType.LoadOrderPaymentsRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case OrderActionType.LoadOrderSucceeded:\r\n        case OrderActionType.LoadOrderFailed:\r\n        case OrderActionType.LoadOrderPaymentsSucceeded:\r\n        case OrderActionType.LoadOrderPaymentsFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { Address } from '../address';\r\n\r\nexport interface OrderBillingAddress extends Address {\r\n    email?: string;\r\n}\r\n\r\nexport default interface OrderBillingAddressState {\r\n    data?: OrderBillingAddress;\r\n}\r\n\r\nexport const DEFAULT_STATE: OrderBillingAddressState = {};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { LoadOrderAction } from '../order';\r\n\r\nimport PaymentResponseBody from './payment-response-body';\r\n\r\nexport enum PaymentActionType {\r\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\r\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\r\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\r\n\r\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\r\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\r\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\r\n}\r\n\r\nexport type PaymentAction = SubmitPaymentAction | InitializeOffsitePaymentAction;\r\n\r\nexport type SubmitPaymentAction =\r\n    | SubmitPaymentRequestedAction\r\n    | SubmitPaymentSucceededAction\r\n    | SubmitPaymentFailedAction\r\n    | LoadOrderAction;\r\n\r\nexport type InitializeOffsitePaymentAction =\r\n    | InitializeOffsitePaymentRequestedAction\r\n    | InitializeOffsitePaymentSucceededAction\r\n    | InitializeOffsitePaymentFailedAction;\r\n\r\nexport interface SubmitPaymentRequestedAction extends Action {\r\n    type: PaymentActionType.SubmitPaymentRequested;\r\n}\r\n\r\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\r\n    type: PaymentActionType.SubmitPaymentSucceeded;\r\n}\r\n\r\nexport interface SubmitPaymentFailedAction extends Action<Error> {\r\n    type: PaymentActionType.SubmitPaymentFailed;\r\n}\r\n\r\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\r\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\r\n}\r\n\r\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\r\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\r\n}\r\n\r\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\r\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\r\n}\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport PaymentMethod from './payment-method';\r\nimport PaymentMethodMeta from './payment-method-meta';\r\n\r\nexport enum PaymentMethodActionType {\r\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\r\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\r\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\r\n\r\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\r\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\r\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\r\n}\r\n\r\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\r\n\r\nexport type LoadPaymentMethodAction =\r\n    | LoadPaymentMethodRequestedAction\r\n    | LoadPaymentMethodSucceededAction\r\n    | LoadPaymentMethodFailedAction;\r\n\r\nexport type LoadPaymentMethodsAction =\r\n    | LoadPaymentMethodsRequestedAction\r\n    | LoadPaymentMethodsSucceededAction\r\n    | LoadPaymentMethodsFailedAction;\r\n\r\nexport interface LoadPaymentMethodRequestedAction extends Action {\r\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\r\n}\r\n\r\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\r\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\r\n}\r\n\r\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\r\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\r\n}\r\n\r\nexport interface LoadPaymentMethodsRequestedAction extends Action {\r\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\r\n}\r\n\r\nexport interface LoadPaymentMethodsSucceededAction\r\n    extends Action<PaymentMethod[], PaymentMethodMeta> {\r\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\r\n}\r\n\r\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\r\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\r\n}\r\n","import { Action, combineReducers } from '@bigcommerce/data-store';\r\n\r\nimport { replace } from '../common/utility';\r\nimport { OrderAction, OrderActionType } from '../order';\r\n\r\nimport OrderBillingAddressState, {\r\n    DEFAULT_STATE,\r\n    OrderBillingAddress,\r\n} from './order-billing-address-state';\r\n\r\nexport default function orderBillingAddressReducer(\r\n    state: OrderBillingAddressState = DEFAULT_STATE,\r\n    action: Action,\r\n): OrderBillingAddressState {\r\n    const reducer = combineReducers<OrderBillingAddressState>({\r\n        data: dataReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: OrderBillingAddress | undefined,\r\n    action: OrderAction,\r\n): OrderBillingAddress | undefined {\r\n    switch (action.type) {\r\n        case OrderActionType.LoadOrderPaymentsSucceeded:\r\n        case OrderActionType.LoadOrderSucceeded:\r\n            return replace(data, action.payload && action.payload.billingAddress);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n","import { combineReducers } from '@bigcommerce/data-store';\r\n\r\nimport { PaymentAction, PaymentActionType } from './payment-actions';\r\nimport PaymentResponseBody from './payment-response-body';\r\nimport PaymentState from './payment-state';\r\n\r\nexport default function paymentReducer(\r\n    state: PaymentState = {},\r\n    action: PaymentAction,\r\n): PaymentState {\r\n    const reducer = combineReducers<PaymentState, PaymentAction>({\r\n        data: dataReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: PaymentResponseBody | undefined,\r\n    action: PaymentAction,\r\n): PaymentResponseBody | undefined {\r\n    switch (action.type) {\r\n        case PaymentActionType.SubmitPaymentSucceeded:\r\n            return action.payload;\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n","import PaymentMethod from './payment-method';\r\nimport PaymentMethodMeta from './payment-method-meta';\r\n\r\nexport default interface PaymentMethodState {\r\n    data?: PaymentMethod[];\r\n    meta?: PaymentMethodMeta;\r\n    errors: PaymentMethodErrorsState;\r\n    statuses: PaymentMethodStatusesState;\r\n}\r\n\r\nexport interface PaymentMethodErrorsState {\r\n    loadMethodId?: string;\r\n    loadError?: Error;\r\n    loadMethodError?: Error;\r\n}\r\n\r\nexport interface PaymentMethodStatusesState {\r\n    loadMethodId?: string;\r\n    isLoading?: boolean;\r\n    isLoadingMethod?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: PaymentMethodState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { LoadOrderPaymentsAction } from '../order';\r\n\r\nexport enum PaymentStrategyActionType {\r\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\r\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\r\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\r\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\r\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\r\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\r\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\r\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\r\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\r\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\r\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\r\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\r\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\r\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\r\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\r\n}\r\n\r\nexport type PaymentStrategyAction =\r\n    | PaymentStrategyExecuteAction\r\n    | PaymentStrategyFinalizeAction\r\n    | PaymentStrategyInitializeAction\r\n    | PaymentStrategyDeinitializeAction\r\n    | PaymentStrategyWidgetAction;\r\n\r\nexport type PaymentStrategyExecuteAction =\r\n    | ExecuteRequestedAction\r\n    | ExecuteSucceededAction\r\n    | ExecuteFailedAction\r\n    | LoadOrderPaymentsAction;\r\n\r\nexport type PaymentStrategyFinalizeAction =\r\n    | FinalizeRequestedAction\r\n    | FinalizeSucceededAction\r\n    | FinalizeFailedAction\r\n    | LoadOrderPaymentsAction;\r\n\r\nexport type PaymentStrategyInitializeAction =\r\n    | InitializeRequestedAction\r\n    | InitializeSucceededAction\r\n    | InitializeFailedAction;\r\n\r\nexport type PaymentStrategyDeinitializeAction =\r\n    | DeinitializeRequestedAction\r\n    | DeinitializeSucceededAction\r\n    | DeinitializeFailedAction;\r\n\r\nexport type PaymentStrategyWidgetAction =\r\n    | WidgetInteractionStartedAction\r\n    | WidgetInteractionFinishedAction\r\n    | WidgetInteractionFailedAction;\r\n\r\nexport interface ExecuteRequestedAction extends Action {\r\n    type: PaymentStrategyActionType.ExecuteRequested;\r\n}\r\n\r\nexport interface ExecuteSucceededAction extends Action {\r\n    type: PaymentStrategyActionType.ExecuteSucceeded;\r\n}\r\n\r\nexport interface ExecuteFailedAction extends Action<Error> {\r\n    type: PaymentStrategyActionType.ExecuteFailed;\r\n}\r\n\r\nexport interface FinalizeRequestedAction extends Action {\r\n    type: PaymentStrategyActionType.FinalizeRequested;\r\n}\r\n\r\nexport interface FinalizeSucceededAction extends Action {\r\n    type: PaymentStrategyActionType.FinalizeSucceeded;\r\n}\r\n\r\nexport interface FinalizeFailedAction extends Action<Error> {\r\n    type: PaymentStrategyActionType.FinalizeFailed;\r\n}\r\n\r\nexport interface InitializeRequestedAction extends Action {\r\n    type: PaymentStrategyActionType.InitializeRequested;\r\n}\r\n\r\nexport interface InitializeSucceededAction extends Action {\r\n    type: PaymentStrategyActionType.InitializeSucceeded;\r\n}\r\n\r\nexport interface InitializeFailedAction extends Action<Error> {\r\n    type: PaymentStrategyActionType.InitializeFailed;\r\n}\r\n\r\nexport interface DeinitializeRequestedAction extends Action {\r\n    type: PaymentStrategyActionType.DeinitializeRequested;\r\n}\r\n\r\nexport interface DeinitializeSucceededAction extends Action {\r\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\r\n}\r\n\r\nexport interface DeinitializeFailedAction extends Action<Error> {\r\n    type: PaymentStrategyActionType.DeinitializeFailed;\r\n}\r\n\r\nexport interface WidgetInteractionStartedAction extends Action {\r\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\r\n}\r\n\r\nexport interface WidgetInteractionFinishedAction extends Action {\r\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\r\n}\r\n\r\nexport interface WidgetInteractionFailedAction extends Action<Error> {\r\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\r\n\r\nimport PaymentMethod from './payment-method';\r\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\r\nimport PaymentMethodMeta from './payment-method-meta';\r\nimport PaymentMethodState, {\r\n    DEFAULT_STATE,\r\n    PaymentMethodErrorsState,\r\n    PaymentMethodStatusesState,\r\n} from './payment-method-state';\r\n\r\nexport default function paymentMethodReducer(\r\n    state: PaymentMethodState = DEFAULT_STATE,\r\n    action: Action,\r\n): PaymentMethodState {\r\n    const reducer = combineReducers<PaymentMethodState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        meta: metaReducer,\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: PaymentMethod[] | undefined,\r\n    action: PaymentMethodAction,\r\n): PaymentMethod[] | undefined {\r\n    switch (action.type) {\r\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\r\n            return mergeOrPush(\r\n                data || [],\r\n                action.payload,\r\n                action.payload && {\r\n                    id: action.payload.id,\r\n                    gateway: action.payload.gateway,\r\n                },\r\n            );\r\n\r\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\r\n            return arrayReplace(data, action.payload, {\r\n                matchObject: (methodA, methodB) =>\r\n                    methodA.id === methodB.id && methodA.gateway === methodB.gateway,\r\n            });\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction metaReducer(\r\n    meta: PaymentMethodMeta | undefined,\r\n    action: PaymentMethodAction,\r\n): PaymentMethodMeta | undefined {\r\n    switch (action.type) {\r\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\r\n            return objectMerge(meta, action.meta);\r\n\r\n        default:\r\n            return meta;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\r\n    action: PaymentMethodAction,\r\n): PaymentMethodErrorsState {\r\n    switch (action.type) {\r\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\r\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\r\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\r\n            return objectMerge(errors, {\r\n                loadMethodId: undefined,\r\n                loadMethodError: undefined,\r\n            });\r\n\r\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\r\n            return objectMerge(errors, {\r\n                loadMethodId: action.meta.methodId,\r\n                loadMethodError: action.payload,\r\n            });\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\r\n    action: PaymentMethodAction,\r\n): PaymentMethodStatusesState {\r\n    switch (action.type) {\r\n        case PaymentMethodActionType.LoadPaymentMethodsRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\r\n        case PaymentMethodActionType.LoadPaymentMethodsFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        case PaymentMethodActionType.LoadPaymentMethodRequested:\r\n            return objectMerge(statuses, {\r\n                isLoadingMethod: true,\r\n                loadMethodId: action.meta.methodId,\r\n            });\r\n\r\n        case PaymentMethodActionType.LoadPaymentMethodSucceeded:\r\n        case PaymentMethodActionType.LoadPaymentMethodFailed:\r\n            return objectMerge(statuses, {\r\n                isLoadingMethod: false,\r\n                loadMethodId: undefined,\r\n            });\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\r\n\r\nimport isPlainObject from './is-plain-object';\r\nimport objectMerge from './object-merge';\r\n\r\n/**\r\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\r\n * with the existing item in the array. This function always returns a new array.\r\n */\r\nexport default function mergeOrPush<T>(array: T[], item?: T, predicate?: ValueKeyIteratee<T>): T[] {\r\n    if (!item) {\r\n        return array;\r\n    }\r\n\r\n    const defaultPredicate = pick(item, 'id');\r\n    const index = findIndex(\r\n        array,\r\n        typeof predicate === 'object' ? pickBy(predicate) : predicate || defaultPredicate,\r\n    );\r\n    const newArray = [...array];\r\n\r\n    if (index === -1) {\r\n        newArray.push(item);\r\n    } else {\r\n        const existingItem = array[index];\r\n\r\n        newArray[index] =\r\n            isPlainObject(existingItem) && isPlainObject(item)\r\n                ? objectMerge(existingItem, item)\r\n                : item;\r\n    }\r\n\r\n    return newArray;\r\n}\r\n","export default interface PaymentStrategyState {\r\n    data: PaymentStrategyDataState;\r\n    errors: PaymentStrategyErrorsState;\r\n    statuses: PaymentStrategyStatusesState;\r\n}\r\n\r\nexport interface PaymentStrategyDataState {\r\n    [key: string]: {\r\n        isInitialized: boolean;\r\n    };\r\n}\r\n\r\nexport interface PaymentStrategyErrorsState {\r\n    deinitializeError?: Error;\r\n    deinitializeMethodId?: string;\r\n    executeError?: Error;\r\n    executeMethodId?: string;\r\n    finalizeError?: Error;\r\n    finalizeMethodId?: string;\r\n    initializeError?: Error;\r\n    initializeMethodId?: string;\r\n    widgetInteractionError?: Error;\r\n    widgetInteractionMethodId?: string;\r\n}\r\n\r\nexport interface PaymentStrategyStatusesState {\r\n    deinitializeMethodId?: string;\r\n    executeMethodId?: string;\r\n    finalizeMethodId?: string;\r\n    initializeMethodId?: string;\r\n    isDeinitializing?: boolean;\r\n    isExecuting?: boolean;\r\n    isFinalizing?: boolean;\r\n    isInitializing?: boolean;\r\n    isWidgetInteracting?: boolean;\r\n    widgetInteractionMethodId?: string;\r\n}\r\n\r\nexport const DEFAULT_STATE: PaymentStrategyState = {\r\n    data: {},\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { VaultAccessToken } from './instrument';\r\nimport { InstrumentsResponseBody } from './instrument-response-body';\r\n\r\nexport enum InstrumentActionType {\r\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\r\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\r\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\r\n\r\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\r\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\r\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\r\n}\r\n\r\nexport type InstrumentAction = LoadInstrumentsAction | DeleteInstrumentAction;\r\n\r\nexport type LoadInstrumentsAction =\r\n    | LoadInstrumentsRequestedAction\r\n    | LoadInstrumentsSucceededAction\r\n    | LoadInstrumentsFailedAction;\r\n\r\nexport type DeleteInstrumentAction =\r\n    | DeleteInstrumentRequestedAction\r\n    | DeleteInstrumentSucceededAction\r\n    | DeleteInstrumentFailedAction;\r\n\r\nexport interface LoadInstrumentsRequestedAction extends Action {\r\n    type: InstrumentActionType.LoadInstrumentsRequested;\r\n}\r\n\r\nexport interface LoadInstrumentsSucceededAction\r\n    extends Action<InstrumentsResponseBody, VaultAccessToken> {\r\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\r\n}\r\n\r\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\r\n    type: InstrumentActionType.LoadInstrumentsFailed;\r\n}\r\n\r\nexport interface DeleteInstrumentRequestedAction extends Action {\r\n    type: InstrumentActionType.DeleteInstrumentRequested;\r\n}\r\n\r\nexport interface DeleteInstrumentSucceededAction\r\n    extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\r\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\r\n}\r\n\r\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\r\n    type: InstrumentActionType.DeleteInstrumentFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge } from '../common/utility';\r\n\r\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\r\nimport PaymentStrategyState, {\r\n    DEFAULT_STATE,\r\n    PaymentStrategyDataState,\r\n    PaymentStrategyErrorsState,\r\n    PaymentStrategyStatusesState,\r\n} from './payment-strategy-state';\r\n\r\nexport default function paymentStrategyReducer(\r\n    state: PaymentStrategyState = DEFAULT_STATE,\r\n    action: Action,\r\n): PaymentStrategyState {\r\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\r\n    action: PaymentStrategyAction,\r\n): PaymentStrategyDataState {\r\n    switch (action.type) {\r\n        case PaymentStrategyActionType.InitializeSucceeded: {\r\n            if (action.meta) {\r\n                const { methodId, gatewayId } = action.meta;\r\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\r\n\r\n                return objectMerge(data, {\r\n                    [initializeMethodId]: {\r\n                        isInitialized: true,\r\n                    },\r\n                });\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        case PaymentStrategyActionType.DeinitializeSucceeded: {\r\n            if (action.meta) {\r\n                const { methodId, gatewayId } = action.meta;\r\n                const initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\r\n\r\n                return objectMerge(data, {\r\n                    [initializeMethodId]: {\r\n                        isInitialized: false,\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\r\n    action: PaymentStrategyAction,\r\n): PaymentStrategyErrorsState {\r\n    switch (action.type) {\r\n        case PaymentStrategyActionType.InitializeRequested:\r\n        case PaymentStrategyActionType.InitializeSucceeded:\r\n            return objectMerge(errors, {\r\n                initializeError: undefined,\r\n                initializeMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.InitializeFailed: {\r\n            let initializeMethodId = action.meta && action.meta.methodId;\r\n\r\n            if (action.meta) {\r\n                const { methodId, gatewayId } = action.meta;\r\n\r\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\r\n            }\r\n\r\n            return objectMerge(errors, {\r\n                initializeError: action.payload,\r\n                initializeMethodId,\r\n            });\r\n        }\r\n\r\n        case PaymentStrategyActionType.DeinitializeRequested:\r\n        case PaymentStrategyActionType.DeinitializeSucceeded:\r\n            return objectMerge(errors, {\r\n                deinitializeError: undefined,\r\n                deinitializeMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.DeinitializeFailed: {\r\n            let deinitializeMethodId = action.meta && action.meta.methodId;\r\n\r\n            if (action.meta) {\r\n                const { methodId, gatewayId } = action.meta;\r\n\r\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\r\n            }\r\n\r\n            return objectMerge(errors, {\r\n                deinitializeError: action.payload,\r\n                deinitializeMethodId,\r\n            });\r\n        }\r\n\r\n        case PaymentStrategyActionType.ExecuteRequested:\r\n        case PaymentStrategyActionType.ExecuteSucceeded:\r\n            return objectMerge(errors, {\r\n                executeError: undefined,\r\n                executeMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.ExecuteFailed:\r\n            return objectMerge(errors, {\r\n                executeError: action.payload,\r\n                executeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case PaymentStrategyActionType.FinalizeRequested:\r\n        case PaymentStrategyActionType.FinalizeSucceeded:\r\n            return objectMerge(errors, {\r\n                finalizeError: undefined,\r\n                finalizeMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.FinalizeFailed:\r\n            return objectMerge(errors, {\r\n                finalizeError: action.payload,\r\n                finalizeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case PaymentStrategyActionType.WidgetInteractionStarted:\r\n        case PaymentStrategyActionType.WidgetInteractionFinished:\r\n            return objectMerge(errors, {\r\n                widgetInteractionError: undefined,\r\n                widgetInteractionMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.WidgetInteractionFailed:\r\n            return objectMerge(errors, {\r\n                widgetInteractionError: action.payload,\r\n                widgetInteractionMethodId: action.meta.methodId,\r\n            });\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\r\n    action: PaymentStrategyAction,\r\n): PaymentStrategyStatusesState {\r\n    switch (action.type) {\r\n        case PaymentStrategyActionType.InitializeRequested: {\r\n            let initializeMethodId = action.meta && action.meta.methodId;\r\n\r\n            if (action.meta) {\r\n                const { methodId, gatewayId } = action.meta;\r\n\r\n                initializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\r\n            }\r\n\r\n            return objectMerge(statuses, {\r\n                isInitializing: true,\r\n                initializeMethodId,\r\n            });\r\n        }\r\n\r\n        case PaymentStrategyActionType.InitializeFailed:\r\n        case PaymentStrategyActionType.InitializeSucceeded:\r\n            return objectMerge(statuses, {\r\n                isInitializing: false,\r\n                initializeMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.DeinitializeRequested: {\r\n            let deinitializeMethodId = action.meta && action.meta.methodId;\r\n\r\n            if (action.meta) {\r\n                const { methodId, gatewayId } = action.meta;\r\n\r\n                deinitializeMethodId = gatewayId ? `${methodId}.${gatewayId}` : methodId;\r\n            }\r\n\r\n            return objectMerge(statuses, {\r\n                isDeinitializing: true,\r\n                deinitializeMethodId,\r\n            });\r\n        }\r\n\r\n        case PaymentStrategyActionType.DeinitializeFailed:\r\n        case PaymentStrategyActionType.DeinitializeSucceeded:\r\n            return objectMerge(statuses, {\r\n                isDeinitializing: false,\r\n                deinitializeMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.ExecuteRequested:\r\n            return objectMerge(statuses, {\r\n                isExecuting: true,\r\n                executeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case PaymentStrategyActionType.ExecuteFailed:\r\n        case PaymentStrategyActionType.ExecuteSucceeded:\r\n            return objectMerge(statuses, {\r\n                isExecuting: false,\r\n                executeMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.FinalizeRequested:\r\n            return objectMerge(statuses, {\r\n                isFinalizing: true,\r\n                finalizeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case PaymentStrategyActionType.FinalizeFailed:\r\n        case PaymentStrategyActionType.FinalizeSucceeded:\r\n            return objectMerge(statuses, {\r\n                isFinalizing: false,\r\n                finalizeMethodId: undefined,\r\n            });\r\n\r\n        case PaymentStrategyActionType.WidgetInteractionStarted:\r\n            return objectMerge(statuses, {\r\n                isWidgetInteracting: true,\r\n                widgetInteractionMethodId: action.meta.methodId,\r\n            });\r\n\r\n        case PaymentStrategyActionType.WidgetInteractionFinished:\r\n        case PaymentStrategyActionType.WidgetInteractionFailed:\r\n            return objectMerge(statuses, {\r\n                isWidgetInteracting: false,\r\n                widgetInteractionMethodId: undefined,\r\n            });\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\r\n\r\nexport default interface InstrumentState {\r\n    data?: PaymentInstrument[];\r\n    meta?: InstrumentMeta;\r\n    errors: InstrumentErrorState;\r\n    statuses: InstrumentStatusState;\r\n}\r\n\r\nexport interface InstrumentErrorState {\r\n    deleteError?: Error;\r\n    failedInstrument?: string;\r\n    loadError?: Error;\r\n    vaultError?: Error;\r\n}\r\n\r\nexport interface InstrumentStatusState {\r\n    isDeleting?: boolean;\r\n    isLoading?: boolean;\r\n    isVaulting?: boolean;\r\n    deletingInstrument?: string;\r\n}\r\n\r\nexport type InstrumentMeta = VaultAccessToken;\r\n\r\nexport const DEFAULT_STATE = {\r\n    data: [],\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { AmazonPayRemoteCheckout } from './methods';\r\n\r\nexport enum RemoteCheckoutActionType {\r\n    ForgetCheckoutRemoteCustomerRequested = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_REQUESTED',\r\n    ForgetCheckoutRemoteCustomerSucceeded = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_SUCCEEDED',\r\n    ForgetCheckoutRemoteCustomerFailed = 'FORGET_CHECKOUT_REMOTE_CUSTOMER_FAILED',\r\n\r\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\r\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\r\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\r\n\r\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\r\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\r\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\r\n\r\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\r\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\r\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\r\n\r\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\r\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\r\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\r\n\r\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\r\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\r\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\r\n\r\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\r\n}\r\n\r\nexport type RemoteCheckoutAction =\r\n    | ForgetCheckoutRemoteCustomerAction\r\n    | InitializeRemoteBillingAction\r\n    | InitializeRemoteShippingAction\r\n    | InitializeRemotePaymentAction\r\n    | SignOutRemoteCustomerAction\r\n    | LoadRemoteSettingsAction\r\n    | UpdateRemoteCheckoutAction;\r\n\r\nexport type ForgetCheckoutRemoteCustomerAction =\r\n    | ForgetCheckoutRemoteCustomerRequestedAction\r\n    | ForgetCheckoutRemoteCustomerSucceededAction\r\n    | ForgetCheckoutRemoteCustomerFailedAction;\r\n\r\nexport interface ForgetCheckoutRemoteCustomerRequestedAction extends Action {\r\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerRequested;\r\n}\r\n\r\nexport interface ForgetCheckoutRemoteCustomerSucceededAction extends Action {\r\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerSucceeded;\r\n}\r\n\r\nexport interface ForgetCheckoutRemoteCustomerFailedAction extends Action {\r\n    type: RemoteCheckoutActionType.ForgetCheckoutRemoteCustomerFailed;\r\n}\r\n\r\nexport type InitializeRemoteBillingAction =\r\n    | InitializeRemoteBillingSucceededAction\r\n    | InitializeRemoteBillingFailedAction\r\n    | InitializeRemoteBillingRequestedAction;\r\n\r\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\r\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\r\n}\r\n\r\nexport interface InitializeRemoteBillingFailedAction extends Action {\r\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\r\n}\r\n\r\nexport interface InitializeRemoteBillingRequestedAction extends Action {\r\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\r\n}\r\n\r\nexport type InitializeRemoteShippingAction =\r\n    | InitializeRemoteShippingSucceededAction\r\n    | InitializeRemoteShippingFailedAction\r\n    | InitializeRemoteShippingRequestedAction;\r\n\r\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\r\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\r\n}\r\n\r\nexport interface InitializeRemoteShippingFailedAction extends Action {\r\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\r\n}\r\n\r\nexport interface InitializeRemoteShippingRequestedAction extends Action {\r\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\r\n}\r\n\r\nexport type InitializeRemotePaymentAction =\r\n    | InitializeRemotePaymentSucceededAction\r\n    | InitializeRemotePaymentFailedAction\r\n    | InitializeRemotePaymentRequestedAction;\r\n\r\nexport interface InitializeRemotePaymentSucceededAction extends Action {\r\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\r\n}\r\n\r\nexport interface InitializeRemotePaymentFailedAction extends Action {\r\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\r\n}\r\n\r\nexport interface InitializeRemotePaymentRequestedAction extends Action {\r\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\r\n}\r\n\r\nexport type SignOutRemoteCustomerAction =\r\n    | SignOutRemoteCustomerSucceededAction\r\n    | SignOutRemoteCustomerFailedAction\r\n    | SignOutRemoteCustomerRequestedAction;\r\n\r\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\r\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\r\n}\r\n\r\nexport interface SignOutRemoteCustomerFailedAction extends Action {\r\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\r\n}\r\n\r\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\r\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\r\n}\r\n\r\nexport type LoadRemoteSettingsAction =\r\n    | LoadRemoteSettingsSucceededAction\r\n    | LoadRemoteSettingsRequestedAction\r\n    | LoadRemoteSettingsFailedAction;\r\n\r\nexport interface LoadRemoteSettingsSucceededAction extends Action {\r\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\r\n}\r\n\r\nexport interface LoadRemoteSettingsRequestedAction extends Action {\r\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\r\n}\r\n\r\nexport interface LoadRemoteSettingsFailedAction extends Action {\r\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\r\n}\r\n\r\nexport interface UpdateRemoteCheckoutAction extends Action {\r\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../../common/error';\r\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\r\n\r\nimport PaymentInstrument from './instrument';\r\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\r\nimport InstrumentState, {\r\n    DEFAULT_STATE,\r\n    InstrumentErrorState,\r\n    InstrumentMeta,\r\n    InstrumentStatusState,\r\n} from './instrument-state';\r\n\r\nexport default function instrumentReducer(\r\n    state: InstrumentState = DEFAULT_STATE,\r\n    action: Action,\r\n): InstrumentState {\r\n    const reducer = combineReducers<InstrumentState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        meta: metaReducer,\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\r\n    action: InstrumentAction,\r\n): PaymentInstrument[] {\r\n    switch (action.type) {\r\n        case InstrumentActionType.LoadInstrumentsSucceeded:\r\n            return arrayReplace(data, (action.payload && action.payload.vaultedInstruments) || []);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction metaReducer(\r\n    meta: InstrumentMeta | undefined,\r\n    action: InstrumentAction,\r\n): InstrumentMeta | undefined {\r\n    switch (action.type) {\r\n        case InstrumentActionType.LoadInstrumentsSucceeded:\r\n        case InstrumentActionType.DeleteInstrumentSucceeded:\r\n            return objectMerge(meta, action.meta);\r\n\r\n        default:\r\n            return meta;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\r\n    action: InstrumentAction,\r\n): InstrumentErrorState {\r\n    switch (action.type) {\r\n        case InstrumentActionType.LoadInstrumentsRequested:\r\n        case InstrumentActionType.LoadInstrumentsSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case InstrumentActionType.DeleteInstrumentRequested:\r\n        case InstrumentActionType.DeleteInstrumentSucceeded:\r\n            return objectMerge(errors, {\r\n                deleteError: undefined,\r\n                failedInstrument: undefined,\r\n            });\r\n\r\n        case InstrumentActionType.LoadInstrumentsFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        case InstrumentActionType.DeleteInstrumentFailed:\r\n            return objectMerge(errors, {\r\n                deleteError: action.payload,\r\n                failedInstrument: action.meta.instrumentId,\r\n            });\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\r\n    action: InstrumentAction,\r\n): InstrumentStatusState {\r\n    switch (action.type) {\r\n        case InstrumentActionType.LoadInstrumentsRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case InstrumentActionType.DeleteInstrumentRequested:\r\n            return objectMerge(statuses, {\r\n                isDeleting: true,\r\n                deletingInstrument: action.meta.instrumentId,\r\n            });\r\n\r\n        case InstrumentActionType.LoadInstrumentsSucceeded:\r\n        case InstrumentActionType.LoadInstrumentsFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        case InstrumentActionType.DeleteInstrumentSucceeded:\r\n        case InstrumentActionType.DeleteInstrumentFailed:\r\n            return objectMerge(statuses, {\r\n                isDeleting: false,\r\n                deletingInstrument: undefined,\r\n            });\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { AmazonPayRemoteCheckout } from './methods';\r\n\r\nexport default interface RemoteCheckoutState {\r\n    data: RemoteCheckoutStateData;\r\n}\r\n\r\nexport interface RemoteCheckoutStateData {\r\n    amazon?: AmazonPayRemoteCheckout;\r\n}\r\n\r\nexport const DEFAULT_STATE: RemoteCheckoutState = {\r\n    data: {},\r\n};\r\n","import { combineReducers } from '@bigcommerce/data-store';\r\n\r\nimport { objectMerge, objectSet } from '../common/utility';\r\n\r\nimport RemoteCheckout from './remote-checkout';\r\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\r\nimport RemoteCheckoutState, {\r\n    DEFAULT_STATE,\r\n    RemoteCheckoutStateData,\r\n} from './remote-checkout-state';\r\n\r\nexport default function remoteCheckoutReducer(\r\n    state: RemoteCheckoutState = DEFAULT_STATE,\r\n    action: RemoteCheckoutAction,\r\n): RemoteCheckoutState {\r\n    if (!action.meta || !action.meta.methodId) {\r\n        return state;\r\n    }\r\n\r\n    const reducer = combineReducers<RemoteCheckoutState>({\r\n        data: combineReducers<RemoteCheckoutStateData>({\r\n            [action.meta.methodId]: dataReducer,\r\n        }),\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(data: RemoteCheckout, action: RemoteCheckoutAction): RemoteCheckout {\r\n    switch (action.type) {\r\n        case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\r\n            return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\r\n\r\n        case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\r\n            return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\r\n\r\n        case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\r\n            return objectSet(data, 'settings', action.payload);\r\n\r\n        case RemoteCheckoutActionType.UpdateRemoteCheckout:\r\n            return objectMerge(data, action.payload);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n","import Consignment from './consignment';\r\n\r\nexport default interface ConsignmentState {\r\n    data?: Consignment[];\r\n    errors: ConsignmentErrorsState;\r\n    statuses: ConsignmentStatusesState;\r\n}\r\n\r\nexport interface ConsignmentErrorsState {\r\n    loadError?: Error;\r\n    loadShippingOptionsError?: Error;\r\n    createError?: Error;\r\n    updateError: { [key: string]: Error | undefined };\r\n    deleteError: { [key: string]: Error | undefined };\r\n    updateShippingOptionError: { [key: string]: Error | undefined };\r\n}\r\n\r\nexport interface ConsignmentStatusesState {\r\n    isLoading?: boolean;\r\n    isLoadingShippingOptions?: boolean;\r\n    isCreating?: boolean;\r\n    isUpdating: { [key: string]: boolean };\r\n    isDeleting: { [key: string]: boolean };\r\n    isUpdatingShippingOption: { [key: string]: boolean };\r\n}\r\n\r\nexport const DEFAULT_STATE: ConsignmentState = {\r\n    errors: {\r\n        updateShippingOptionError: {},\r\n        updateError: {},\r\n        deleteError: {},\r\n    },\r\n    statuses: {\r\n        isUpdating: {},\r\n        isUpdatingShippingOption: {},\r\n        isDeleting: {},\r\n    },\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { PickupOptionMeta, PickupOptionResult } from './pickup-option';\r\n\r\nexport enum PickupOptionActionType {\r\n    LoadPickupOptionsRequested = 'LOAD_PICKUP_OPTIONS_REQUESTED',\r\n    LoadPickupOptionsSucceeded = 'LOAD_PICKUP_OPTIONS_SUCCEEDED',\r\n    LoadPickupOptionsFailed = 'LOAD_PICKUP_OPTIONS_FAILED',\r\n}\r\n\r\nexport type LoadPickupOptionsAction =\r\n    | PickupOptionRequestedAction\r\n    | LoadPickupOptionsSucceededAction\r\n    | LoadPickupOptionsFailedAction;\r\n\r\nexport interface PickupOptionRequestedAction extends Action {\r\n    type: PickupOptionActionType.LoadPickupOptionsRequested;\r\n}\r\n\r\nexport interface LoadPickupOptionsSucceededAction\r\n    extends Action<PickupOptionResult[], PickupOptionMeta> {\r\n    type: PickupOptionActionType.LoadPickupOptionsSucceeded;\r\n}\r\n\r\nexport interface LoadPickupOptionsFailedAction extends Action<Error> {\r\n    type: PickupOptionActionType.LoadPickupOptionsFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\r\nimport { CouponAction, CouponActionType } from '../coupon';\r\nimport { CustomerAction, CustomerActionType } from '../customer';\r\n\r\nimport Consignment from './consignment';\r\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\r\nimport ConsignmentState, {\r\n    ConsignmentErrorsState,\r\n    ConsignmentStatusesState,\r\n    DEFAULT_STATE,\r\n} from './consignment-state';\r\n\r\nexport default function consignmentReducer(\r\n    state: ConsignmentState = DEFAULT_STATE,\r\n    action: Action,\r\n): ConsignmentState {\r\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: Consignment[] | undefined,\r\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction,\r\n): Consignment[] | undefined {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\r\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\r\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\r\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\r\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\r\n        case CouponActionType.ApplyCouponSucceeded:\r\n        case CouponActionType.RemoveCouponSucceeded:\r\n            return arrayReplace(data, action.payload && action.payload.consignments);\r\n\r\n        case CustomerActionType.SignOutCustomerSucceeded:\r\n            return arrayReplace(data, []);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\r\n    action: ConsignmentAction | CheckoutAction,\r\n): ConsignmentErrorsState {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutRequested:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\r\n        case ConsignmentActionType.LoadShippingOptionsRequested:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case CheckoutActionType.LoadCheckoutFailed:\r\n        case ConsignmentActionType.LoadShippingOptionsFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        case ConsignmentActionType.CreateConsignmentsRequested:\r\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\r\n            return objectSet(errors, 'createError', undefined);\r\n\r\n        case ConsignmentActionType.CreateConsignmentsFailed:\r\n            return objectSet(errors, 'createError', action.payload);\r\n\r\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\r\n        case ConsignmentActionType.UpdateConsignmentRequested:\r\n            if (action.meta) {\r\n                return objectMerge(errors, {\r\n                    updateError: {\r\n                        [action.meta.id]: undefined,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return errors;\r\n\r\n        case ConsignmentActionType.UpdateConsignmentFailed:\r\n            if (action.meta) {\r\n                return objectMerge(errors, {\r\n                    updateError: {\r\n                        [action.meta.id]: action.payload,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return errors;\r\n\r\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\r\n        case ConsignmentActionType.DeleteConsignmentRequested:\r\n            if (action.meta) {\r\n                return objectMerge(errors, {\r\n                    deleteError: {\r\n                        [action.meta.id]: undefined,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return errors;\r\n\r\n        case ConsignmentActionType.DeleteConsignmentFailed:\r\n            if (action.meta) {\r\n                return objectMerge(errors, {\r\n                    deleteError: {\r\n                        [action.meta.id]: action.payload,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return errors;\r\n\r\n        case ConsignmentActionType.UpdateShippingOptionRequested:\r\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\r\n            if (action.meta) {\r\n                return objectMerge(errors, {\r\n                    updateShippingOptionError: {\r\n                        [action.meta.id]: undefined,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return errors;\r\n\r\n        case ConsignmentActionType.UpdateShippingOptionFailed:\r\n            if (action.meta) {\r\n                return objectMerge(errors, {\r\n                    updateShippingOptionError: {\r\n                        [action.meta.id]: action.payload,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return errors;\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\r\n    action: ConsignmentAction | CheckoutAction,\r\n): ConsignmentStatusesState {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case ConsignmentActionType.LoadShippingOptionsRequested:\r\n            return objectSet(statuses, 'isLoadingShippingOptions', true);\r\n\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n        case CheckoutActionType.LoadCheckoutFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\r\n        case ConsignmentActionType.LoadShippingOptionsFailed:\r\n            return objectSet(statuses, 'isLoadingShippingOptions', false);\r\n\r\n        case ConsignmentActionType.CreateConsignmentsRequested:\r\n            return objectSet(statuses, 'isCreating', true);\r\n\r\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\r\n        case ConsignmentActionType.CreateConsignmentsFailed:\r\n            return objectSet(statuses, 'isCreating', false);\r\n\r\n        case ConsignmentActionType.UpdateConsignmentRequested:\r\n            if (action.meta) {\r\n                return objectMerge(statuses, {\r\n                    isUpdating: {\r\n                        [action.meta.id]: true,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return statuses;\r\n\r\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\r\n        case ConsignmentActionType.UpdateConsignmentFailed:\r\n            if (action.meta) {\r\n                return objectMerge(statuses, {\r\n                    isUpdating: {\r\n                        [action.meta.id]: false,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return statuses;\r\n\r\n        case ConsignmentActionType.DeleteConsignmentRequested:\r\n            if (action.meta) {\r\n                return objectMerge(statuses, {\r\n                    isDeleting: {\r\n                        [action.meta.id]: true,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return statuses;\r\n\r\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\r\n        case ConsignmentActionType.DeleteConsignmentFailed:\r\n            if (action.meta) {\r\n                return objectMerge(statuses, {\r\n                    isDeleting: {\r\n                        [action.meta.id]: false,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return statuses;\r\n\r\n        case ConsignmentActionType.UpdateShippingOptionRequested:\r\n            if (action.meta) {\r\n                return objectMerge(statuses, {\r\n                    isUpdatingShippingOption: {\r\n                        [action.meta.id]: true,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return statuses;\r\n\r\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\r\n        case ConsignmentActionType.UpdateShippingOptionFailed:\r\n            if (action.meta) {\r\n                return objectMerge(statuses, {\r\n                    isUpdatingShippingOption: {\r\n                        [action.meta.id]: false,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return statuses;\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","/**\r\n * Takes a nested object and flattens it.\r\n */\r\nexport default function objectFlatten(\r\n    object: { [key: string]: any },\r\n    parent?: string,\r\n): { [key: string]: any } {\r\n    const flattened: { [key: string]: any } = {};\r\n\r\n    Object.keys(object).forEach((key: string) => {\r\n        const value = object[key];\r\n        const keyString = parent ? `${parent}.${key}` : key;\r\n\r\n        if (typeof value === 'object') {\r\n            Object.assign(flattened, objectFlatten(value, keyString));\r\n        } else {\r\n            flattened[keyString] = value;\r\n        }\r\n    });\r\n\r\n    return flattened;\r\n}\r\n","export default function objectWithSortedKeys(object: { [key: string]: any }) {\r\n    const keys = Object.keys(object);\r\n    const sortedKeys = keys.sort();\r\n\r\n    const sortedArray = sortedKeys.reduce(\r\n        (previous, current) => ({\r\n            ...previous,\r\n            [current]: object[current],\r\n        }),\r\n        {},\r\n    );\r\n\r\n    return sortedArray;\r\n}\r\n","import { PickupOptionQueryMap } from './pickup-option';\r\n\r\nexport default interface PickupOptionState {\r\n    data?: PickupOptionQueryMap;\r\n    errors: PickupOptionErrorsState;\r\n    statuses: PickupOptionStatusesState;\r\n}\r\n\r\nexport interface PickupOptionErrorsState {\r\n    loadError?: Error;\r\n}\r\n\r\nexport interface PickupOptionStatusesState {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: PickupOptionState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { Country } from '../geography';\r\n\r\nexport enum ShippingCountryActionType {\r\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\r\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\r\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\r\n}\r\n\r\nexport type LoadShippingCountriesAction =\r\n    | LoadShippingCountriesRequestedAction\r\n    | LoadShippingCountriesSucceededAction\r\n    | LoadShippingCountriesFailedAction;\r\n\r\nexport interface LoadShippingCountriesRequestedAction extends Action {\r\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\r\n}\r\n\r\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\r\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\r\n}\r\n\r\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\r\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectFlatten, objectSet, objectWithSortedKeys } from '../common/utility';\r\n\r\nimport { PickupOptionQueryMap } from './pickup-option';\r\nimport { LoadPickupOptionsAction, PickupOptionActionType } from './pickup-option-actions';\r\nimport PickupOptionState, {\r\n    DEFAULT_STATE,\r\n    PickupOptionErrorsState,\r\n    PickupOptionStatusesState,\r\n} from './pickup-option-state';\r\n\r\nexport default function pickupOptionReducer(\r\n    state: PickupOptionState = DEFAULT_STATE,\r\n    action: Action,\r\n): PickupOptionState {\r\n    const reducer = combineReducers<PickupOptionState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: PickupOptionQueryMap | undefined,\r\n    action: LoadPickupOptionsAction,\r\n): PickupOptionQueryMap | undefined {\r\n    switch (action.type) {\r\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\r\n            if (action.meta) {\r\n                const optionQuery = {\r\n                    consignmentId: action.meta.consignmentId,\r\n                    searchArea: action.meta.searchArea,\r\n                };\r\n                const flattenedMeta = objectFlatten(optionQuery);\r\n                const sortedflattenedMeta = objectWithSortedKeys(flattenedMeta);\r\n                const keyString = btoa(`${JSON.stringify(sortedflattenedMeta)}`);\r\n\r\n                return objectSet(data, keyString, action.payload);\r\n            }\r\n\r\n            break;\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(errors: PickupOptionErrorsState = DEFAULT_STATE.errors, action: Action) {\r\n    switch (action.type) {\r\n        case PickupOptionActionType.LoadPickupOptionsRequested:\r\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case PickupOptionActionType.LoadPickupOptionsFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: PickupOptionStatusesState = DEFAULT_STATE.statuses,\r\n    action: Action,\r\n) {\r\n    switch (action.type) {\r\n        case PickupOptionActionType.LoadPickupOptionsRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case PickupOptionActionType.LoadPickupOptionsSucceeded:\r\n        case PickupOptionActionType.LoadPickupOptionsFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { Country } from '../geography';\r\n\r\nexport default interface ShippingCountryState {\r\n    data?: Country[];\r\n    errors: ShippingCountryErrorsState;\r\n    statuses: ShippingCountryStatusesState;\r\n}\r\n\r\nexport interface ShippingCountryErrorsState {\r\n    loadError?: Error;\r\n}\r\n\r\nexport interface ShippingCountryStatusesState {\r\n    isLoading?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: ShippingCountryState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nexport enum ShippingStrategyActionType {\r\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\r\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\r\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\r\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\r\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\r\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\r\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\r\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\r\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\r\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\r\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\r\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\r\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\r\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\r\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\r\n}\r\n\r\nexport type ShippingStrategyAction =\r\n    | ShippingStrategyUpdateAddressAction\r\n    | ShippingStrategySelectOptionAction\r\n    | ShippingStrategyInitializeAction\r\n    | ShippingStrategyDeinitializeAction\r\n    | ShippingStrategyWidgetAction;\r\n\r\nexport type ShippingStrategyUpdateAddressAction =\r\n    | UpdateAddressRequestedAction\r\n    | UpdateAddressSucceededAction\r\n    | UpdateAddressFailedAction;\r\n\r\nexport type ShippingStrategySelectOptionAction =\r\n    | SelectOptionRequestedAction\r\n    | SelectOptionSucceededAction\r\n    | SelectOptionFailedAction;\r\n\r\nexport type ShippingStrategyInitializeAction =\r\n    | InitializeRequestedAction\r\n    | InitializeSucceededAction\r\n    | InitializeFailedAction;\r\n\r\nexport type ShippingStrategyDeinitializeAction =\r\n    | DeinitializeRequestedAction\r\n    | DeinitializeSucceededAction\r\n    | DeinitializeFailedAction;\r\n\r\nexport type ShippingStrategyWidgetAction =\r\n    | WidgetInteractionStartedAction\r\n    | WidgetInteractionFinishedAction\r\n    | WidgetInteractionFailedAction;\r\n\r\nexport interface UpdateAddressRequestedAction extends Action {\r\n    type: ShippingStrategyActionType.UpdateAddressRequested;\r\n}\r\n\r\nexport interface UpdateAddressSucceededAction extends Action {\r\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\r\n}\r\n\r\nexport interface UpdateAddressFailedAction extends Action<Error> {\r\n    type: ShippingStrategyActionType.UpdateAddressFailed;\r\n}\r\n\r\nexport interface SelectOptionRequestedAction extends Action {\r\n    type: ShippingStrategyActionType.SelectOptionRequested;\r\n}\r\n\r\nexport interface SelectOptionSucceededAction extends Action {\r\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\r\n}\r\n\r\nexport interface SelectOptionFailedAction extends Action<Error> {\r\n    type: ShippingStrategyActionType.SelectOptionFailed;\r\n}\r\n\r\nexport interface InitializeRequestedAction extends Action {\r\n    type: ShippingStrategyActionType.InitializeRequested;\r\n}\r\n\r\nexport interface InitializeSucceededAction extends Action {\r\n    type: ShippingStrategyActionType.InitializeSucceeded;\r\n}\r\n\r\nexport interface InitializeFailedAction extends Action<Error> {\r\n    type: ShippingStrategyActionType.InitializeFailed;\r\n}\r\n\r\nexport interface DeinitializeRequestedAction extends Action {\r\n    type: ShippingStrategyActionType.DeinitializeRequested;\r\n}\r\n\r\nexport interface DeinitializeSucceededAction extends Action {\r\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\r\n}\r\n\r\nexport interface DeinitializeFailedAction extends Action<Error> {\r\n    type: ShippingStrategyActionType.DeinitializeFailed;\r\n}\r\n\r\nexport interface WidgetInteractionStartedAction extends Action {\r\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\r\n}\r\n\r\nexport interface WidgetInteractionFinishedAction extends Action {\r\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\r\n}\r\n\r\nexport interface WidgetInteractionFailedAction extends Action<Error> {\r\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { arrayReplace, objectSet } from '../common/utility';\r\nimport { Country } from '../geography';\r\n\r\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\r\nimport ShippingCountryState, {\r\n    DEFAULT_STATE,\r\n    ShippingCountryErrorsState,\r\n    ShippingCountryStatusesState,\r\n} from './shipping-country-state';\r\n\r\nexport default function shippingCountryReducer(\r\n    state: ShippingCountryState = DEFAULT_STATE,\r\n    action: Action,\r\n): ShippingCountryState {\r\n    const reducer = combineReducers<ShippingCountryState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: Country[] | undefined,\r\n    action: LoadShippingCountriesAction,\r\n): Country[] | undefined {\r\n    switch (action.type) {\r\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\r\n            return arrayReplace(data, action.payload);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\r\n    action: LoadShippingCountriesAction,\r\n): ShippingCountryErrorsState {\r\n    switch (action.type) {\r\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\r\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\r\n    action: LoadShippingCountriesAction,\r\n): ShippingCountryStatusesState {\r\n    switch (action.type) {\r\n        case ShippingCountryActionType.LoadShippingCountriesRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case ShippingCountryActionType.LoadShippingCountriesSucceeded:\r\n        case ShippingCountryActionType.LoadShippingCountriesFailed:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","export default interface ShippingStrategyState {\r\n    data: ShippingStrategyDataState;\r\n    errors: ShippingStrategyErrorsState;\r\n    statuses: ShippingStrategyStatusesState;\r\n}\r\n\r\nexport interface ShippingStrategyDataState {\r\n    [key: string]: {\r\n        isInitialized: boolean;\r\n    };\r\n}\r\n\r\nexport interface ShippingStrategyErrorsState {\r\n    deinitializeError?: Error;\r\n    deinitializeMethodId?: string;\r\n    initializeError?: Error;\r\n    initializeMethodId?: string;\r\n    updateAddressError?: Error;\r\n    updateAddressMethodId?: string;\r\n    selectOptionError?: Error;\r\n    selectOptionMethodId?: string;\r\n    widgetInteractionError?: Error;\r\n    widgetInteractionMethodId?: string;\r\n}\r\n\r\nexport interface ShippingStrategyStatusesState {\r\n    deinitializeMethodId?: string;\r\n    initializeMethodId?: string;\r\n    isDeinitializing?: boolean;\r\n    isInitializing?: boolean;\r\n    isUpdatingAddress?: boolean;\r\n    isSelectingOption?: boolean;\r\n    updateAddressMethodId?: string;\r\n    selectOptionMethodId?: string;\r\n    isWidgetInteracting?: boolean;\r\n    widgetInteractionMethodId?: string;\r\n}\r\n\r\nexport const DEFAULT_STATE: ShippingStrategyState = {\r\n    data: {},\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { SignInEmail } from './signin-email';\r\n\r\nexport enum SignInEmailActionType {\r\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\r\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\r\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\r\n}\r\nexport type SendSignInEmailAction =\r\n    | SendSignInEmailRequestedAction\r\n    | SendSignInEmailSucceededAction\r\n    | SendSignInEmailFailedAction;\r\n\r\nexport interface SendSignInEmailRequestedAction extends Action {\r\n    type: SignInEmailActionType.SendSignInEmailRequested;\r\n}\r\n\r\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\r\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\r\n}\r\n\r\nexport interface SendSignInEmailFailedAction extends Action<Error> {\r\n    type: SignInEmailActionType.SendSignInEmailFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge } from '../common/utility';\r\n\r\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\r\nimport ShippingStrategyState, {\r\n    DEFAULT_STATE,\r\n    ShippingStrategyDataState,\r\n    ShippingStrategyErrorsState,\r\n    ShippingStrategyStatusesState,\r\n} from './shipping-strategy-state';\r\n\r\nexport default function shippingStrategyReducer(\r\n    state: ShippingStrategyState = DEFAULT_STATE,\r\n    action: Action,\r\n): ShippingStrategyState {\r\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\r\n    action: ShippingStrategyAction,\r\n): ShippingStrategyDataState {\r\n    switch (action.type) {\r\n        case ShippingStrategyActionType.InitializeSucceeded:\r\n            return objectMerge(data, {\r\n                [action.meta && action.meta.methodId]: {\r\n                    isInitialized: true,\r\n                },\r\n            });\r\n\r\n        case ShippingStrategyActionType.DeinitializeSucceeded:\r\n            return objectMerge(data, {\r\n                [action.meta && action.meta.methodId]: {\r\n                    isInitialized: false,\r\n                },\r\n            });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\r\n    action: ShippingStrategyAction,\r\n): ShippingStrategyErrorsState {\r\n    switch (action.type) {\r\n        case ShippingStrategyActionType.InitializeRequested:\r\n        case ShippingStrategyActionType.InitializeSucceeded:\r\n            return objectMerge(errors, {\r\n                initializeError: undefined,\r\n                initializeMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.InitializeFailed:\r\n            return objectMerge(errors, {\r\n                initializeError: action.payload,\r\n                initializeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.DeinitializeRequested:\r\n        case ShippingStrategyActionType.DeinitializeSucceeded:\r\n            return objectMerge(errors, {\r\n                deinitializeError: undefined,\r\n                deinitializeMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.DeinitializeFailed:\r\n            return objectMerge(errors, {\r\n                deinitializeError: action.payload,\r\n                deinitializeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.UpdateAddressRequested:\r\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\r\n            return objectMerge(errors, {\r\n                updateAddressError: undefined,\r\n                updateAddressMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.UpdateAddressFailed:\r\n            return objectMerge(errors, {\r\n                updateAddressError: action.payload,\r\n                updateAddressMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.SelectOptionRequested:\r\n        case ShippingStrategyActionType.SelectOptionSucceeded:\r\n            return objectMerge(errors, {\r\n                selectOptionError: undefined,\r\n                selectOptionMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.SelectOptionFailed:\r\n            return objectMerge(errors, {\r\n                selectOptionError: action.payload,\r\n                selectOptionMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.WidgetInteractionStarted:\r\n        case ShippingStrategyActionType.WidgetInteractionFinished:\r\n            return objectMerge(errors, {\r\n                widgetInteractionError: undefined,\r\n                widgetInteractionMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.WidgetInteractionFailed:\r\n            return objectMerge(errors, {\r\n                widgetInteractionError: action.payload,\r\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\r\n    action: ShippingStrategyAction,\r\n): ShippingStrategyStatusesState {\r\n    switch (action.type) {\r\n        case ShippingStrategyActionType.InitializeRequested:\r\n            return objectMerge(statuses, {\r\n                isInitializing: true,\r\n                initializeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.InitializeFailed:\r\n        case ShippingStrategyActionType.InitializeSucceeded:\r\n            return objectMerge(statuses, {\r\n                isInitializing: false,\r\n                initializeMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.DeinitializeRequested:\r\n            return objectMerge(statuses, {\r\n                isDeinitializing: true,\r\n                deinitializeMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.DeinitializeFailed:\r\n        case ShippingStrategyActionType.DeinitializeSucceeded:\r\n            return objectMerge(statuses, {\r\n                isDeinitializing: false,\r\n                deinitializeMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.UpdateAddressRequested:\r\n            return objectMerge(statuses, {\r\n                isUpdatingAddress: true,\r\n                updateAddressMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.UpdateAddressFailed:\r\n        case ShippingStrategyActionType.UpdateAddressSucceeded:\r\n            return objectMerge(statuses, {\r\n                isUpdatingAddress: false,\r\n                updateAddressMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.SelectOptionRequested:\r\n            return objectMerge(statuses, {\r\n                isSelectingOption: true,\r\n                selectOptionMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.SelectOptionFailed:\r\n        case ShippingStrategyActionType.SelectOptionSucceeded:\r\n            return objectMerge(statuses, {\r\n                isSelectingOption: false,\r\n                selectOptionMethodId: undefined,\r\n            });\r\n\r\n        case ShippingStrategyActionType.WidgetInteractionStarted:\r\n            return objectMerge(statuses, {\r\n                isWidgetInteracting: true,\r\n                widgetInteractionMethodId: action.meta && action.meta.methodId,\r\n            });\r\n\r\n        case ShippingStrategyActionType.WidgetInteractionFinished:\r\n        case ShippingStrategyActionType.WidgetInteractionFailed:\r\n            return objectMerge(statuses, {\r\n                isWidgetInteracting: false,\r\n                widgetInteractionMethodId: undefined,\r\n            });\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { SignInEmail } from './signin-email';\r\n\r\nexport default interface SignInEmailState {\r\n    data?: SignInEmail;\r\n    errors: SignInEmailErrorsState;\r\n    statuses: SignInEmailStatusesState;\r\n}\r\n\r\nexport interface SignInEmailErrorsState {\r\n    sendError?: Error;\r\n}\r\n\r\nexport interface SignInEmailStatusesState {\r\n    isSending?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: SignInEmailState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { Checkout } from '../checkout';\r\nimport { RequestError } from '../common/error/errors';\r\n\r\nexport enum StoreCreditActionType {\r\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\r\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\r\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\r\n}\r\n\r\nexport type StoreCreditAction = ApplyStoreCreditAction;\r\n\r\nexport type ApplyStoreCreditAction =\r\n    | ApplyStoreCreditRequestedAction\r\n    | ApplyStoreCreditSucceededAction\r\n    | ApplyStoreCreditFailedAction;\r\n\r\nexport interface ApplyStoreCreditRequestedAction extends Action {\r\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\r\n}\r\n\r\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\r\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\r\n}\r\n\r\nexport interface ApplyStoreCreditFailedAction\r\n    extends Action<RequestError<StorefrontErrorResponseBody>> {\r\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge, objectSet } from '../common/utility';\r\n\r\nimport { SignInEmail } from './signin-email';\r\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\r\nimport SignInEmailState, {\r\n    DEFAULT_STATE,\r\n    SignInEmailErrorsState,\r\n    SignInEmailStatusesState,\r\n} from './signin-email-state';\r\n\r\nexport default function signInEmailReducer(\r\n    state: SignInEmailState = DEFAULT_STATE,\r\n    action: Action,\r\n): SignInEmailState {\r\n    const reducer = combineReducers<SignInEmailState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: SignInEmail | undefined,\r\n    action: SendSignInEmailAction,\r\n): SignInEmail | undefined {\r\n    switch (action.type) {\r\n        case SignInEmailActionType.SendSignInEmailSucceeded:\r\n            return objectMerge(data, action.payload);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\r\n    action: SendSignInEmailAction,\r\n): SignInEmailErrorsState {\r\n    switch (action.type) {\r\n        case SignInEmailActionType.SendSignInEmailRequested:\r\n        case SignInEmailActionType.SendSignInEmailSucceeded:\r\n            return objectSet(errors, 'sendError', undefined);\r\n\r\n        case SignInEmailActionType.SendSignInEmailFailed:\r\n            return objectSet(errors, 'sendError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\r\n    action: SendSignInEmailAction,\r\n): SignInEmailStatusesState {\r\n    switch (action.type) {\r\n        case SignInEmailActionType.SendSignInEmailRequested:\r\n            return objectSet(statuses, 'isSending', true);\r\n\r\n        case SignInEmailActionType.SendSignInEmailFailed:\r\n        case SignInEmailActionType.SendSignInEmailSucceeded:\r\n            return objectSet(statuses, 'isSending', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectSet } from '../common/utility';\r\n\r\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\r\nimport StoreCreditState, {\r\n    StoreCreditErrorsState,\r\n    StoreCreditStatusesState,\r\n} from './store-credit-state';\r\n\r\nconst DEFAULT_STATE: StoreCreditState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n\r\nexport default function storeCreditReducer(\r\n    state: StoreCreditState = DEFAULT_STATE,\r\n    action: Action,\r\n): StoreCreditState {\r\n    const reducer = combineReducers<StoreCreditState>({\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\r\n    action: StoreCreditAction,\r\n): StoreCreditErrorsState {\r\n    switch (action.type) {\r\n        case StoreCreditActionType.ApplyStoreCreditRequested:\r\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\r\n            return objectSet(errors, 'applyError', undefined);\r\n\r\n        case StoreCreditActionType.ApplyStoreCreditFailed:\r\n            return objectSet(errors, 'applyError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\r\n    action: StoreCreditAction,\r\n): StoreCreditStatusesState {\r\n    switch (action.type) {\r\n        case StoreCreditActionType.ApplyStoreCreditRequested:\r\n            return objectSet(statuses, 'isApplying', true);\r\n\r\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\r\n        case StoreCreditActionType.ApplyStoreCreditFailed:\r\n            return objectSet(statuses, 'isApplying', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","export default interface SubscriptionsState {\r\n    errors: SubscriptionsErrorsState;\r\n    statuses: SubscriptionsStatusesState;\r\n}\r\n\r\nexport interface SubscriptionsErrorsState {\r\n    updateError?: Error;\r\n}\r\n\r\nexport interface SubscriptionsStatusesState {\r\n    isUpdating?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: SubscriptionsState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action } from '@bigcommerce/data-store';\r\n\r\nimport { Checkout } from '../checkout';\r\n\r\nexport enum SpamProtectionActionType {\r\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\r\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\r\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\r\n    VerifyCheckoutRequested = 'SPAM_PROTECTION_CHECKOUT_VERIFY_REQUESTED',\r\n    VerifyCheckoutSucceeded = 'SPAM_PROTECTION_CHECKOUT_VERIFY_SUCCEEDED',\r\n    VerifyCheckoutFailed = 'SPAM_PROTECTION_CHECKOUT_VERIFY_FAILED',\r\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\r\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\r\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\r\n}\r\n\r\nexport type SpamProtectionAction =\r\n    | InitializeRequestedAction\r\n    | InitializeSucceededAction\r\n    | InitializeFailedAction\r\n    | ExecuteRequestedAction\r\n    | ExecuteSucceededAction\r\n    | ExecuteFailedAction\r\n    | CheckoutVerifyRequestedAction\r\n    | CheckoutVerifyFailedAction\r\n    | CheckoutVerifySucceededAction;\r\n\r\nexport interface InitializeRequestedAction extends Action {\r\n    type: SpamProtectionActionType.InitializeRequested;\r\n}\r\n\r\nexport interface InitializeSucceededAction extends Action {\r\n    type: SpamProtectionActionType.InitializeSucceeded;\r\n}\r\n\r\nexport interface InitializeFailedAction extends Action<Error> {\r\n    type: SpamProtectionActionType.InitializeFailed;\r\n}\r\n\r\nexport interface ExecuteRequestedAction extends Action {\r\n    type: SpamProtectionActionType.ExecuteRequested;\r\n}\r\n\r\nexport interface ExecuteSucceededAction extends Action<{ token: string }> {\r\n    type: SpamProtectionActionType.ExecuteSucceeded;\r\n}\r\n\r\nexport interface ExecuteFailedAction extends Action {\r\n    type: SpamProtectionActionType.ExecuteFailed;\r\n}\r\n\r\nexport interface CheckoutVerifyRequestedAction extends Action {\r\n    type: SpamProtectionActionType.VerifyCheckoutRequested;\r\n}\r\n\r\nexport interface CheckoutVerifyFailedAction extends Action<Error> {\r\n    type: SpamProtectionActionType.VerifyCheckoutFailed;\r\n}\r\n\r\nexport interface CheckoutVerifySucceededAction extends Action<Checkout> {\r\n    type: SpamProtectionActionType.VerifyCheckoutSucceeded;\r\n}\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\n\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectSet } from '../common/utility';\r\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\r\n\r\nimport SubscriptionsState, {\r\n    DEFAULT_STATE,\r\n    SubscriptionsErrorsState,\r\n    SubscriptionsStatusesState,\r\n} from './subscriptions-state';\r\n\r\nexport default function subscriptionsReducer(\r\n    state: SubscriptionsState = DEFAULT_STATE,\r\n    action: Action,\r\n): SubscriptionsState {\r\n    const reducer = combineReducers<SubscriptionsState>({\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\r\n    action: UpdateSubscriptionsAction,\r\n): SubscriptionsErrorsState {\r\n    switch (action.type) {\r\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\r\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\r\n            return objectSet(errors, 'updateError', undefined);\r\n\r\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\r\n            return objectSet(errors, 'updateError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\r\n    action: UpdateSubscriptionsAction,\r\n): SubscriptionsStatusesState {\r\n    switch (action.type) {\r\n        case SubscriptionsActionType.UpdateSubscriptionsRequested:\r\n            return objectSet(statuses, 'isUpdating', true);\r\n\r\n        case SubscriptionsActionType.UpdateSubscriptionsFailed:\r\n        case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\r\n            return objectSet(statuses, 'isUpdating', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","import { Omit } from '../common/types';\r\n\r\nimport Checkout from './checkout';\r\n\r\nexport default interface CheckoutState {\r\n    data?: CheckoutDataState;\r\n    errors: CheckoutErrorsState;\r\n    statuses: CheckoutStatusesState;\r\n}\r\n\r\nexport type CheckoutDataState = Omit<\r\n    Checkout,\r\n    'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'\r\n>;\r\n\r\nexport interface CheckoutErrorsState {\r\n    loadError?: Error;\r\n    updateError?: Error;\r\n}\r\n\r\nexport interface CheckoutStatusesState {\r\n    isExecutingSpamCheck?: boolean;\r\n    isLoading?: boolean;\r\n    isUpdating?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: CheckoutState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { Action, combineReducers, composeReducers } from '@bigcommerce/data-store';\r\nimport { omit } from 'lodash';\r\n\r\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\r\nimport { clearErrorReducer } from '../common/error';\r\nimport { objectMerge, objectSet } from '../common/utility';\r\nimport {\r\n    CouponAction,\r\n    CouponActionType,\r\n    GiftCertificateAction,\r\n    GiftCertificateActionType,\r\n} from '../coupon';\r\nimport { OrderAction, OrderActionType } from '../order';\r\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\r\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\r\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\r\n\r\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\r\nimport CheckoutState, {\r\n    CheckoutDataState,\r\n    CheckoutErrorsState,\r\n    CheckoutStatusesState,\r\n    DEFAULT_STATE,\r\n} from './checkout-state';\r\n\r\nexport default function checkoutReducer(\r\n    state: CheckoutState = DEFAULT_STATE,\r\n    action: Action,\r\n): CheckoutState {\r\n    const reducer = combineReducers<CheckoutState>({\r\n        data: dataReducer,\r\n        errors: composeReducers(errorsReducer, clearErrorReducer),\r\n        statuses: statusesReducer,\r\n    });\r\n\r\n    return reducer(state, action);\r\n}\r\n\r\nfunction dataReducer(\r\n    data: CheckoutDataState | undefined,\r\n    action:\r\n        | CheckoutAction\r\n        | BillingAddressAction\r\n        | ConsignmentAction\r\n        | CouponAction\r\n        | GiftCertificateAction\r\n        | OrderAction\r\n        | SpamProtectionAction\r\n        | StoreCreditAction,\r\n): CheckoutDataState | undefined {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n        case CheckoutActionType.UpdateCheckoutSucceeded:\r\n        case StoreCreditActionType.ApplyStoreCreditSucceeded:\r\n        case BillingAddressActionType.UpdateBillingAddressSucceeded:\r\n        case CouponActionType.ApplyCouponSucceeded:\r\n        case CouponActionType.RemoveCouponSucceeded:\r\n        case ConsignmentActionType.CreateConsignmentsSucceeded:\r\n        case ConsignmentActionType.UpdateConsignmentSucceeded:\r\n        case ConsignmentActionType.DeleteConsignmentSucceeded:\r\n        case ConsignmentActionType.UpdateShippingOptionSucceeded:\r\n        case ConsignmentActionType.LoadShippingOptionsSucceeded:\r\n        case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\r\n        case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\r\n        case SpamProtectionActionType.VerifyCheckoutSucceeded:\r\n            return objectMerge(\r\n                data,\r\n                omit(action.payload, [\r\n                    'billingAddress',\r\n                    'cart',\r\n                    'consignments',\r\n                    'customer',\r\n                    'coupons',\r\n                    'giftCertificates',\r\n                ]),\r\n            ) as CheckoutDataState;\r\n\r\n        case OrderActionType.SubmitOrderSucceeded:\r\n            return objectSet(data, 'orderId', action.payload && action.payload.order.orderId);\r\n\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nfunction errorsReducer(\r\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\r\n    action: CheckoutAction | OrderAction,\r\n): CheckoutErrorsState {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutRequested:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n            return objectSet(errors, 'loadError', undefined);\r\n\r\n        case CheckoutActionType.LoadCheckoutFailed:\r\n            return objectSet(errors, 'loadError', action.payload);\r\n\r\n        case CheckoutActionType.UpdateCheckoutRequested:\r\n        case CheckoutActionType.UpdateCheckoutSucceeded:\r\n            return objectSet(errors, 'updateError', undefined);\r\n\r\n        case CheckoutActionType.UpdateCheckoutFailed:\r\n            return objectSet(errors, 'updateError', action.payload);\r\n\r\n        default:\r\n            return errors;\r\n    }\r\n}\r\n\r\nfunction statusesReducer(\r\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\r\n    action: CheckoutAction | OrderAction | SpamProtectionAction,\r\n): CheckoutStatusesState {\r\n    switch (action.type) {\r\n        case CheckoutActionType.LoadCheckoutRequested:\r\n            return objectSet(statuses, 'isLoading', true);\r\n\r\n        case CheckoutActionType.LoadCheckoutFailed:\r\n        case CheckoutActionType.LoadCheckoutSucceeded:\r\n            return objectSet(statuses, 'isLoading', false);\r\n\r\n        case CheckoutActionType.UpdateCheckoutRequested:\r\n            return objectSet(statuses, 'isUpdating', true);\r\n\r\n        case CheckoutActionType.UpdateCheckoutFailed:\r\n        case CheckoutActionType.UpdateCheckoutSucceeded:\r\n            return objectSet(statuses, 'isUpdating', false);\r\n\r\n        case SpamProtectionActionType.ExecuteRequested:\r\n            return objectSet(statuses, 'isExecutingSpamCheck', true);\r\n\r\n        case SpamProtectionActionType.ExecuteFailed:\r\n        case SpamProtectionActionType.ExecuteSucceeded:\r\n            return objectSet(statuses, 'isExecutingSpamCheck', false);\r\n\r\n        default:\r\n            return statuses;\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/memoize\");","import StandardError from './standard-error';\r\n\r\nexport enum MissingDataErrorType {\r\n    MissingBillingAddress,\r\n    MissingCart,\r\n    MissingCheckout,\r\n    MissingConsignments,\r\n    MissingCustomer,\r\n    MissingCheckoutConfig,\r\n    MissingOrder,\r\n    MissingOrderConfig,\r\n    MissingOrderId,\r\n    MissingPayment,\r\n    MissingPaymentId,\r\n    MissingPaymentInstrument,\r\n    MissingPaymentMethod,\r\n    MissingPaymentRedirectUrl,\r\n    MissingPaymentStatus,\r\n    MissingPaymentToken,\r\n    MissingShippingAddress,\r\n}\r\n\r\n/**\r\n * Throw this error when data that is expected to exist is missing. Usually it\r\n * is due to the fact that certain data has not been retrieved from or saved to\r\n * the server yet. And such data is required to perform certain actions.\r\n */\r\nexport default class MissingDataError extends StandardError {\r\n    constructor(public subtype: MissingDataErrorType) {\r\n        super(getErrorMessage(subtype));\r\n\r\n        this.name = 'MissingDataError';\r\n        this.type = 'missing_data';\r\n    }\r\n}\r\n\r\nfunction getErrorMessage(type: MissingDataErrorType): string {\r\n    switch (type) {\r\n        case MissingDataErrorType.MissingBillingAddress:\r\n            return 'Unable to proceed because billing address data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingCart:\r\n            return 'Unable to proceed because cart data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingConsignments:\r\n            return 'Unable to proceed because consignments data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingCheckout:\r\n            return 'Unable to proceed because checkout data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingCustomer:\r\n            return 'Unable to proceed because customer data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingCheckoutConfig:\r\n        case MissingDataErrorType.MissingOrderConfig:\r\n            return 'Unable to proceed because configuration data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingOrder:\r\n            return 'Unable to proceed because order data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingOrderId:\r\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\r\n\r\n        case MissingDataErrorType.MissingPayment:\r\n            return 'Unable to proceed because payment data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingPaymentToken:\r\n            return 'Unable to proceed because the token required to submit a payment is missing.';\r\n\r\n        case MissingDataErrorType.MissingPaymentMethod:\r\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\r\n\r\n        case MissingDataErrorType.MissingShippingAddress:\r\n            return 'Unable to proceed because shipping address data is unavailable.';\r\n\r\n        default:\r\n            return 'Unable to proceed because the required data is unavailable.';\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"reselect\");","import { createSelector as defaultSelectorCreator } from 'reselect';\r\n\r\nimport withMemoizedCombiner from './with-memoized-combiner';\r\n\r\n/**\r\n * This is a decorated version of Reselect's default `createSelector` function.\r\n * If the return value of the combiner function is a function, it will create a\r\n * memorized version of that function and return it instead.\r\n */\r\nexport default withMemoizedCombiner(defaultSelectorCreator);\r\n","import { memoize } from '@bigcommerce/memoize';\r\nimport { createSelector as defaultSelectorCreator } from 'reselect';\r\n\r\n/**\r\n * Decorate selector creators with the ability to memoize the return value of\r\n * their combiner if it is a function (which effectively works as a partially\r\n * applied combiner).\r\n */\r\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\r\n    creator: T,\r\n): T {\r\n    return ((...args: any[]) => {\r\n        const combiner = args.pop();\r\n\r\n        // Reselect's default `createSelector` has many overloads. To avoid having\r\n        // to redefine all of them, we're using `any` to bypass the typechecker.\r\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\r\n            // Although there are many overloads, all of them have the last argument\r\n            // as the combiner.\r\n            const result = combiner(...combinerArgs);\r\n\r\n            if (typeof result === 'function') {\r\n                return memoize(result);\r\n            }\r\n\r\n            return result;\r\n        });\r\n    }) as T;\r\n}\r\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\r\n    if (value === undefined || value === null) {\r\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\r\n    }\r\n\r\n    return value as NonNullable<T>;\r\n}\r\n","import { deepFreeze } from '@bigcommerce/data-store';\r\n\r\n// tslint:disable-next-line:ban-types\r\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\r\n\r\nexport default function createFreezeProxy<T extends object>(target: T): T {\r\n    return createProxy(\r\n        target,\r\n        (target, name) =>\r\n            (...args: any[]) =>\r\n                deepFreeze(target[name].call(target, ...args)),\r\n    );\r\n}\r\n\r\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(\r\n    map: TMap,\r\n): TMap {\r\n    return Object.keys(map).reduce((result, key) => {\r\n        result[key] = createFreezeProxy(map[key]);\r\n\r\n        return result;\r\n    }, {} as { [key: string]: T }) as TMap;\r\n}\r\n\r\nfunction createProxy<T extends object>(\r\n    target: T,\r\n    trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any,\r\n): T {\r\n    const proxy = Object.create(target);\r\n\r\n    traversePrototypeOf(target, (prototype) => {\r\n        Object.getOwnPropertyNames(prototype).forEach((name) => {\r\n            if (\r\n                name === 'constructor' ||\r\n                typeof proxy[name] !== 'function' ||\r\n                name.charAt(0) === '_'\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\r\n        });\r\n    });\r\n\r\n    return proxy;\r\n}\r\n\r\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\r\n    let prototype = Object.getPrototypeOf(target);\r\n\r\n    while (prototype) {\r\n        iteratee(prototype);\r\n\r\n        prototype = Object.getPrototypeOf(prototype);\r\n    }\r\n}\r\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\r\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\r\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\r\nexport const FINALIZE = 'FINALIZE';\r\nexport const INITIALIZE = 'INITIALIZE';\r\n","import PaymentInstrument from './instrument';\r\n\r\ninterface SupportedInstruments {\r\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\r\n}\r\n\r\nconst supportedInstruments: SupportedInstruments = {\r\n    'mollie.credit_card': {\r\n        provider: 'mollie',\r\n        method: 'credit_card',\r\n    },\r\n    'adyenv2.scheme': {\r\n        provider: 'adyenv2',\r\n        method: 'scheme',\r\n    },\r\n    'adyenv3.scheme': {\r\n        provider: 'adyenv3',\r\n        method: 'scheme',\r\n    },\r\n    'adyenv2.bcmc': {\r\n        provider: 'adyenv2',\r\n        method: 'bcmc',\r\n    },\r\n    'adyenv2.ideal': {\r\n        provider: 'adyenv2',\r\n        method: 'ideal',\r\n    },\r\n    'adyenv2.sepadirectdebit': {\r\n        provider: 'adyenv2',\r\n        method: 'sepadirectdebit',\r\n    },\r\n    'adyenv2.directEbanking': {\r\n        provider: 'adyenv2',\r\n        method: 'directEbanking',\r\n    },\r\n    'adyenv2.giropay': {\r\n        provider: 'adyenv2',\r\n        method: 'giropay',\r\n    },\r\n    barclays: {\r\n        provider: 'barclays',\r\n        method: 'credit_card',\r\n    },\r\n    braintree: {\r\n        provider: 'braintree',\r\n        method: 'credit_card',\r\n    },\r\n    braintreepaypal: {\r\n        provider: 'braintree',\r\n        method: 'paypal',\r\n    },\r\n    braintreeach: {\r\n        provider: 'braintree',\r\n        method: 'ach',\r\n    },\r\n    authorizenet: {\r\n        provider: 'authorizenet',\r\n        method: 'credit_card',\r\n    },\r\n    elavon: {\r\n        provider: 'elavon',\r\n        method: 'credit_card',\r\n    },\r\n    checkoutcom: {\r\n        provider: 'checkoutcom',\r\n        method: 'credit_card',\r\n    },\r\n    'checkoutcom.credit_card': {\r\n        provider: 'checkoutcom',\r\n        method: 'credit_card',\r\n    },\r\n    'checkoutcom.card': {\r\n        provider: 'checkoutcom',\r\n        method: 'card',\r\n    },\r\n    sagepay: {\r\n        provider: 'sagepay',\r\n        method: 'credit_card',\r\n    },\r\n    stripe: {\r\n        provider: 'stripe',\r\n        method: 'credit_card',\r\n    },\r\n    'stripev3.card': {\r\n        provider: 'stripev3',\r\n        method: 'card',\r\n    },\r\n    'stripeupe.card': {\r\n        provider: 'stripeupe',\r\n        method: 'card',\r\n    },\r\n    cybersource: {\r\n        provider: 'cybersource',\r\n        method: 'credit_card',\r\n    },\r\n    cybersourcev2: {\r\n        provider: 'cybersourcev2',\r\n        method: 'credit_card',\r\n    },\r\n    bnz: {\r\n        provider: 'bnz',\r\n        method: 'credit_card',\r\n    },\r\n    converge: {\r\n        provider: 'converge',\r\n        method: 'credit_card',\r\n    },\r\n    bluesnapv2: {\r\n        provider: 'bluesnapv2',\r\n        method: 'credit_card',\r\n    },\r\n    'bluesnapdirect.credit_card': {\r\n        provider: 'bluesnapdirect',\r\n        method: 'credit_card',\r\n    },\r\n    orbital: {\r\n        provider: 'orbital',\r\n        method: 'credit_card',\r\n    },\r\n    paymetric: {\r\n        provider: 'paymetric',\r\n        method: 'credit_card',\r\n    },\r\n    bolt: {\r\n        provider: 'bolt',\r\n        method: 'credit_card',\r\n    },\r\n    'barclaycard.credit_card': {\r\n        provider: 'barclaycard',\r\n        method: 'credit_card',\r\n    },\r\n    digitalriver: {\r\n        provider: 'digitalriver',\r\n        method: 'credit_card',\r\n    },\r\n    moneris: {\r\n        provider: 'moneris',\r\n        method: 'credit_card',\r\n    },\r\n    cba_mpgs: {\r\n        provider: 'cba_mpgs',\r\n        method: 'credit_card',\r\n    },\r\n    worldpayaccess: {\r\n        provider: 'worldpayaccess',\r\n        method: 'credit_card',\r\n    },\r\n};\r\n\r\nexport default supportedInstruments;\r\n","import { identity, isEqual, pickBy } from 'lodash';\r\n\r\nimport Address from './address';\r\n\r\nexport default function isAddressEqual(\r\n    addressA: Partial<Address>,\r\n    addressB: Partial<Address>,\r\n): boolean {\r\n    return isEqual(normalize(addressA), normalize(addressB));\r\n}\r\n\r\nfunction normalize(address: Partial<Address>): Partial<Address> {\r\n    return pickBy(\r\n        {\r\n            firstName: address.firstName,\r\n            lastName: address.lastName,\r\n            company: address.company,\r\n            address1: address.address1,\r\n            address2: address.address2,\r\n            city: address.city,\r\n            stateOrProvince: address.stateOrProvince,\r\n            countryCode: address.countryCode,\r\n            postalCode: address.postalCode,\r\n            phone: address.phone,\r\n            customFields: address.customFields,\r\n        },\r\n        identity,\r\n    );\r\n}\r\n","import { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { RequestError } from '../common/error/errors';\r\n\r\nexport default interface StoreCreditState {\r\n    errors: StoreCreditErrorsState;\r\n    statuses: StoreCreditStatusesState;\r\n}\r\n\r\nexport interface StoreCreditErrorsState {\r\n    applyError?: RequestError<StorefrontErrorResponseBody>;\r\n}\r\n\r\nexport interface StoreCreditStatusesState {\r\n    isApplying?: boolean;\r\n}\r\n\r\nexport const DEFAULT_STATE: StoreCreditState = {\r\n    errors: {},\r\n    statuses: {},\r\n};\r\n","import { createBillingAddressSelectorFactory } from '../billing';\r\nimport { createCartSelectorFactory } from '../cart';\r\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\r\nimport { createFreezeProxies } from '../common/utility';\r\nimport { createConfigSelectorFactory } from '../config';\r\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\r\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\r\nimport { createExtensionSelectorFactory } from '../extension';\r\nimport { createFormSelectorFactory } from '../form';\r\nimport { createCountrySelectorFactory } from '../geography';\r\nimport { createOrderSelectorFactory } from '../order';\r\nimport { createOrderBillingAddressSelectorFactory } from '../order-billing-address';\r\nimport {\r\n    createPaymentMethodSelectorFactory,\r\n    createPaymentSelectorFactory,\r\n    createPaymentStrategySelectorFactory,\r\n} from '../payment';\r\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\r\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\r\nimport {\r\n    createConsignmentSelectorFactory,\r\n    createPickupOptionSelectorFactory,\r\n    createShippingAddressSelectorFactory,\r\n    createShippingCountrySelectorFactory,\r\n    createShippingStrategySelectorFactory,\r\n} from '../shipping';\r\nimport { createSignInEmailSelectorFactory } from '../signin-email';\r\nimport { createStoreCreditSelectorFactory } from '../store-credit';\r\nimport { createSubscriptionsSelectorFactory } from '../subscription';\r\n\r\nimport { createCheckoutSelectorFactory } from './checkout-selector';\r\nimport { CheckoutStoreOptions } from './checkout-store';\r\nimport CheckoutStoreState from './checkout-store-state';\r\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\r\n\r\nexport type InternalCheckoutSelectorsFactory = (\r\n    state: CheckoutStoreState,\r\n    options?: CheckoutStoreOptions,\r\n) => InternalCheckoutSelectors;\r\n\r\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\r\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\r\n    const createCartSelector = createCartSelectorFactory();\r\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\r\n    const createConfigSelector = createConfigSelectorFactory();\r\n    const createCountrySelector = createCountrySelectorFactory();\r\n    const createCouponSelector = createCouponSelectorFactory();\r\n    const createCustomerSelector = createCustomerSelectorFactory();\r\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\r\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\r\n    const createInstrumentSelector = createInstrumentSelectorFactory();\r\n    const createFormSelector = createFormSelectorFactory();\r\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\r\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\r\n    const createPickupOptionSelector = createPickupOptionSelectorFactory();\r\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\r\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\r\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\r\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\r\n    const createConsignmentSelector = createConsignmentSelectorFactory();\r\n    const createCheckoutSelector = createCheckoutSelectorFactory();\r\n    const createOrderSelector = createOrderSelectorFactory();\r\n    const createOrderBillingAddressSelector = createOrderBillingAddressSelectorFactory();\r\n    const createPaymentSelector = createPaymentSelectorFactory();\r\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\r\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\r\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\r\n    const createExtensionSelector = createExtensionSelectorFactory();\r\n\r\n    return (state, options = {}) => {\r\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\r\n        const cart = createCartSelector(state.cart);\r\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\r\n        const countries = createCountrySelector(state.countries);\r\n        const coupons = createCouponSelector(state.coupons);\r\n        const customer = createCustomerSelector(state.customer);\r\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\r\n        const extensions = createExtensionSelector(state.extensions);\r\n        const form = createFormSelector(state.formFields);\r\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\r\n        const instruments = createInstrumentSelector(state.instruments);\r\n        const orderBillingAddress = createOrderBillingAddressSelector(state.orderBillingAddress);\r\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\r\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\r\n        const pickupOptions = createPickupOptionSelector(state.pickupOptions);\r\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\r\n        const shippingAddress = createShippingAddressSelector(state.consignments);\r\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\r\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\r\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\r\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\r\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\r\n\r\n        // Compose selectors\r\n        const consignments = createConsignmentSelector(state.consignments, cart);\r\n        const checkout = createCheckoutSelector(\r\n            state.checkout,\r\n            billingAddress,\r\n            cart,\r\n            consignments,\r\n            coupons,\r\n            customer,\r\n            giftCertificates,\r\n        );\r\n        const order = createOrderSelector(state.order, orderBillingAddress, coupons);\r\n        const payment = createPaymentSelector(checkout, order);\r\n        const config = createConfigSelector(state.config, state.formFields);\r\n\r\n        const selectors = {\r\n            billingAddress,\r\n            cart,\r\n            checkout,\r\n            checkoutButton,\r\n            config,\r\n            consignments,\r\n            countries,\r\n            coupons,\r\n            customer,\r\n            customerStrategies,\r\n            extensions,\r\n            form,\r\n            giftCertificates,\r\n            instruments,\r\n            order,\r\n            orderBillingAddress,\r\n            payment,\r\n            paymentMethods,\r\n            paymentStrategies,\r\n            pickupOptions,\r\n            remoteCheckout,\r\n            shippingAddress,\r\n            shippingCountries,\r\n            shippingStrategies,\r\n            signInEmail,\r\n            subscriptions,\r\n            storeCredit,\r\n        };\r\n\r\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\r\n    };\r\n}\r\n\r\nexport default function createInternalCheckoutSelectors(\r\n    state: CheckoutStoreState,\r\n    options?: CheckoutStoreOptions,\r\n): InternalCheckoutSelectors {\r\n    return createInternalCheckoutSelectorsFactory()(state, options);\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\n\r\nimport BillingAddress from './billing-address';\r\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\r\n\r\nexport default interface BillingAddressSelector {\r\n    getBillingAddress(): BillingAddress | undefined;\r\n    getBillingAddressOrThrow(): BillingAddress;\r\n    getUpdateError(): Error | undefined;\r\n    getContinueAsGuestError(): Error | undefined;\r\n    getLoadError(): Error | undefined;\r\n    isUpdating(): boolean;\r\n    isContinuingAsGuest(): boolean;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\r\n\r\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\r\n    const getBillingAddress = createSelector(\r\n        (state: BillingAddressState) => state.data,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getBillingAddressOrThrow = createSelector(\r\n        getBillingAddress,\r\n        (getBillingAddress) => () => {\r\n            return guard(\r\n                getBillingAddress(),\r\n                () => new MissingDataError(MissingDataErrorType.MissingBillingAddress),\r\n            );\r\n        },\r\n    );\r\n\r\n    const getUpdateError = createSelector(\r\n        (state: BillingAddressState) => state.errors.updateError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getContinueAsGuestError = createSelector(\r\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: BillingAddressState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isUpdating = createSelector(\r\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\r\n        (status) => () => status,\r\n    );\r\n\r\n    const isContinuingAsGuest = createSelector(\r\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\r\n        (status) => () => status,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: BillingAddressState) => !!state.statuses.isLoading,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: BillingAddressState = DEFAULT_STATE): BillingAddressSelector => {\r\n        return {\r\n            getBillingAddress: getBillingAddress(state),\r\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\r\n            getUpdateError: getUpdateError(state),\r\n            getContinueAsGuestError: getContinueAsGuestError(state),\r\n            getLoadError: getLoadError(state),\r\n            isUpdating: isUpdating(state),\r\n            isContinuingAsGuest: isContinuingAsGuest(state),\r\n            isLoading: isLoading(state),\r\n        };\r\n    });\r\n}\r\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\r\nimport { find, some, values } from 'lodash';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\r\nimport { CheckoutButtonMethodType } from './strategies';\r\n\r\nexport default interface CheckoutButtonSelector {\r\n    getState(): CheckoutButtonState;\r\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\r\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\r\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\r\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\r\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\r\n}\r\n\r\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\r\n\r\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\r\n    const getState = createSelector(\r\n        (state: CheckoutButtonState) => state,\r\n        (state) => () => state,\r\n    );\r\n\r\n    const isInitializing = createSelector(\r\n        (state: CheckoutButtonState) => state.statuses,\r\n        (statuses) =>\r\n            memoize((methodId?: CheckoutButtonMethodType) => {\r\n                if (methodId) {\r\n                    const method = statuses[methodId];\r\n\r\n                    return (method && method.isInitializing) === true;\r\n                }\r\n\r\n                return some(statuses, { isInitializing: true });\r\n            }),\r\n    );\r\n\r\n    const isInitialized = createSelector(\r\n        (state: CheckoutButtonState) => state.data,\r\n        (data) =>\r\n            memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\r\n                const method = data[methodId];\r\n\r\n                if (!method) {\r\n                    return false;\r\n                }\r\n\r\n                if (!containerId) {\r\n                    return some(\r\n                        method.initializedContainers,\r\n                        (isInitialized) => isInitialized === true,\r\n                    );\r\n                }\r\n\r\n                return method.initializedContainers[containerId] === true;\r\n            }),\r\n    );\r\n\r\n    const isDeinitializing = createSelector(\r\n        (state: CheckoutButtonState) => state.statuses,\r\n        (statuses) =>\r\n            memoize((methodId?: CheckoutButtonMethodType) => {\r\n                if (methodId) {\r\n                    const method = statuses[methodId];\r\n\r\n                    return (method && method.isDeinitializing) === true;\r\n                }\r\n\r\n                return some(statuses, { isDeinitializing: true });\r\n            }),\r\n    );\r\n\r\n    const getInitializeError = createSelector(\r\n        (state: CheckoutButtonState) => state.errors,\r\n        (errors) =>\r\n            memoize((methodId?: CheckoutButtonMethodType) => {\r\n                const method = methodId\r\n                    ? errors[methodId]\r\n                    : find(values(errors), (method) => !!(method && method.initializeError));\r\n\r\n                return method && method.initializeError;\r\n            }),\r\n    );\r\n\r\n    const getDeinitializeError = createSelector(\r\n        (state: CheckoutButtonState) => state.errors,\r\n        (errors) =>\r\n            memoize((methodId?: CheckoutButtonMethodType) => {\r\n                const method = methodId\r\n                    ? errors[methodId]\r\n                    : find(values(errors), (method) => !!(method && method.deinitializeError));\r\n\r\n                return method && method.deinitializeError;\r\n            }),\r\n    );\r\n\r\n    return memoizeOne((state: CheckoutButtonState = DEFAULT_STATE): CheckoutButtonSelector => {\r\n        return {\r\n            getState: getState(state),\r\n            isInitializing: isInitializing(state),\r\n            isInitialized: isInitialized(state),\r\n            isDeinitializing: isDeinitializing(state),\r\n            getInitializeError: getInitializeError(state),\r\n            getDeinitializeError: getDeinitializeError(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { RequestError } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport Coupon from './coupon';\r\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\r\n\r\nexport default interface CouponSelector {\r\n    getCoupons(): Coupon[] | undefined;\r\n    getRemoveError(): RequestError | undefined;\r\n    getApplyError(): RequestError | undefined;\r\n    isApplying(): boolean;\r\n    isRemoving(): boolean;\r\n}\r\n\r\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\r\n\r\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\r\n    const getCoupons = createSelector(\r\n        (state: CouponState) => state.data,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getRemoveError = createSelector(\r\n        (state: CouponState) => state.errors.removeCouponError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getApplyError = createSelector(\r\n        (state: CouponState) => state.errors.applyCouponError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isApplying = createSelector(\r\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\r\n        (status) => () => status,\r\n    );\r\n\r\n    const isRemoving = createSelector(\r\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: CouponState = DEFAULT_STATE): CouponSelector => {\r\n        return {\r\n            getCoupons: getCoupons(state),\r\n            getRemoveError: getRemoveError(state),\r\n            getApplyError: getApplyError(state),\r\n            isApplying: isApplying(state),\r\n            isRemoving: isRemoving(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\n\r\nimport Customer from './customer';\r\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\r\n\r\nexport default interface CustomerSelector {\r\n    getCustomer(): Customer | undefined;\r\n    getCustomerOrThrow(): Customer;\r\n    getCreateAccountError(): Error | undefined;\r\n    isCreatingCustomerAccount(): boolean;\r\n    getCreateAddressError(): Error | undefined;\r\n    isCreatingCustomerAddress(): boolean;\r\n}\r\n\r\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\r\n\r\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\r\n    const getCustomer = createSelector(\r\n        (state: CustomerState) => state.data,\r\n        (customer) => () => customer,\r\n    );\r\n\r\n    const getCustomerOrThrow = createSelector(getCustomer, (getCustomer) => () => {\r\n        return guard(\r\n            getCustomer(),\r\n            () => new MissingDataError(MissingDataErrorType.MissingCustomer),\r\n        );\r\n    });\r\n\r\n    const getCreateAccountError = createSelector(\r\n        (state: CustomerState) => state.errors.createError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isCreatingCustomerAccount = createSelector(\r\n        (state: CustomerState) => !!state.statuses.isCreating,\r\n        (status) => () => status,\r\n    );\r\n\r\n    const getCreateAddressError = createSelector(\r\n        (state: CustomerState) => state.errors.createAddressError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isCreatingCustomerAddress = createSelector(\r\n        (state: CustomerState) => !!state.statuses.isCreatingAddress,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: CustomerState = DEFAULT_STATE): CustomerSelector => {\r\n        return {\r\n            getCustomer: getCustomer(state),\r\n            getCustomerOrThrow: getCustomerOrThrow(state),\r\n            getCreateAccountError: getCreateAccountError(state),\r\n            isCreatingCustomerAccount: isCreatingCustomerAccount(state),\r\n            getCreateAddressError: getCreateAddressError(state),\r\n            isCreatingCustomerAddress: isCreatingCustomerAddress(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport RemoteCheckoutState, {\r\n    DEFAULT_STATE,\r\n    RemoteCheckoutStateData,\r\n} from './remote-checkout-state';\r\n\r\nexport default interface RemoteCheckoutSelector {\r\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\r\n        methodId: TMethodId,\r\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\r\n}\r\n\r\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\r\n\r\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\r\n    const getCheckout = createSelector(\r\n        (state: RemoteCheckoutState) => state.data,\r\n        (data) =>\r\n            <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\r\n                return data[methodId];\r\n            },\r\n    );\r\n\r\n    return memoizeOne((state: RemoteCheckoutState = DEFAULT_STATE): RemoteCheckoutSelector => {\r\n        return {\r\n            getCheckout: getCheckout(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { Address } from '../address';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\n\r\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\r\n\r\nexport default interface ShippingAddressSelector {\r\n    getShippingAddress(): Address | undefined;\r\n    getShippingAddressOrThrow(): Address;\r\n    getShippingAddresses(): Address[];\r\n    getShippingAddressesOrThrow(): Address[];\r\n}\r\n\r\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\r\n\r\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\r\n    const getShippingAddress = createSelector(\r\n        (state: ConsignmentState) => state.data,\r\n        (consignments) => () => {\r\n            const shippingConsignment = consignments?.find(\r\n                (consignment) => !consignment.selectedPickupOption,\r\n            );\r\n\r\n            return shippingConsignment?.shippingAddress;\r\n        },\r\n    );\r\n\r\n    const getShippingAddressOrThrow = createSelector(\r\n        getShippingAddress,\r\n        (getShippingAddress) => () => {\r\n            return guard(\r\n                getShippingAddress(),\r\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\r\n            );\r\n        },\r\n    );\r\n\r\n    const getShippingAddresses = createSelector(\r\n        (state: ConsignmentState) => state.data,\r\n        (consignments) => () => {\r\n            const shippingConsignments = consignments?.filter(\r\n                (consignment) => !consignment.selectedPickupOption,\r\n            );\r\n\r\n            return shippingConsignments\r\n                ? shippingConsignments.map((consignment) => consignment.shippingAddress)\r\n                : [];\r\n        },\r\n    );\r\n\r\n    const getShippingAddressesOrThrow = createSelector(\r\n        getShippingAddresses,\r\n        (getShippingAddresses) => () => {\r\n            return guard(\r\n                getShippingAddresses(),\r\n                () => new MissingDataError(MissingDataErrorType.MissingShippingAddress),\r\n            );\r\n        },\r\n    );\r\n\r\n    return memoizeOne((state: ConsignmentState = DEFAULT_STATE): ShippingAddressSelector => {\r\n        return {\r\n            getShippingAddress: getShippingAddress(state),\r\n            getShippingAddressOrThrow: getShippingAddressOrThrow(state),\r\n            getShippingAddresses: getShippingAddresses(state),\r\n            getShippingAddressesOrThrow: getShippingAddressesOrThrow(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport OrderBillingAddressState, {\r\n    DEFAULT_STATE,\r\n    OrderBillingAddress,\r\n} from './order-billing-address-state';\r\n\r\nexport default interface OrderBillingAddressSelector {\r\n    getOrderBillingAddress(): OrderBillingAddress | undefined;\r\n}\r\n\r\nexport type OrderBillingAddressSelectorFactory = (\r\n    state: OrderBillingAddressState,\r\n) => OrderBillingAddressSelector;\r\n\r\nexport function createOrderBillingAddressSelectorFactory(): OrderBillingAddressSelectorFactory {\r\n    const getOrderBillingAddress = createSelector(\r\n        (state: OrderBillingAddressState) => state.data,\r\n        (data) => () => data,\r\n    );\r\n\r\n    return memoizeOne(\r\n        (state: OrderBillingAddressState = DEFAULT_STATE): OrderBillingAddressSelector => {\r\n            return {\r\n                getOrderBillingAddress: getOrderBillingAddress(state),\r\n            };\r\n        },\r\n    );\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { find } from 'lodash';\r\n\r\nimport { CheckoutSelector } from '../checkout';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\nimport { GatewayOrderPayment, OrderSelector } from '../order';\r\n\r\nimport PaymentMethod from './payment-method';\r\nimport { HOSTED } from './payment-method-types';\r\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\r\n\r\nexport default interface PaymentSelector {\r\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\r\n    getPaymentIdOrThrow(): { providerId: string; gatewayId?: string };\r\n    getPaymentStatus(): string | undefined;\r\n    getPaymentStatusOrThrow(): string;\r\n    getPaymentToken(): string | undefined;\r\n    getPaymentTokenOrThrow(): string;\r\n    getPaymentRedirectUrl(): string | undefined;\r\n    getPaymentRedirectUrlOrThrow(): string;\r\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\r\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\r\n}\r\n\r\nexport type PaymentSelectorFactory = (\r\n    checkout: CheckoutSelector,\r\n    order: OrderSelector,\r\n) => PaymentSelector;\r\n\r\ninterface PaymentSelectorDependencies {\r\n    checkout: CheckoutSelector;\r\n    order: OrderSelector;\r\n}\r\n\r\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\r\n    const getInternalPayment = createSelector(\r\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\r\n        (getOrderMeta) => () => {\r\n            const meta = getOrderMeta();\r\n\r\n            return meta && meta.payment;\r\n        },\r\n    );\r\n\r\n    const getGatewayPayment = createSelector(\r\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\r\n        (getOrder) => () => {\r\n            const order = getOrder();\r\n\r\n            return find(\r\n                order && order.payments,\r\n                ({ providerId }) =>\r\n                    providerId !== 'giftcertificate' && providerId !== 'storecredit',\r\n            ) as GatewayOrderPayment;\r\n        },\r\n    );\r\n\r\n    const getHostedPayment = createSelector(\r\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\r\n        (getCheckout) => () => {\r\n            const checkout = getCheckout();\r\n\r\n            return find(\r\n                checkout && checkout.payments,\r\n                ({ providerType }) => providerType === HOSTED,\r\n            );\r\n        },\r\n    );\r\n\r\n    const getPaymentId = createSelector(\r\n        getInternalPayment,\r\n        getHostedPayment,\r\n        getGatewayPayment,\r\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\r\n            const internalPayment = getInternalPayment();\r\n\r\n            if (internalPayment && internalPayment.id) {\r\n                return {\r\n                    providerId: internalPayment.id,\r\n                    gatewayId: internalPayment.gateway,\r\n                };\r\n            }\r\n\r\n            const payment = getHostedPayment() || getGatewayPayment();\r\n\r\n            if (payment && payment.providerId) {\r\n                return {\r\n                    providerId: payment.providerId,\r\n                    gatewayId: payment.gatewayId,\r\n                };\r\n            }\r\n        },\r\n    );\r\n\r\n    const getPaymentIdOrThrow = createSelector(getPaymentId, (getPaymentId) => () => {\r\n        return guard(\r\n            getPaymentId(),\r\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentId),\r\n        );\r\n    });\r\n\r\n    const getPaymentStatus = createSelector(\r\n        getInternalPayment,\r\n        getHostedPayment,\r\n        getGatewayPayment,\r\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\r\n            const internalPayment = getInternalPayment();\r\n\r\n            if (internalPayment && internalPayment.status) {\r\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\r\n            }\r\n\r\n            const payment = getHostedPayment() || getGatewayPayment();\r\n\r\n            if (payment) {\r\n                return payment.detail.step;\r\n            }\r\n        },\r\n    );\r\n\r\n    const getPaymentStatusOrThrow = createSelector(getPaymentStatus, (getPaymentStatus) => () => {\r\n        return guard(\r\n            getPaymentStatus(),\r\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentStatus),\r\n        );\r\n    });\r\n\r\n    const getPaymentToken = createSelector(\r\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\r\n        (getOrderMeta) => () => {\r\n            const meta = getOrderMeta();\r\n\r\n            return meta && meta.token;\r\n        },\r\n    );\r\n\r\n    const getPaymentTokenOrThrow = createSelector(getPaymentToken, (getPaymentToken) => () => {\r\n        return guard(\r\n            getPaymentToken(),\r\n            () => new MissingDataError(MissingDataErrorType.MissingPaymentToken),\r\n        );\r\n    });\r\n\r\n    const getPaymentRedirectUrl = createSelector(getInternalPayment, (getInternalPayment) => () => {\r\n        const payment = getInternalPayment();\r\n\r\n        return payment && payment.redirectUrl;\r\n    });\r\n\r\n    const getPaymentRedirectUrlOrThrow = createSelector(\r\n        getPaymentRedirectUrl,\r\n        (getPaymentRedirectUrl) => () => {\r\n            return guard(\r\n                getPaymentRedirectUrl(),\r\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentRedirectUrl),\r\n            );\r\n        },\r\n    );\r\n\r\n    const isPaymentDataRequired = createSelector(\r\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\r\n        (getOutstandingBalance) =>\r\n            (useStoreCredit = false) => {\r\n                const grandTotal = getOutstandingBalance(useStoreCredit);\r\n\r\n                return grandTotal ? grandTotal > 0 : false;\r\n            },\r\n    );\r\n\r\n    const isPaymentDataSubmitted = createSelector(\r\n        getPaymentStatus,\r\n        (getPaymentStatus) => (paymentMethod?: PaymentMethod) => {\r\n            if (paymentMethod && paymentMethod.nonce) {\r\n                return true;\r\n            }\r\n\r\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\r\n        },\r\n    );\r\n\r\n    return memoizeOne((checkout: CheckoutSelector, order: OrderSelector): PaymentSelector => {\r\n        return {\r\n            getPaymentId: getPaymentId({ checkout, order }),\r\n            getPaymentIdOrThrow: getPaymentIdOrThrow({ checkout, order }),\r\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\r\n            getPaymentStatusOrThrow: getPaymentStatusOrThrow({ checkout, order }),\r\n            getPaymentToken: getPaymentToken({ checkout, order }),\r\n            getPaymentTokenOrThrow: getPaymentTokenOrThrow({ checkout, order }),\r\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\r\n            getPaymentRedirectUrlOrThrow: getPaymentRedirectUrlOrThrow({ checkout, order }),\r\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\r\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport { SignInEmail } from './signin-email';\r\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\r\n\r\nexport default interface SignInEmailSelector {\r\n    getEmail(): SignInEmail | undefined;\r\n    getSendError(): Error | undefined;\r\n    isSending(): boolean;\r\n}\r\n\r\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\r\n\r\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\r\n    const getEmail = createSelector(\r\n        (state: SignInEmailState) => state.data,\r\n        (signInEmail) => () => signInEmail,\r\n    );\r\n\r\n    const getSendError = createSelector(\r\n        (state: SignInEmailState) => state.errors.sendError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isSending = createSelector(\r\n        (state: SignInEmailState) => !!state.statuses.isSending,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: SignInEmailState = DEFAULT_STATE): SignInEmailSelector => {\r\n        return {\r\n            getEmail: getEmail(state),\r\n            getSendError: getSendError(state),\r\n            isSending: isSending(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\n\r\nimport Cart from './cart';\r\nimport CartState, { DEFAULT_STATE } from './cart-state';\r\n\r\nexport default interface CartSelector {\r\n    getCart(): Cart | undefined;\r\n    getCartOrThrow(): Cart;\r\n    getLoadError(): Error | undefined;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\r\n\r\nexport function createCartSelectorFactory() {\r\n    const getCart = createSelector(\r\n        (state: CartState) => state.data,\r\n        (cart) => () => cart,\r\n    );\r\n\r\n    const getCartOrThrow = createSelector(getCart, (getCart) => () => {\r\n        return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\r\n    });\r\n\r\n    const getLoadError = createSelector(\r\n        (state: CartState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: CartState) => !!state.statuses.isLoading,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: CartState = DEFAULT_STATE): CartSelector => {\r\n        return {\r\n            getCart: getCart(state),\r\n            getCartOrThrow: getCartOrThrow(state),\r\n            getLoadError: getLoadError(state),\r\n            isLoading: isLoading(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\nimport { FormFieldsState } from '../form';\r\n\r\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\r\nimport ConfigState, { DEFAULT_STATE } from './config-state';\r\n\r\nexport default interface ConfigSelector {\r\n    getConfig(): Config | undefined;\r\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\r\n    getStoreConfig(): StoreConfig | undefined;\r\n    getStoreConfigOrThrow(): StoreConfig;\r\n    getContextConfig(): ContextConfig | undefined;\r\n    getExternalSource(): string | undefined;\r\n    getHost(): string | undefined;\r\n    getLocale(): string | undefined;\r\n    getVariantIdentificationToken(): string | undefined;\r\n    getLoadError(): Error | undefined;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type ConfigSelectorFactory = (\r\n    state: ConfigState,\r\n    formState: FormFieldsState,\r\n) => ConfigSelector;\r\n\r\ninterface ConfigSelectorDependencies {\r\n    formState: FormFieldsState;\r\n}\r\n\r\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\r\n    const getConfig = createSelector(\r\n        (state: ConfigState) => state.data,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getFlashMessages = createSelector(\r\n        (state: ConfigState) => state.data,\r\n        (data) => (filterType?: FlashMessageType) => {\r\n            if (!data) {\r\n                return;\r\n            }\r\n\r\n            const { flashMessages } = data.context;\r\n\r\n            if (!flashMessages) {\r\n                return;\r\n            }\r\n\r\n            return filterType !== undefined\r\n                ? flashMessages.filter(({ type }) => filterType === type)\r\n                : flashMessages;\r\n        },\r\n    );\r\n\r\n    const getStoreConfig = createSelector(\r\n        (state: ConfigState) => state.data,\r\n        (_: ConfigState, { formState }: ConfigSelectorDependencies) => formState && formState.data,\r\n        (data, formFields) => () =>\r\n            data && formFields\r\n                ? {\r\n                      ...data.storeConfig,\r\n                      formFields,\r\n                  }\r\n                : undefined,\r\n    );\r\n\r\n    const getStoreConfigOrThrow = createSelector(getStoreConfig, (getStoreConfig) => () => {\r\n        return guard(\r\n            getStoreConfig(),\r\n            () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig),\r\n        );\r\n    });\r\n\r\n    const getContextConfig = createSelector(\r\n        (state: ConfigState) => state.data && state.data.context,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getExternalSource = createSelector(\r\n        (state: ConfigState) => state.meta && state.meta.externalSource,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getHost = createSelector(\r\n        (state: ConfigState) => state.meta?.host,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getLocale = createSelector(\r\n        (state: ConfigState) => state.meta?.locale,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getVariantIdentificationToken = createSelector(\r\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: ConfigState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: ConfigState) => !!state.statuses.isLoading,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne(\r\n        (state: ConfigState = DEFAULT_STATE, formState: FormFieldsState): ConfigSelector => {\r\n            return {\r\n                getConfig: getConfig(state),\r\n                getFlashMessages: getFlashMessages(state),\r\n                getStoreConfig: getStoreConfig(state, { formState }),\r\n                getStoreConfigOrThrow: getStoreConfigOrThrow(state, { formState }),\r\n                getContextConfig: getContextConfig(state),\r\n                getExternalSource: getExternalSource(state),\r\n                getHost: getHost(state),\r\n                getLocale: getLocale(state),\r\n                getVariantIdentificationToken: getVariantIdentificationToken(state),\r\n                getLoadError: getLoadError(state),\r\n                isLoading: isLoading(state),\r\n            };\r\n        },\r\n    );\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport Country from './country';\r\nimport CountryState, { DEFAULT_STATE } from './country-state';\r\n\r\nexport default interface CountrySelector {\r\n    getCountries(): Country[] | undefined;\r\n    getLoadError(): Error | undefined;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\r\n\r\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\r\n    const getCountries = createSelector(\r\n        (state: CountryState) => state.data,\r\n        (countries) => () => countries,\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: CountryState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: CountryState) => !!state.statuses.isLoading,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: CountryState = DEFAULT_STATE): CountrySelector => {\r\n        return {\r\n            getCountries: getCountries(state),\r\n            getLoadError: getLoadError(state),\r\n            isLoading: isLoading(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\r\n\r\nexport default interface CustomerStrategySelector {\r\n    getSignInError(methodId?: string): Error | undefined;\r\n    getSignOutError(methodId?: string): Error | undefined;\r\n    getExecutePaymentMethodCheckoutError(methodId?: string): Error | undefined;\r\n    getInitializeError(methodId?: string): Error | undefined;\r\n    getWidgetInteractionError(methodId?: string): Error | undefined;\r\n    isSigningIn(methodId?: string): boolean;\r\n    isSigningOut(methodId?: string): boolean;\r\n    isExecutingPaymentMethodCheckout(methodId?: string): boolean;\r\n    isInitializing(methodId?: string): boolean;\r\n    isInitialized(methodId: string): boolean;\r\n    isWidgetInteracting(methodId?: string): boolean;\r\n}\r\n\r\nexport type CustomerStrategySelectorFactory = (\r\n    state: CustomerStrategyState,\r\n) => CustomerStrategySelector;\r\n\r\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\r\n    const getSignInError = createSelector(\r\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\r\n        (state: CustomerStrategyState) => state.errors.signInError,\r\n        (signInMethodId, signInError) => (methodId?: string) => {\r\n            if (methodId && signInMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return signInError;\r\n        },\r\n    );\r\n\r\n    const getSignOutError = createSelector(\r\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\r\n        (state: CustomerStrategyState) => state.errors.signOutError,\r\n        (signOutMethodId, signOutError) => (methodId?: string) => {\r\n            if (methodId && signOutMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return signOutError;\r\n        },\r\n    );\r\n\r\n    const getExecutePaymentMethodCheckoutError = createSelector(\r\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutMethodId,\r\n        (state: CustomerStrategyState) => state.errors.executePaymentMethodCheckoutError,\r\n        (executePaymentMethodCheckoutMethodId, executePaymentMethodCheckoutError) =>\r\n            (methodId?: string) => {\r\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\r\n                    return;\r\n                }\r\n\r\n                return executePaymentMethodCheckoutError;\r\n            },\r\n    );\r\n\r\n    const getInitializeError = createSelector(\r\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\r\n        (state: CustomerStrategyState) => state.errors.initializeErrors,\r\n        (initializeMethodId, initializeErrors) => (methodId?: string) => {\r\n            if (!initializeMethodId || !initializeErrors) {\r\n                return;\r\n            }\r\n\r\n            if (methodId) {\r\n                return initializeErrors[methodId];\r\n            }\r\n\r\n            return initializeErrors[initializeMethodId];\r\n        },\r\n    );\r\n\r\n    const getWidgetInteractionError = createSelector(\r\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\r\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\r\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\r\n            if (methodId && widgetInteractionMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return widgetInteractionError;\r\n        },\r\n    );\r\n\r\n    const isSigningIn = createSelector(\r\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\r\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\r\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\r\n            if (methodId && signInMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isSigningIn;\r\n        },\r\n    );\r\n\r\n    const isSigningOut = createSelector(\r\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\r\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\r\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\r\n            if (methodId && signOutMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isSigningOut;\r\n        },\r\n    );\r\n\r\n    const isExecutingPaymentMethodCheckout = createSelector(\r\n        (state: CustomerStrategyState) => state.statuses.executePaymentMethodCheckoutMethodId,\r\n        (state: CustomerStrategyState) => state.statuses.isExecutingPaymentMethodCheckout,\r\n        (executePaymentMethodCheckoutMethodId, isExecutingPaymentMethodCheckout) =>\r\n            (methodId?: string) => {\r\n                if (methodId && executePaymentMethodCheckoutMethodId !== methodId) {\r\n                    return false;\r\n                }\r\n\r\n                return !!isExecutingPaymentMethodCheckout;\r\n            },\r\n    );\r\n\r\n    const isInitializing = createSelector(\r\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\r\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\r\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\r\n            if (methodId && initializeMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isInitializing;\r\n        },\r\n    );\r\n\r\n    const isInitialized = createSelector(\r\n        (state: CustomerStrategyState) => state.data,\r\n        (data) => (methodId: string) => {\r\n            return !!(data[methodId] && data[methodId].isInitialized);\r\n        },\r\n    );\r\n\r\n    const isWidgetInteracting = createSelector(\r\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\r\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\r\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\r\n            if (methodId && widgetInteractionMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isWidgetInteracting;\r\n        },\r\n    );\r\n\r\n    return memoizeOne((state: CustomerStrategyState = DEFAULT_STATE): CustomerStrategySelector => {\r\n        return {\r\n            getSignInError: getSignInError(state),\r\n            getSignOutError: getSignOutError(state),\r\n            getExecutePaymentMethodCheckoutError: getExecutePaymentMethodCheckoutError(state),\r\n            getInitializeError: getInitializeError(state),\r\n            getWidgetInteractionError: getWidgetInteractionError(state),\r\n            isSigningIn: isSigningIn(state),\r\n            isSigningOut: isSigningOut(state),\r\n            isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(state),\r\n            isInitializing: isInitializing(state),\r\n            isInitialized: isInitialized(state),\r\n            isWidgetInteracting: isWidgetInteracting(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { StorefrontErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { RequestError } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport GiftCertificate from './gift-certificate';\r\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\r\n\r\nexport default interface GiftCertificateSelector {\r\n    getGiftCertificates(): GiftCertificate[] | undefined;\r\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\r\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\r\n    isApplying(): boolean;\r\n    isRemoving(): boolean;\r\n}\r\n\r\nexport type GiftCertificateSelectorFactory = (\r\n    state: GiftCertificateState,\r\n) => GiftCertificateSelector;\r\n\r\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\r\n    const getGiftCertificates = createSelector(\r\n        (state: GiftCertificateState) => state.data,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getRemoveError = createSelector(\r\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getApplyError = createSelector(\r\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isApplying = createSelector(\r\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\r\n        (status) => () => status,\r\n    );\r\n\r\n    const isRemoving = createSelector(\r\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: GiftCertificateState = DEFAULT_STATE): GiftCertificateSelector => {\r\n        return {\r\n            getGiftCertificates: getGiftCertificates(state),\r\n            getRemoveError: getRemoveError(state),\r\n            getApplyError: getApplyError(state),\r\n            isApplying: isApplying(state),\r\n            isRemoving: isRemoving(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { filter, flatMap, isMatch, values } from 'lodash';\r\n\r\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\r\nimport { createSelector } from '../../common/selector';\r\nimport { guard } from '../../common/utility';\r\nimport PaymentMethod from '../payment-method';\r\n\r\nimport PaymentInstrument, { CardInstrument } from './instrument';\r\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\r\nimport supportedInstruments from './supported-payment-instruments';\r\n\r\nexport default interface InstrumentSelector {\r\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\r\n    getCardInstrumentOrThrow(instrumentId: string): CardInstrument;\r\n    getInstruments(): PaymentInstrument[] | undefined;\r\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\r\n    getInstrumentsMeta(): InstrumentMeta | undefined;\r\n    getLoadError(): Error | undefined;\r\n    getDeleteError(instrumentId?: string): Error | undefined;\r\n    isLoading(): boolean;\r\n    isDeleting(instrumentId?: string): boolean;\r\n}\r\n\r\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\r\n\r\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\r\n    const getInstrumentsByPaymentMethod = createSelector(\r\n        (state: InstrumentState) => state.data,\r\n        (instruments) => (paymentMethod: PaymentMethod) => {\r\n            if (!instruments) {\r\n                return;\r\n            }\r\n\r\n            const paymentMethodKey = paymentMethod.gateway\r\n                ? `${paymentMethod.gateway}.${paymentMethod.id}`\r\n                : paymentMethod.id;\r\n\r\n            const currentMethod = supportedInstruments[paymentMethodKey];\r\n\r\n            if (!currentMethod) {\r\n                return [];\r\n            }\r\n\r\n            return filter<PaymentInstrument>(instruments, currentMethod);\r\n        },\r\n    );\r\n\r\n    const getCardInstrument = createSelector(\r\n        (state: InstrumentState) => state.data,\r\n        (instruments = []) =>\r\n            (instrumentId: string) => {\r\n                const cards = values(supportedInstruments);\r\n\r\n                return instruments.find(\r\n                    (instrument): instrument is CardInstrument =>\r\n                        instrument.bigpayToken === instrumentId &&\r\n                        instrument.type === 'card' &&\r\n                        cards.some((card) => isMatch(instrument, card)),\r\n                );\r\n            },\r\n    );\r\n\r\n    const getCardInstrumentOrThrow = createSelector(\r\n        getCardInstrument,\r\n        (getCardInstrument) => (instrumentId: string) => {\r\n            return guard(\r\n                getCardInstrument(instrumentId),\r\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentInstrument),\r\n            );\r\n        },\r\n    );\r\n\r\n    const getInstruments = createSelector(\r\n        (state: InstrumentState) => state.data,\r\n        (instruments) => () => {\r\n            if (!instruments) {\r\n                return;\r\n            }\r\n\r\n            const allSupportedInstruments = flatMap(supportedInstruments, (supportedProvider) =>\r\n                filter(\r\n                    instruments,\r\n                    (instrument: PaymentInstrument): instrument is PaymentInstrument => {\r\n                        return isMatch(instrument, supportedProvider);\r\n                    },\r\n                ),\r\n            );\r\n\r\n            return allSupportedInstruments;\r\n        },\r\n    );\r\n\r\n    const getInstrumentsMeta = createSelector(\r\n        (state: InstrumentState) => state.meta,\r\n        (meta) => () => meta,\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: InstrumentState) => state.errors.loadError,\r\n        (loadError) => () => loadError,\r\n    );\r\n\r\n    const getDeleteError = createSelector(\r\n        (state: InstrumentState) => state.errors.failedInstrument,\r\n        (state: InstrumentState) => state.errors.deleteError,\r\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\r\n            if (instrumentId && failedInstrument !== instrumentId) {\r\n                return;\r\n            }\r\n\r\n            return deleteError;\r\n        },\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: InstrumentState) => state.statuses.isLoading,\r\n        (isLoading) => () => !!isLoading,\r\n    );\r\n\r\n    const isDeleting = createSelector(\r\n        (state: InstrumentState) => state.statuses.deletingInstrument,\r\n        (state: InstrumentState) => state.statuses.isDeleting,\r\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\r\n            if (instrumentId && deletingInstrument !== instrumentId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isDeleting;\r\n        },\r\n    );\r\n\r\n    return memoizeOne((state: InstrumentState = DEFAULT_STATE): InstrumentSelector => {\r\n        return {\r\n            getCardInstrument: getCardInstrument(state),\r\n            getCardInstrumentOrThrow: getCardInstrumentOrThrow(state),\r\n            getInstruments: getInstruments(state),\r\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\r\n            getInstrumentsMeta: getInstrumentsMeta(state),\r\n            getLoadError: getLoadError(state),\r\n            getDeleteError: getDeleteError(state),\r\n            isLoading: isLoading(state),\r\n            isDeleting: isDeleting(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { find } from 'lodash';\r\n\r\nimport { createSelector } from '../common/selector';\r\nimport { Country } from '../geography';\r\n\r\nimport FormField from './form-field';\r\nimport FormFieldsState, { DEFAULT_STATE } from './form-fields-state';\r\n\r\nexport default interface FormSelector {\r\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\r\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\r\n    getCustomerAccountFields(): FormField[];\r\n    getLoadError(): Error | undefined;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type FormSelectorFactory = (state: FormFieldsState) => FormSelector;\r\n\r\nexport function createFormSelectorFactory(): FormSelectorFactory {\r\n    const getShippingAddressFields = createSelector(\r\n        (state: FormFieldsState) => state.data,\r\n        (formFields) =>\r\n            (countries: Country[] = [], countryCode: string) => {\r\n                const selectedCountry = find(countries, { code: countryCode });\r\n                const fields = formFields ? formFields.shippingAddress : [];\r\n\r\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\r\n            },\r\n    );\r\n\r\n    const getBillingAddressFields = createSelector(\r\n        (state: FormFieldsState) => state.data,\r\n        (formFields) =>\r\n            (countries: Country[] = [], countryCode: string) => {\r\n                const selectedCountry = find(countries, { code: countryCode });\r\n                const fields = formFields ? formFields.billingAddress : [];\r\n\r\n                return fields.map((field: any) => processField(field, countries, selectedCountry));\r\n            },\r\n    );\r\n\r\n    const getCustomerAccountFields = createSelector(\r\n        (state: FormFieldsState) => state.data,\r\n        (formFields) => () => formFields ? formFields.customerAccount : [],\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: FormFieldsState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: FormFieldsState) => !!state.statuses.isLoading,\r\n        (status) => () => status,\r\n    );\r\n\r\n    function processField(\r\n        field: FormField,\r\n        countries: Country[],\r\n        selectedCountry?: Country,\r\n    ): FormField {\r\n        if (field.name === 'countryCode') {\r\n            return processCountry(field, countries, selectedCountry);\r\n        }\r\n\r\n        if (field.name === 'stateOrProvince') {\r\n            return processProvince(field, selectedCountry);\r\n        }\r\n\r\n        if (field.name === 'postalCode') {\r\n            return processsPostCode(field, selectedCountry);\r\n        }\r\n\r\n        return field;\r\n    }\r\n\r\n    function processCountry(\r\n        field: FormField,\r\n        countries: Country[] = [],\r\n        country?: Country,\r\n    ): FormField {\r\n        if (!countries.length) {\r\n            return field;\r\n        }\r\n\r\n        const { code = '' } = country || {};\r\n        const items = countries.map(({ code, name }: any) => ({\r\n            value: code,\r\n            label: name,\r\n        }));\r\n\r\n        return {\r\n            ...field,\r\n            options: { items },\r\n            default: code,\r\n            type: 'array',\r\n            fieldType: 'dropdown',\r\n            itemtype: 'string',\r\n        };\r\n    }\r\n\r\n    function processProvince(field: FormField, country?: Country): FormField {\r\n        const { subdivisions = [], requiresState } = country || {};\r\n\r\n        if (!subdivisions.length) {\r\n            return {\r\n                ...field,\r\n                required: requiresState == null ? false : requiresState,\r\n            };\r\n        }\r\n\r\n        const items = subdivisions.map(({ code, name }: any) => ({\r\n            value: code,\r\n            label: name,\r\n        }));\r\n\r\n        return {\r\n            ...field,\r\n            name: 'stateOrProvinceCode',\r\n            options: { items },\r\n            required: requiresState == null ? true : requiresState,\r\n            type: 'array',\r\n            fieldType: 'dropdown',\r\n            itemtype: 'string',\r\n        };\r\n    }\r\n\r\n    function processsPostCode(field: FormField, country?: Country): FormField {\r\n        const { hasPostalCodes = [] } = country || {};\r\n\r\n        if (hasPostalCodes === undefined) {\r\n            return field;\r\n        }\r\n\r\n        return { ...field, required: Boolean(hasPostalCodes) };\r\n    }\r\n\r\n    return memoizeOne((state: FormFieldsState = DEFAULT_STATE): FormSelector => {\r\n        return {\r\n            getShippingAddressFields: getShippingAddressFields(state),\r\n            getBillingAddressFields: getBillingAddressFields(state),\r\n            getCustomerAccountFields: getCustomerAccountFields(state),\r\n            getLoadError: getLoadError(state),\r\n            isLoading: isLoading(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { find } from 'lodash';\r\n\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\n\r\nimport PaymentMethod from './payment-method';\r\nimport PaymentMethodMeta from './payment-method-meta';\r\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\r\n\r\nexport default interface PaymentMethodSelector {\r\n    getPaymentMethods(): PaymentMethod[] | undefined;\r\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\r\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\r\n    getPaymentMethodOrThrow(methodId: string, gatewayId?: string): PaymentMethod;\r\n    getLoadError(): Error | undefined;\r\n    getLoadMethodError(methodId?: string): Error | undefined;\r\n    isLoading(): boolean;\r\n    isLoadingMethod(methodId?: string): boolean;\r\n}\r\n\r\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\r\n\r\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\r\n    const getPaymentMethods = createSelector(\r\n        (state: PaymentMethodState) => state.data,\r\n        (paymentMethods) => () => paymentMethods,\r\n    );\r\n\r\n    const getPaymentMethodsMeta = createSelector(\r\n        (state: PaymentMethodState) => state.meta,\r\n        (meta) => () => meta,\r\n    );\r\n\r\n    const getPaymentMethod = createSelector(\r\n        (state: PaymentMethodState) => state.data,\r\n        (paymentMethods) => (methodId: string, gatewayId?: string) => {\r\n            return gatewayId\r\n                ? find(paymentMethods, { id: methodId, gateway: gatewayId })\r\n                : find(paymentMethods, { id: methodId });\r\n        },\r\n    );\r\n\r\n    const getPaymentMethodOrThrow = createSelector(\r\n        getPaymentMethod,\r\n        (getPaymentMethod) => (methodId: string, gatewayId?: string) => {\r\n            return guard(\r\n                getPaymentMethod(methodId, gatewayId),\r\n                () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod),\r\n            );\r\n        },\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: PaymentMethodState) => state.errors.loadError,\r\n        (loadError) => () => loadError,\r\n    );\r\n\r\n    const getLoadMethodError = createSelector(\r\n        (state: PaymentMethodState) => state.errors.loadMethodId,\r\n        (state: PaymentMethodState) => state.errors.loadMethodError,\r\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\r\n            if (methodId && loadMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return loadMethodError;\r\n        },\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: PaymentMethodState) => state.statuses.isLoading,\r\n        (isLoading) => () => !!isLoading,\r\n    );\r\n\r\n    const isLoadingMethod = createSelector(\r\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\r\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\r\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\r\n            if (methodId && loadMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isLoadingMethod;\r\n        },\r\n    );\r\n\r\n    return memoizeOne((state: PaymentMethodState = DEFAULT_STATE): PaymentMethodSelector => {\r\n        return {\r\n            getPaymentMethods: getPaymentMethods(state),\r\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\r\n            getPaymentMethod: getPaymentMethod(state),\r\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\r\n            getLoadError: getLoadError(state),\r\n            getLoadMethodError: getLoadMethodError(state),\r\n            isLoading: isLoading(state),\r\n            isLoadingMethod: isLoadingMethod(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\r\n\r\ninterface InitiaizedQuery {\r\n    methodId: string;\r\n    gatewayId?: string;\r\n}\r\n\r\nexport default interface PaymentStrategySelector {\r\n    getInitializeError(methodId?: string): Error | undefined;\r\n    getExecuteError(methodId?: string): Error | undefined;\r\n    getFinalizeError(methodId?: string): Error | undefined;\r\n    getWidgetInteractingError(methodId?: string): Error | undefined;\r\n    isInitializing(methodId?: string): boolean;\r\n    isInitialized(query: InitiaizedQuery): boolean;\r\n    isExecuting(methodId?: string): boolean;\r\n    isFinalizing(methodId?: string): boolean;\r\n    isWidgetInteracting(methodId?: string): boolean;\r\n}\r\n\r\nexport type PaymentStrategySelectorFactory = (\r\n    state: PaymentStrategyState,\r\n) => PaymentStrategySelector;\r\n\r\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\r\n    const getInitializeError = createSelector(\r\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\r\n        (state: PaymentStrategyState) => state.errors.initializeError,\r\n        (initializeMethodId, initializeError) => (methodId?: string) => {\r\n            if (methodId && initializeMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return initializeError;\r\n        },\r\n    );\r\n\r\n    const getExecuteError = createSelector(\r\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\r\n        (state: PaymentStrategyState) => state.errors.executeError,\r\n        (executeMethodId, executeError) => (methodId?: string) => {\r\n            if (methodId && executeMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return executeError;\r\n        },\r\n    );\r\n\r\n    const getFinalizeError = createSelector(\r\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\r\n        (state: PaymentStrategyState) => state.errors.finalizeError,\r\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\r\n            if (methodId && finalizeMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return finalizeError;\r\n        },\r\n    );\r\n\r\n    const getWidgetInteractingError = createSelector(\r\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\r\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\r\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\r\n            if (methodId && widgetInteractionMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return widgetInteractionError;\r\n        },\r\n    );\r\n\r\n    const isInitializing = createSelector(\r\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\r\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\r\n        (initializeMethodId, isInitializing) => (key?: string) => {\r\n            if (key && initializeMethodId !== key) {\r\n                return false;\r\n            }\r\n\r\n            return !!isInitializing;\r\n        },\r\n    );\r\n\r\n    const isInitialized = createSelector(\r\n        (state: PaymentStrategyState) => state.data,\r\n        (data) => (query: InitiaizedQuery) => {\r\n            const key = query.gatewayId ? `${query.methodId}.${query.gatewayId}` : query.methodId;\r\n\r\n            return !!(data[key] && data[key].isInitialized);\r\n        },\r\n    );\r\n\r\n    const isExecuting = createSelector(\r\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\r\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\r\n        (executeMethodId, isExecuting) => (methodId?: string) => {\r\n            if (methodId && executeMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isExecuting;\r\n        },\r\n    );\r\n\r\n    const isFinalizing = createSelector(\r\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\r\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\r\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\r\n            if (methodId && finalizeMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isFinalizing;\r\n        },\r\n    );\r\n\r\n    const isWidgetInteracting = createSelector(\r\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\r\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\r\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\r\n            if (methodId && widgetInteractionMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isWidgetInteracting;\r\n        },\r\n    );\r\n\r\n    return memoizeOne((state: PaymentStrategyState = DEFAULT_STATE): PaymentStrategySelector => {\r\n        return {\r\n            getInitializeError: getInitializeError(state),\r\n            getExecuteError: getExecuteError(state),\r\n            getFinalizeError: getFinalizeError(state),\r\n            getWidgetInteractingError: getWidgetInteractingError(state),\r\n            isInitializing: isInitializing(state),\r\n            isInitialized: isInitialized(state),\r\n            isExecuting: isExecuting(state),\r\n            isFinalizing: isFinalizing(state),\r\n            isWidgetInteracting: isWidgetInteracting(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\nimport { objectFlatten, objectWithSortedKeys } from '../common/utility';\r\n\r\nimport { PickupOptionResult, SearchArea } from './pickup-option';\r\nimport PickupOptionState, { DEFAULT_STATE } from './pickup-option-state';\r\n\r\nexport default interface PickupOptionSelector {\r\n    getPickupOptions(\r\n        consignmentId: string,\r\n        searchArea: SearchArea,\r\n    ): PickupOptionResult[] | undefined;\r\n    getLoadError(): Error | undefined;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type PickupOptionSelectorFactory = (state: PickupOptionState) => PickupOptionSelector;\r\n\r\nexport function createPickupOptionSelectorFactory(): PickupOptionSelectorFactory {\r\n    const getPickupOptions = createSelector(\r\n        (state: PickupOptionState) => state.data,\r\n        (pickupOptions) => (consignmentId: string, searchArea: SearchArea) => {\r\n            if (!pickupOptions) {\r\n                return;\r\n            }\r\n\r\n            const flattenedParams = objectFlatten({ consignmentId, searchArea });\r\n            const sortedFlattenedParams = objectWithSortedKeys(flattenedParams);\r\n            const keyString = btoa(`${JSON.stringify(sortedFlattenedParams)}`);\r\n\r\n            return pickupOptions[keyString];\r\n        },\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: PickupOptionState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: PickupOptionState) => !!state.statuses.isLoading,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: PickupOptionState = DEFAULT_STATE): PickupOptionSelector => {\r\n        return {\r\n            getPickupOptions: getPickupOptions(state),\r\n            getLoadError: getLoadError(state),\r\n            isLoading: isLoading(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\nimport { Country } from '../geography';\r\n\r\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\r\n\r\nexport default interface ShippingCountrySelector {\r\n    getShippingCountries(): Country[] | undefined;\r\n    getLoadError(): Error | undefined;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type ShippingCountrySelectorFactory = (\r\n    state: ShippingCountryState,\r\n) => ShippingCountrySelector;\r\n\r\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\r\n    const getShippingCountries = createSelector(\r\n        (state: ShippingCountryState) => state.data,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: ShippingCountryState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: ShippingCountryState) => state.statuses.isLoading,\r\n        (status) => () => !!status,\r\n    );\r\n\r\n    return memoizeOne((state: ShippingCountryState = DEFAULT_STATE): ShippingCountrySelector => {\r\n        return {\r\n            getShippingCountries: getShippingCountries(state),\r\n            getLoadError: getLoadError(state),\r\n            isLoading: isLoading(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\r\n\r\nexport default interface ShippingStrategySelector {\r\n    getUpdateAddressError(methodId?: string): Error | undefined;\r\n    getSelectOptionError(methodId?: string): Error | undefined;\r\n    getInitializeError(methodId?: string): Error | undefined;\r\n    getWidgetInteractionError(methodId?: string): Error | undefined;\r\n    isUpdatingAddress(methodId?: string): boolean;\r\n    isSelectingOption(methodId?: string): boolean;\r\n    isInitializing(methodId?: string): boolean;\r\n    isInitialized(methodId: string): boolean;\r\n    isWidgetInteracting(methodId?: string): boolean;\r\n}\r\n\r\nexport type ShippingStrategySelectorFactory = (\r\n    state: ShippingStrategyState,\r\n) => ShippingStrategySelector;\r\n\r\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\r\n    const getUpdateAddressError = createSelector(\r\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\r\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\r\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\r\n            if (methodId && updateAddressMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return updateAddressError;\r\n        },\r\n    );\r\n\r\n    const getSelectOptionError = createSelector(\r\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\r\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\r\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\r\n            if (methodId && selectOptionMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return selectOptionError;\r\n        },\r\n    );\r\n\r\n    const getInitializeError = createSelector(\r\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\r\n        (state: ShippingStrategyState) => state.errors.initializeError,\r\n        (initializeMethodId, initializeError) => (methodId?: string) => {\r\n            if (methodId && initializeMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return initializeError;\r\n        },\r\n    );\r\n\r\n    const getWidgetInteractionError = createSelector(\r\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\r\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\r\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\r\n            if (methodId && widgetInteractionMethodId !== methodId) {\r\n                return;\r\n            }\r\n\r\n            return widgetInteractionError;\r\n        },\r\n    );\r\n\r\n    const isUpdatingAddress = createSelector(\r\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\r\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\r\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\r\n            if (methodId && updateAddressMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isUpdatingAddress;\r\n        },\r\n    );\r\n\r\n    const isSelectingOption = createSelector(\r\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\r\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\r\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\r\n            if (methodId && selectOptionMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isSelectingOption;\r\n        },\r\n    );\r\n\r\n    const isInitializing = createSelector(\r\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\r\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\r\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\r\n            if (methodId && initializeMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isInitializing;\r\n        },\r\n    );\r\n\r\n    const isInitialized = createSelector(\r\n        (state: ShippingStrategyState) => state.data,\r\n        (data) => (methodId: string) => {\r\n            return !!(data[methodId] && data[methodId].isInitialized);\r\n        },\r\n    );\r\n\r\n    const isWidgetInteracting = createSelector(\r\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\r\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\r\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\r\n            if (methodId && widgetInteractionMethodId !== methodId) {\r\n                return false;\r\n            }\r\n\r\n            return !!isWidgetInteracting;\r\n        },\r\n    );\r\n\r\n    return memoizeOne((state: ShippingStrategyState = DEFAULT_STATE): ShippingStrategySelector => {\r\n        return {\r\n            getUpdateAddressError: getUpdateAddressError(state),\r\n            getSelectOptionError: getSelectOptionError(state),\r\n            getInitializeError: getInitializeError(state),\r\n            getWidgetInteractionError: getWidgetInteractionError(state),\r\n            isUpdatingAddress: isUpdatingAddress(state),\r\n            isSelectingOption: isSelectingOption(state),\r\n            isInitializing: isInitializing(state),\r\n            isInitialized: isInitialized(state),\r\n            isWidgetInteracting: isWidgetInteracting(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { find } from 'lodash';\r\n\r\nimport { AddressRequestBody, isAddressEqual } from '../address';\r\nimport { CartSelector, PhysicalItem } from '../cart';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\n\r\nimport Consignment from './consignment';\r\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\r\nimport ShippingOption from './shipping-option';\r\n\r\nexport default interface ConsignmentSelector {\r\n    getConsignments(): Consignment[] | undefined;\r\n    getConsignmentsOrThrow(): Consignment[];\r\n    getConsignmentById(id: string): Consignment | undefined;\r\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\r\n    getShippingOption(): ShippingOption | undefined;\r\n    getLoadError(): Error | undefined;\r\n    getCreateError(): Error | undefined;\r\n    getLoadShippingOptionsError(): Error | undefined;\r\n    getUnassignedItems(): PhysicalItem[];\r\n    getUpdateError(consignmentId?: string): Error | undefined;\r\n    getDeleteError(consignmentId?: string): Error | undefined;\r\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\r\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\r\n    isLoading(): boolean;\r\n    isLoadingShippingOptions(): boolean;\r\n    isCreating(): boolean;\r\n    isUpdating(consignmentId?: string): boolean;\r\n    isDeleting(consignmentId?: string): boolean;\r\n    isAssigningItems(address: AddressRequestBody): boolean;\r\n    isUpdatingShippingOption(consignmentId?: string): boolean;\r\n}\r\n\r\nexport type ConsignmentSelectorFactory = (\r\n    state: ConsignmentState,\r\n    cart: CartSelector,\r\n) => ConsignmentSelector;\r\n\r\ninterface ConsignmentSelectorDependencies {\r\n    cart: CartSelector;\r\n}\r\n\r\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\r\n    const getConsignments = createSelector(\r\n        (state: ConsignmentState) => state.data,\r\n        (consignments) => () => consignments,\r\n    );\r\n\r\n    const getConsignmentsOrThrow = createSelector(getConsignments, (getConsignments) => () => {\r\n        return guard(\r\n            getConsignments(),\r\n            () => new MissingDataError(MissingDataErrorType.MissingConsignments),\r\n        );\r\n    });\r\n\r\n    const getConsignmentById = createSelector(\r\n        (state: ConsignmentState) => state.data,\r\n        (consignments) => (id: string) => {\r\n            if (!consignments || !consignments.length) {\r\n                return;\r\n            }\r\n\r\n            return find(consignments, { id });\r\n        },\r\n    );\r\n\r\n    const getConsignmentByAddress = createSelector(\r\n        (state: ConsignmentState) => state.data,\r\n        (consignments) => (address: AddressRequestBody) => {\r\n            if (!consignments || !consignments.length) {\r\n                return;\r\n            }\r\n\r\n            return find(consignments, (consignment) =>\r\n                isAddressEqual(consignment.shippingAddress, address),\r\n            );\r\n        },\r\n    );\r\n\r\n    const getShippingOption = createSelector(\r\n        (state: ConsignmentState) => state.data,\r\n        (consignments) => () => {\r\n            if (consignments && consignments.length) {\r\n                return consignments[0].selectedShippingOption;\r\n            }\r\n        },\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: ConsignmentState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getCreateError = createSelector(\r\n        (state: ConsignmentState) => state.errors.createError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getLoadShippingOptionsError = createSelector(\r\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getUnassignedItems = createSelector(\r\n        getConsignments,\r\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\r\n        (getConsignments, getCart) => () => {\r\n            const cart = getCart();\r\n\r\n            if (!cart) {\r\n                return [];\r\n            }\r\n\r\n            const assignedLineItemIds = (getConsignments() || []).reduce(\r\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\r\n                [] as string[],\r\n            );\r\n\r\n            return (cart.lineItems.physicalItems || []).filter(\r\n                (item) => assignedLineItemIds.indexOf(item.id as string) < 0,\r\n            );\r\n        },\r\n    );\r\n\r\n    const getUpdateError = createSelector(\r\n        (state: ConsignmentState) => state.errors.updateError,\r\n        (updateError) => (consignmentId?: string) => {\r\n            if (consignmentId) {\r\n                return updateError[consignmentId];\r\n            }\r\n\r\n            return find(updateError);\r\n        },\r\n    );\r\n\r\n    const getDeleteError = createSelector(\r\n        (state: ConsignmentState) => state.errors.deleteError,\r\n        (deleteError) => (consignmentId?: string) => {\r\n            if (consignmentId) {\r\n                return deleteError[consignmentId];\r\n            }\r\n\r\n            return find(deleteError);\r\n        },\r\n    );\r\n\r\n    const getItemAssignmentError = createSelector(\r\n        getConsignmentByAddress,\r\n        getUpdateError,\r\n        getCreateError,\r\n        (getConsignmentByAddress, getUpdateError, getCreateError) =>\r\n            (address: AddressRequestBody) => {\r\n                const consignment = getConsignmentByAddress(address);\r\n\r\n                return consignment ? getUpdateError(consignment.id) : getCreateError();\r\n            },\r\n    );\r\n\r\n    const getUpdateShippingOptionError = createSelector(\r\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\r\n        (updateShippingOptionError) => (consignmentId?: string) => {\r\n            if (consignmentId) {\r\n                return updateShippingOptionError[consignmentId];\r\n            }\r\n\r\n            return find(updateShippingOptionError);\r\n        },\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: ConsignmentState) => state.statuses.isLoading,\r\n        (isLoading) => () => isLoading === true,\r\n    );\r\n\r\n    const isLoadingShippingOptions = createSelector(\r\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\r\n        (isLoadingShippingOptions) => () => isLoadingShippingOptions === true,\r\n    );\r\n\r\n    const isCreating = createSelector(\r\n        (state: ConsignmentState) => state.statuses.isCreating,\r\n        (isCreating) => () => isCreating === true,\r\n    );\r\n\r\n    const isUpdating = createSelector(\r\n        (state: ConsignmentState) => state.statuses.isUpdating,\r\n        (isUpdating) => (consignmentId?: string) => {\r\n            if (consignmentId) {\r\n                return isUpdating[consignmentId] === true;\r\n            }\r\n\r\n            return find(isUpdating) === true;\r\n        },\r\n    );\r\n\r\n    const isDeleting = createSelector(\r\n        (state: ConsignmentState) => state.statuses.isDeleting,\r\n        (isDeleting) => (consignmentId?: string) => {\r\n            if (consignmentId) {\r\n                return isDeleting[consignmentId] === true;\r\n            }\r\n\r\n            return find(isDeleting) === true;\r\n        },\r\n    );\r\n\r\n    const isAssigningItems = createSelector(\r\n        getConsignmentByAddress,\r\n        isUpdating,\r\n        isCreating,\r\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\r\n            const consignment = getConsignmentByAddress(address);\r\n\r\n            return consignment ? isUpdating(consignment.id) : isCreating();\r\n        },\r\n    );\r\n\r\n    const isUpdatingShippingOption = createSelector(\r\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\r\n        (isUpdatingShippingOption) => (consignmentId?: string) => {\r\n            if (consignmentId) {\r\n                return isUpdatingShippingOption[consignmentId] === true;\r\n            }\r\n\r\n            return find(isUpdatingShippingOption) === true;\r\n        },\r\n    );\r\n\r\n    return memoizeOne(\r\n        (state: ConsignmentState = DEFAULT_STATE, cart: CartSelector): ConsignmentSelector => {\r\n            return {\r\n                getConsignments: getConsignments(state),\r\n                getConsignmentsOrThrow: getConsignmentsOrThrow(state),\r\n                getConsignmentById: getConsignmentById(state),\r\n                getConsignmentByAddress: getConsignmentByAddress(state),\r\n                getShippingOption: getShippingOption(state),\r\n                getLoadError: getLoadError(state),\r\n                getCreateError: getCreateError(state),\r\n                getLoadShippingOptionsError: getLoadShippingOptionsError(state),\r\n                getUnassignedItems: getUnassignedItems(state, { cart }),\r\n                getUpdateError: getUpdateError(state),\r\n                getDeleteError: getDeleteError(state),\r\n                getItemAssignmentError: getItemAssignmentError(state),\r\n                getUpdateShippingOptionError: getUpdateShippingOptionError(state),\r\n                isLoading: isLoading(state),\r\n                isLoadingShippingOptions: isLoadingShippingOptions(state),\r\n                isCreating: isCreating(state),\r\n                isUpdating: isUpdating(state),\r\n                isDeleting: isDeleting(state),\r\n                isAssigningItems: isAssigningItems(state),\r\n                isUpdatingShippingOption: isUpdatingShippingOption(state),\r\n            };\r\n        },\r\n    );\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { BillingAddressSelector } from '../billing';\r\nimport { CartSelector } from '../cart';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\r\nimport { CustomerSelector } from '../customer';\r\nimport { ConsignmentSelector } from '../shipping';\r\n\r\nimport Checkout from './checkout';\r\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\r\n\r\nexport default interface CheckoutSelector {\r\n    getCheckout(): Checkout | undefined;\r\n    getCheckoutOrThrow(): Checkout;\r\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\r\n    getLoadError(): Error | undefined;\r\n    getUpdateError(): Error | undefined;\r\n    isExecutingSpamCheck(): boolean;\r\n    isLoading(): boolean;\r\n    isUpdating(): boolean;\r\n}\r\n\r\nexport type CheckoutSelectorFactory = (\r\n    state: CheckoutState,\r\n    billingAddress: BillingAddressSelector,\r\n    cart: CartSelector,\r\n    consignments: ConsignmentSelector,\r\n    coupons: CouponSelector,\r\n    customer: CustomerSelector,\r\n    giftCertificates: GiftCertificateSelector,\r\n) => CheckoutSelector;\r\n\r\ninterface CheckoutSelectorDependencies {\r\n    billingAddress: BillingAddressSelector;\r\n    cart: CartSelector;\r\n    consignments: ConsignmentSelector;\r\n    coupons: CouponSelector;\r\n    customer: CustomerSelector;\r\n    giftCertificates: GiftCertificateSelector;\r\n}\r\n\r\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\r\n    const getCheckout = createSelector(\r\n        (state: CheckoutState) => state.data,\r\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) =>\r\n            billingAddress.getBillingAddress,\r\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\r\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\r\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) =>\r\n            consignments.getConsignments,\r\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\r\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) =>\r\n            giftCertificates.getGiftCertificates,\r\n        (\r\n                data,\r\n                getBillingAddress,\r\n                getCart,\r\n                getCustomer,\r\n                getConsignments,\r\n                getCoupons,\r\n                getGiftCertificates,\r\n            ) =>\r\n            () => {\r\n                const billingAddress = getBillingAddress();\r\n                const cart = getCart();\r\n                const customer = getCustomer();\r\n                const consignments = getConsignments() || [];\r\n                const coupons = getCoupons() || [];\r\n                const giftCertificates = getGiftCertificates() || [];\r\n\r\n                if (!data || !cart || !customer) {\r\n                    return;\r\n                }\r\n\r\n                return {\r\n                    ...data,\r\n                    billingAddress,\r\n                    cart,\r\n                    customer,\r\n                    consignments,\r\n                    coupons,\r\n                    giftCertificates,\r\n                };\r\n            },\r\n    );\r\n\r\n    const getCheckoutOrThrow = createSelector(getCheckout, (getCheckout) => () => {\r\n        return guard(\r\n            getCheckout(),\r\n            () => new MissingDataError(MissingDataErrorType.MissingCheckout),\r\n        );\r\n    });\r\n\r\n    const getOutstandingBalance = createSelector(\r\n        getCheckout,\r\n        (getCheckout) => (useStoreCredit?: boolean) => {\r\n            const checkout = getCheckout();\r\n\r\n            if (!checkout) {\r\n                return;\r\n            }\r\n\r\n            const grandTotal = checkout.grandTotal || 0;\r\n            const storeCredit = checkout.customer.storeCredit || 0;\r\n\r\n            return useStoreCredit\r\n                ? Math.max(grandTotal - storeCredit, 0)\r\n                : checkout.outstandingBalance;\r\n        },\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: CheckoutState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getUpdateError = createSelector(\r\n        (state: CheckoutState) => state.errors.updateError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isExecutingSpamCheck = createSelector(\r\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\r\n        (isExecutingSpamCheck) => () => isExecutingSpamCheck === true,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: CheckoutState) => state.statuses.isLoading,\r\n        (isLoading) => () => isLoading === true,\r\n    );\r\n\r\n    const isUpdating = createSelector(\r\n        (state: CheckoutState) => state.statuses.isUpdating,\r\n        (isUpdating) => () => isUpdating === true,\r\n    );\r\n\r\n    return memoizeOne(\r\n        (\r\n            state: CheckoutState = DEFAULT_STATE,\r\n            billingAddress: BillingAddressSelector,\r\n            cart: CartSelector,\r\n            consignments: ConsignmentSelector,\r\n            coupons: CouponSelector,\r\n            customer: CustomerSelector,\r\n            giftCertificates: GiftCertificateSelector,\r\n        ): CheckoutSelector => {\r\n            return {\r\n                getCheckout: getCheckout(state, {\r\n                    billingAddress,\r\n                    cart,\r\n                    consignments,\r\n                    coupons,\r\n                    customer,\r\n                    giftCertificates,\r\n                }),\r\n                getCheckoutOrThrow: getCheckoutOrThrow(state, {\r\n                    billingAddress,\r\n                    cart,\r\n                    consignments,\r\n                    coupons,\r\n                    customer,\r\n                    giftCertificates,\r\n                }),\r\n                getOutstandingBalance: getOutstandingBalance(state, {\r\n                    billingAddress,\r\n                    cart,\r\n                    consignments,\r\n                    coupons,\r\n                    customer,\r\n                    giftCertificates,\r\n                }),\r\n                getLoadError: getLoadError(state),\r\n                getUpdateError: getUpdateError(state),\r\n                isExecutingSpamCheck: isExecutingSpamCheck(state),\r\n                isLoading: isLoading(state),\r\n                isUpdating: isUpdating(state),\r\n            };\r\n        },\r\n    );\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\nimport { guard } from '../common/utility';\r\nimport { CouponSelector } from '../coupon';\r\nimport OrderBillingAddressSelector from '../order-billing-address/order-billing-address-selector';\r\n\r\nimport Order from './order';\r\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\r\n\r\nexport default interface OrderSelector {\r\n    getOrder(): Order | undefined;\r\n    getOrderOrThrow(): Order;\r\n    getOrderMeta(): OrderMetaState | undefined;\r\n    getLoadError(): Error | undefined;\r\n    getPaymentId(methodId: string): string | undefined;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type OrderSelectorFactory = (\r\n    state: OrderState,\r\n    billingAddress: OrderBillingAddressSelector,\r\n    coupons: CouponSelector,\r\n) => OrderSelector;\r\n\r\ninterface OrderSelectorDependencies {\r\n    billingAddress: OrderBillingAddressSelector;\r\n    coupons: CouponSelector;\r\n}\r\n\r\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\r\n    const getOrder = createSelector(\r\n        (state: OrderState) => state.data,\r\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) =>\r\n            billingAddress.getOrderBillingAddress(),\r\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\r\n        (data, billingAddress, coupons = []) =>\r\n            () => {\r\n                if (!data || !billingAddress) {\r\n                    return;\r\n                }\r\n\r\n                return {\r\n                    ...data,\r\n                    billingAddress,\r\n                    coupons,\r\n                };\r\n            },\r\n    );\r\n\r\n    const getOrderOrThrow = createSelector(getOrder, (getOrder) => () => {\r\n        return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\r\n    });\r\n\r\n    const getOrderMeta = createSelector(\r\n        (state: OrderState) => state.meta,\r\n        (meta) => () => meta,\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: OrderState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const getPaymentId = createSelector(\r\n        (state: OrderState) => state.data?.payments,\r\n        (payments = []) =>\r\n            (methodId: string) => {\r\n                const currentPayment = payments.find(({ providerId }) => providerId === methodId);\r\n\r\n                return currentPayment?.paymentId;\r\n            },\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: OrderState) => !!state.statuses.isLoading,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne(\r\n        (\r\n            state: OrderState = DEFAULT_STATE,\r\n            billingAddress: OrderBillingAddressSelector,\r\n            coupons: CouponSelector,\r\n        ): OrderSelector => {\r\n            return {\r\n                getOrder: getOrder(state, { billingAddress, coupons }),\r\n                getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\r\n                getOrderMeta: getOrderMeta(state),\r\n                getLoadError: getLoadError(state),\r\n                getPaymentId: getPaymentId(state),\r\n                isLoading: isLoading(state),\r\n            };\r\n        },\r\n    );\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { RequestError } from '../common/error/errors';\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\r\n\r\nexport default interface StoreCreditSelector {\r\n    getApplyError(): RequestError | undefined;\r\n    isApplying(): boolean;\r\n}\r\n\r\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\r\n\r\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\r\n    const getApplyError = createSelector(\r\n        (state: StoreCreditState) => state.errors.applyError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isApplying = createSelector(\r\n        (state: StoreCreditState) => !!state.statuses.isApplying,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: StoreCreditState = DEFAULT_STATE): StoreCreditSelector => {\r\n        return {\r\n            getApplyError: getApplyError(state),\r\n            isApplying: isApplying(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\r\n\r\nexport default interface SubscriptionsSelector {\r\n    getUpdateError(): Error | undefined;\r\n    isUpdating(): boolean;\r\n}\r\n\r\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\r\n\r\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\r\n    const getUpdateError = createSelector(\r\n        (state: SubscriptionsState) => state.errors.updateError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isUpdating = createSelector(\r\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\r\n        (status) => () => status,\r\n    );\r\n\r\n    return memoizeOne((state: SubscriptionsState = DEFAULT_STATE): SubscriptionsSelector => {\r\n        return {\r\n            getUpdateError: getUpdateError(state),\r\n            isUpdating: isUpdating(state),\r\n        };\r\n    });\r\n}\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\n\r\nimport { createSelector } from '../common/selector';\r\n\r\nimport { Extension, ExtensionRegion } from './extension';\r\nimport { DEFAULT_STATE, ExtensionState } from './extension-state';\r\n\r\nexport interface ExtensionSelector {\r\n    getExtensions(): Extension[] | undefined;\r\n    getExtensionByRegion(region: ExtensionRegion): Extension | undefined;\r\n    getLoadError(): Error | undefined;\r\n    isLoading(): boolean;\r\n}\r\n\r\nexport type ExtensionSelectorFactory = (state: ExtensionState) => ExtensionSelector;\r\n\r\nexport function createExtensionSelectorFactory(): ExtensionSelectorFactory {\r\n    const getExtensions = createSelector(\r\n        (state: ExtensionState) => state.data,\r\n        (data) => () => data,\r\n    );\r\n\r\n    const getExtensionByRegion = createSelector(\r\n        (state: ExtensionState) => state.data,\r\n        (data) => (region: ExtensionRegion) => data?.find((e) => e.region === region),\r\n    );\r\n\r\n    const getLoadError = createSelector(\r\n        (state: ExtensionState) => state.errors.loadError,\r\n        (error) => () => error,\r\n    );\r\n\r\n    const isLoading = createSelector(\r\n        (state: ExtensionState) => state.statuses.isLoading,\r\n        (isLoading) => () => !!isLoading,\r\n    );\r\n\r\n    return memoizeOne((state: ExtensionState = DEFAULT_STATE): ExtensionSelector => {\r\n        return {\r\n            getExtensions: getExtensions(state),\r\n            getExtensionByRegion: getExtensionByRegion(state),\r\n            getLoadError: getLoadError(state),\r\n            isLoading: isLoading(state),\r\n        };\r\n    });\r\n}\r\n","import { createDataStore } from '@bigcommerce/data-store';\r\n\r\nimport { createRequestErrorFactory } from '../common/error';\r\n\r\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\r\nimport CheckoutStoreState from './checkout-store-state';\r\nimport createActionTransformer from './create-action-transformer';\r\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\r\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\r\n\r\nexport default function createCheckoutStore(\r\n    initialState: Partial<CheckoutStoreState> = {},\r\n    options?: CheckoutStoreOptions,\r\n): CheckoutStore {\r\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\r\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\r\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\r\n\r\n    return createDataStore(createCheckoutStoreReducer(), initialState, {\r\n        actionTransformer,\r\n        stateTransformer,\r\n        ...options,\r\n    });\r\n}\r\n","import { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { UnrecoverableError } from './errors';\r\nimport RequestErrorFactory from './request-error-factory';\r\n\r\nexport default function createRequestErrorFactory(): RequestErrorFactory {\r\n    const factory = new RequestErrorFactory();\r\n\r\n    const unrecoverableErrorTypes = [\r\n        'catalog_only',\r\n        'empty_cart',\r\n        'invalid_order_id',\r\n        'invalid_order_token',\r\n        'missing_order_token',\r\n        'missing_provider_token',\r\n        'missing_shipping_method',\r\n        'order_completion_error',\r\n        'order_could_not_be_finalized_error',\r\n        'order_create_failed',\r\n        'provider_fatal_error',\r\n        'provider_setup_error',\r\n        'stock_too_low',\r\n    ];\r\n\r\n    unrecoverableErrorTypes.forEach((type) => {\r\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\r\n    });\r\n\r\n    factory.register(\r\n        'invalid_payment_provider',\r\n        (response) => new PaymentMethodInvalidError(response),\r\n    );\r\n    factory.register(\r\n        'payment_config_not_found',\r\n        (response) => new PaymentMethodInvalidError(response),\r\n    );\r\n\r\n    return factory;\r\n}\r\n","import { Action } from '@bigcommerce/data-store';\r\nimport { from, Observable, Subscribable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { RequestErrorFactory } from '../common/error';\r\n\r\nexport default function createActionTransformer(\r\n    requestErrorFactory: RequestErrorFactory,\r\n): (action: Subscribable<Action>) => Observable<Action> {\r\n    return (action$) =>\r\n        from(action$).pipe(\r\n            catchError<Action, never>((action) => {\r\n                if (action instanceof Error || action.payload instanceof Error) {\r\n                    throw action;\r\n                }\r\n\r\n                if (isResponse(action.payload)) {\r\n                    const message = action.payload.body && action.payload.body.detail;\r\n\r\n                    throw {\r\n                        ...action,\r\n                        payload: requestErrorFactory.createError(action.payload, message),\r\n                    };\r\n                }\r\n\r\n                throw action;\r\n            }),\r\n        );\r\n}\r\n\r\nfunction isResponse(object: any) {\r\n    if (!object || typeof object !== 'object') {\r\n        return false;\r\n    }\r\n\r\n    return ['body', 'headers', 'status', 'statusText'].every((key) =>\r\n        Object.prototype.hasOwnProperty.call(object, key),\r\n    );\r\n}\r\n","import { Action, combineReducers, Reducer } from '@bigcommerce/data-store';\r\n\r\nimport { billingAddressReducer } from '../billing';\r\nimport { cartReducer } from '../cart';\r\nimport { checkoutButtonReducer } from '../checkout-buttons';\r\nimport { configReducer } from '../config';\r\nimport { couponReducer, giftCertificateReducer } from '../coupon';\r\nimport { customerReducer, customerStrategyReducer } from '../customer';\r\nimport { extensionReducer } from '../extension';\r\nimport { formFieldsReducer } from '../form';\r\nimport { countryReducer } from '../geography';\r\nimport { orderReducer } from '../order';\r\nimport { orderBillingAddressReducer } from '../order-billing-address';\r\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\r\nimport { instrumentReducer } from '../payment/instrument';\r\nimport { remoteCheckoutReducer } from '../remote-checkout';\r\nimport {\r\n    consignmentReducer,\r\n    pickupOptionReducer,\r\n    shippingCountryReducer,\r\n    shippingStrategyReducer,\r\n} from '../shipping';\r\nimport { signInEmailReducer } from '../signin-email';\r\nimport { storeCreditReducer } from '../store-credit';\r\nimport { subscriptionsReducer } from '../subscription';\r\n\r\nimport checkoutReducer from './checkout-reducer';\r\nimport CheckoutStoreState from './checkout-store-state';\r\n\r\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\r\n    return combineReducers({\r\n        billingAddress: billingAddressReducer,\r\n        cart: cartReducer,\r\n        checkout: checkoutReducer,\r\n        checkoutButton: checkoutButtonReducer,\r\n        config: configReducer,\r\n        consignments: consignmentReducer,\r\n        countries: countryReducer,\r\n        coupons: couponReducer,\r\n        customer: customerReducer,\r\n        customerStrategies: customerStrategyReducer,\r\n        extensions: extensionReducer,\r\n        formFields: formFieldsReducer,\r\n        giftCertificates: giftCertificateReducer,\r\n        instruments: instrumentReducer,\r\n        orderBillingAddress: orderBillingAddressReducer,\r\n        order: orderReducer,\r\n        payment: paymentReducer,\r\n        paymentMethods: paymentMethodReducer,\r\n        paymentStrategies: paymentStrategyReducer,\r\n        pickupOptions: pickupOptionReducer,\r\n        remoteCheckout: remoteCheckoutReducer,\r\n        shippingCountries: shippingCountryReducer,\r\n        shippingStrategies: shippingStrategyReducer,\r\n        signInEmail: signInEmailReducer,\r\n        subscriptions: subscriptionsReducer,\r\n        storeCredit: storeCreditReducer,\r\n    });\r\n}\r\n","import cacheAction from './cache-action';\r\nimport isActionOptions from './is-action-options';\r\n\r\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\r\n    _: object,\r\n    key: string,\r\n    descriptor: TypedPropertyDescriptor<TMethod>,\r\n): TypedPropertyDescriptor<TMethod> {\r\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\r\n\r\n    function decorateMethod(this: object, method: TMethod): TMethod {\r\n        return ((...args: any[]) => {\r\n            const lastArg = args[args.length - 1];\r\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\r\n\r\n            if (!useCache) {\r\n                return method.call(this, ...args);\r\n            }\r\n\r\n            const instanceMethods = memoizedMethods.get(this) || {};\r\n\r\n            if (!memoizedMethods.get(this)) {\r\n                memoizedMethods.set(this, instanceMethods);\r\n            }\r\n\r\n            if (!instanceMethods[key]) {\r\n                instanceMethods[key] = cacheAction(method);\r\n            }\r\n\r\n            return instanceMethods[key].call(this, ...args);\r\n        }) as TMethod;\r\n    }\r\n\r\n    return {\r\n        get() {\r\n            if (typeof descriptor.value !== 'function') {\r\n                throw new Error('Decorator should be used in functions');\r\n            }\r\n\r\n            const value = decorateMethod.call(this, descriptor.value);\r\n\r\n            Object.defineProperty(this, key, { ...descriptor, value });\r\n\r\n            return value;\r\n        },\r\n    };\r\n}\r\n","import ActionOptions from './action-options';\r\n\r\nexport default function isActionOptions(param: any): param is ActionOptions {\r\n    return param && typeof param.useCache === 'boolean';\r\n}\r\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\r\nimport { memoize } from '@bigcommerce/memoize';\r\nimport { from, Observable } from 'rxjs';\r\nimport { shareReplay } from 'rxjs/operators';\r\n\r\nexport default function cacheAction<TFunction extends CreateActionFn>(fn: TFunction): TFunction {\r\n    function decoratedFn(this: any, ...args: any[]) {\r\n        const action = fn.call(this, ...args);\r\n\r\n        if (action instanceof Observable) {\r\n            return from(action).pipe(shareReplay());\r\n        }\r\n\r\n        if (typeof action === 'function') {\r\n            return memoize((store) => from(action(store)).pipe(shareReplay()));\r\n        }\r\n\r\n        return action;\r\n    }\r\n\r\n    return memoize(decoratedFn as TFunction);\r\n}\r\n\r\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\r\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { filter } from 'lodash';\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport { InternalCheckoutSelectors } from '../checkout';\r\nimport { ActionOptions, cachableAction } from '../common/data-store';\r\nimport { RequestOptions } from '../common/http-request';\r\n\r\nimport {\r\n    LoadPaymentMethodAction,\r\n    LoadPaymentMethodsAction,\r\n    PaymentMethodActionType,\r\n} from './payment-method-actions';\r\nimport PaymentMethodRequestSender from './payment-method-request-sender';\r\nimport { isApplePayWindow } from './strategies/apple-pay';\r\n\r\nimport { PaymentMethod } from '.';\r\n\r\nconst APPLEPAYID = 'applepay';\r\n\r\nexport default class PaymentMethodActionCreator {\r\n    constructor(private _requestSender: PaymentMethodRequestSender) {}\r\n\r\n    loadPaymentMethods(\r\n        options?: RequestOptions,\r\n    ): ThunkAction<LoadPaymentMethodsAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\r\n                const state = store.getState();\r\n                const cart = state.cart.getCartOrThrow();\r\n\r\n                observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\r\n\r\n                this._requestSender\r\n                    .loadPaymentMethods({\r\n                        ...options,\r\n                        params: { ...options?.params, cartId: cart.id },\r\n                    })\r\n                    .then((response) => {\r\n                        const meta = {\r\n                            deviceSessionId: response.headers['x-device-session-id'],\r\n                            sessionHash: response.headers['x-session-hash'],\r\n                        };\r\n                        const methods = response.body;\r\n                        const filteredMethods = Array.isArray(methods)\r\n                            ? this._filterApplePay(methods)\r\n                            : methods;\r\n\r\n                        observer.next(\r\n                            createAction(\r\n                                PaymentMethodActionType.LoadPaymentMethodsSucceeded,\r\n                                filteredMethods,\r\n                                meta,\r\n                            ),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                PaymentMethodActionType.LoadPaymentMethodsFailed,\r\n                                response,\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    @cachableAction\r\n    loadPaymentMethod(\r\n        methodId: string,\r\n        options?: RequestOptions & ActionOptions,\r\n    ): ThunkAction<LoadPaymentMethodAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\r\n                const state = store.getState();\r\n                const cartId = state.cart.getCart()?.id;\r\n                const params = cartId ? { ...options?.params, cartId } : { ...options?.params };\r\n\r\n                observer.next(\r\n                    createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, {\r\n                        methodId,\r\n                    }),\r\n                );\r\n\r\n                this._requestSender\r\n                    .loadPaymentMethod(methodId, { ...options, params })\r\n                    .then((response) => {\r\n                        observer.next(\r\n                            createAction(\r\n                                PaymentMethodActionType.LoadPaymentMethodSucceeded,\r\n                                response.body,\r\n                                { methodId },\r\n                            ),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                PaymentMethodActionType.LoadPaymentMethodFailed,\r\n                                response,\r\n                                { methodId },\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    private _filterApplePay(methods: PaymentMethod[]): PaymentMethod[] {\r\n        return filter(methods, (method) => {\r\n            if (method.id === APPLEPAYID && !isApplePayWindow(window)) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n}\r\n","export interface ApplePayWindow extends Window {\r\n    ApplePaySession: ApplePaySession;\r\n}\r\n\r\nexport default function isApplePayWindow(window: Window): window is ApplePayWindow {\r\n    return 'ApplePaySession' in window;\r\n}\r\n\r\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\r\n    if (!isApplePayWindow(window)) {\r\n        throw new Error('Apple pay is not supported');\r\n    }\r\n}\r\n","enum ContentType {\r\n    Json = 'application/json',\r\n    JsonV1 = 'application/vnd.bc.v1+json',\r\n}\r\n\r\nexport default ContentType;\r\n","export const INTERNAL_USE_ONLY =\r\n    'This API endpoint is for internal use only and may change in the future';\r\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport {\r\n    ContentType,\r\n    INTERNAL_USE_ONLY,\r\n    RequestOptions,\r\n    SDK_VERSION_HEADERS,\r\n} from '../common/http-request';\r\n\r\nimport PaymentMethod from './payment-method';\r\n\r\nexport default class PaymentMethodRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    loadPaymentMethods({ timeout, params }: RequestOptions = {}): Promise<\r\n        Response<PaymentMethod[]>\r\n    > {\r\n        const url = '/api/storefront/payments';\r\n\r\n        return this._requestSender.get(url, {\r\n            timeout,\r\n            headers: {\r\n                Accept: ContentType.JsonV1,\r\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n                ...SDK_VERSION_HEADERS,\r\n            },\r\n            params,\r\n        });\r\n    }\r\n\r\n    loadPaymentMethod(\r\n        methodId: string,\r\n        { timeout, params }: RequestOptions = {},\r\n    ): Promise<Response<PaymentMethod>> {\r\n        const url = `/api/storefront/payments/${methodId}`;\r\n\r\n        return this._requestSender.get(url, {\r\n            timeout,\r\n            headers: {\r\n                Accept: ContentType.JsonV1,\r\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n                ...SDK_VERSION_HEADERS,\r\n            },\r\n            params,\r\n        });\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/script-loader\");","import { Action, createErrorAction } from '@bigcommerce/data-store';\r\nimport { concat, Observable, of, throwError } from 'rxjs';\r\n\r\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\r\n    type: TType,\r\n    error?: TPayload,\r\n    meta?: TMeta,\r\n): Observable<Action<TPayload, TMeta, TType>> {\r\n    if (isErrorAction(error)) {\r\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\r\n    }\r\n\r\n    return throwError(createErrorAction(type, error, meta));\r\n}\r\n\r\nfunction isErrorAction(action: any): action is Action {\r\n    return action && action.type && action.error;\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * This error should be thrown when a shopper tries to sign in as a guest but\r\n * they are already signed in as a registered customer.\r\n */\r\nexport default class UnableToContinueAsGuestError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message || 'Unable to continue as a guest because the customer is already signed in.',\r\n        );\r\n\r\n        this.name = 'UnableToContinueAsGuestError';\r\n        this.type = 'unable_to_continue_as_guest';\r\n    }\r\n}\r\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { Response } from '@bigcommerce/request-sender';\r\nimport { concat, defer, empty, merge, Observable, Observer, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\r\nimport { throwErrorAction } from '../common/error';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { RequestOptions } from '../common/http-request';\r\nimport { GuestCredentials } from '../customer';\r\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\r\n\r\nimport { BillingAddressUpdateRequestBody } from './billing-address';\r\nimport {\r\n    BillingAddressActionType,\r\n    ContinueAsGuestAction,\r\n    UpdateBillingAddressAction,\r\n} from './billing-address-actions';\r\nimport { UnableToContinueAsGuestError } from './errors';\r\n\r\nimport { BillingAddressRequestSender } from '.';\r\n\r\nexport default class BillingAddressActionCreator {\r\n    constructor(\r\n        private _requestSender: BillingAddressRequestSender,\r\n        private _subscriptionActionCreator: SubscriptionsActionCreator,\r\n    ) {}\r\n\r\n    continueAsGuest(\r\n        credentials: GuestCredentials,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const state = store.getState();\r\n            const checkout = state.checkout.getCheckout();\r\n\r\n            if (!checkout) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n            }\r\n\r\n            const customer = state.customer.getCustomer();\r\n\r\n            if (customer && !customer.isGuest) {\r\n                throw new UnableToContinueAsGuestError();\r\n            }\r\n\r\n            const billingAddress = state.billingAddress.getBillingAddress();\r\n\r\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\r\n\r\n            if (!billingAddress) {\r\n                billingAddressRequestBody = credentials;\r\n            } else {\r\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\r\n\r\n                billingAddressRequestBody = {\r\n                    ...existingBillingAddressRequestBody,\r\n                    ...credentials,\r\n                };\r\n            }\r\n\r\n            return merge(\r\n                concat(\r\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\r\n                    defer(async () => {\r\n                        const { body } = await this._createOrUpdateBillingAddress(\r\n                            checkout.id,\r\n                            billingAddressRequestBody,\r\n                            options,\r\n                        );\r\n\r\n                        return createAction(\r\n                            BillingAddressActionType.ContinueAsGuestSucceeded,\r\n                            body,\r\n                        );\r\n                    }),\r\n                ).pipe(\r\n                    catchError((error) =>\r\n                        throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error),\r\n                    ),\r\n                ),\r\n                this._updateCustomerConsent(credentials, options),\r\n            );\r\n        };\r\n    }\r\n\r\n    updateAddress(\r\n        address: Partial<BillingAddressUpdateRequestBody>,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\r\n                const state = store.getState();\r\n                const checkout = state.checkout.getCheckout();\r\n\r\n                if (!checkout) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\r\n\r\n                const billingAddress = state.billingAddress.getBillingAddress();\r\n\r\n                // If email is not present in the address provided by the client, then\r\n                // fall back to the stored email as it could have been set separately\r\n                // using a convenience method. We can't rely on billingAddress having\r\n                // an ID to consider that there's a preexisting email, as billingAddress\r\n                // object from Order doesn't have an ID.\r\n                const billingAddressRequestBody = {\r\n                    ...address,\r\n                    email:\r\n                        typeof address.email === 'undefined' && billingAddress\r\n                            ? billingAddress.email\r\n                            : address.email,\r\n                };\r\n\r\n                if (billingAddress && billingAddress.id) {\r\n                    billingAddressRequestBody.id = billingAddress.id;\r\n                }\r\n\r\n                this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\r\n                    .then(({ body }) => {\r\n                        observer.next(\r\n                            createAction(\r\n                                BillingAddressActionType.UpdateBillingAddressSucceeded,\r\n                                body,\r\n                            ),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                BillingAddressActionType.UpdateBillingAddressFailed,\r\n                                response,\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    private _updateCustomerConsent(\r\n        { email, acceptsAbandonedCartEmails, acceptsMarketingNewsletter }: GuestCredentials,\r\n        options?: RequestOptions,\r\n    ): Observable<UpdateSubscriptionsAction> {\r\n        if (\r\n            (acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\r\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)\r\n        ) {\r\n            return empty();\r\n        }\r\n\r\n        return this._subscriptionActionCreator.updateSubscriptions(\r\n            {\r\n                email,\r\n                acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\r\n                acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\r\n            },\r\n            options,\r\n        );\r\n    }\r\n\r\n    private _createOrUpdateBillingAddress(\r\n        checkoutId: string,\r\n        address: Partial<BillingAddressUpdateRequestBody>,\r\n        options?: RequestOptions,\r\n    ): Promise<Response<Checkout>> {\r\n        if (!address.id) {\r\n            return this._requestSender.createAddress(checkoutId, address, options);\r\n        }\r\n\r\n        return this._requestSender.updateAddress(checkoutId, address, options);\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { AddressRequestBody } from '../address';\r\nimport { Checkout } from '../checkout';\r\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\r\n\r\nimport { BillingAddressUpdateRequestBody } from './billing-address';\r\n\r\nconst DEFAULT_PARAMS = {\r\n    include: [\r\n        'cart.lineItems.physicalItems.options',\r\n        'cart.lineItems.digitalItems.options',\r\n        'customer',\r\n        'promotions.banners',\r\n    ].join(','),\r\n};\r\n\r\nexport default class BillingAddressRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    createAddress(\r\n        checkoutId: string,\r\n        address: Partial<AddressRequestBody>,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.post(url, {\r\n            body: address,\r\n            params: DEFAULT_PARAMS,\r\n            headers,\r\n            timeout,\r\n        });\r\n    }\r\n\r\n    updateAddress(\r\n        checkoutId: string,\r\n        address: Partial<BillingAddressUpdateRequestBody>,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const { id, ...body } = address;\r\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { BuyNowCartRequestBody, Cart } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\r\n\r\nexport default class CartRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    createBuyNowCart(\r\n        body: BuyNowCartRequestBody,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Cart>> {\r\n        const url = '/api/storefront/carts';\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.post(url, { body, headers, timeout });\r\n    }\r\n}\r\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, merge, Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { throwErrorAction } from '../common/error';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { RequestOptions } from '../common/http-request';\r\nimport { ConfigActionCreator } from '../config';\r\nimport { FormFieldsActionCreator } from '../form';\r\n\r\nimport { CheckoutRequestBody } from './checkout';\r\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\r\nimport CheckoutRequestSender from './checkout-request-sender';\r\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\r\n\r\nexport default class CheckoutActionCreator {\r\n    constructor(\r\n        private _checkoutRequestSender: CheckoutRequestSender,\r\n        private _configActionCreator: ConfigActionCreator,\r\n        private _formFieldsActionCreator: FormFieldsActionCreator,\r\n    ) {}\r\n\r\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\r\n        return concat(\r\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\r\n            merge(\r\n                this._configActionCreator.loadConfig({\r\n                    ...options,\r\n                    useCache: true,\r\n                    params: { ...options?.params, checkoutId: id },\r\n                }),\r\n                this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\r\n                defer(() =>\r\n                    this._checkoutRequestSender\r\n                        .loadCheckout(id, options)\r\n                        .then(({ body }) =>\r\n                            createAction(CheckoutActionType.LoadCheckoutSucceeded, body),\r\n                        ),\r\n                ),\r\n            ),\r\n        ).pipe(\r\n            catchError((error) => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error)),\r\n        );\r\n    }\r\n\r\n    loadDefaultCheckout(\r\n        options?: RequestOptions,\r\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            concat(\r\n                of(createAction(CheckoutActionType.LoadCheckoutRequested)),\r\n                merge(\r\n                    this._configActionCreator.loadConfig(),\r\n                    this._formFieldsActionCreator.loadFormFields({ ...options, useCache: true }),\r\n                ),\r\n                defer(async () => {\r\n                    const state = store.getState();\r\n                    const context = state.config.getContextConfig();\r\n\r\n                    if (!context || !context.checkoutId) {\r\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\r\n                    }\r\n\r\n                    const { body } = await this._checkoutRequestSender.loadCheckout(\r\n                        context.checkoutId,\r\n                        options,\r\n                    );\r\n\r\n                    return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\r\n                }),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error),\r\n                ),\r\n            );\r\n    }\r\n\r\n    updateCheckout(\r\n        body: CheckoutRequestBody,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            new Observable((observer) => {\r\n                const state = store.getState();\r\n                const checkout = state.checkout.getCheckout();\r\n\r\n                if (!checkout) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\r\n\r\n                this._checkoutRequestSender\r\n                    .updateCheckout(checkout.id, body, options)\r\n                    .then(({ body }) => {\r\n                        observer.next(\r\n                            createAction(CheckoutActionType.UpdateCheckoutSucceeded, body),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    loadCurrentCheckout(\r\n        options?: RequestOptions,\r\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const state = store.getState();\r\n            const checkout = state.checkout.getCheckout();\r\n\r\n            if (!checkout) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n            }\r\n\r\n            return this.loadCheckout(checkout.id, options);\r\n        };\r\n    }\r\n}\r\n","import { uniq } from 'lodash';\r\n\r\nexport default function joinIncludes<T>(includes: T[]): string {\r\n    return uniq(includes).join(',');\r\n}\r\n","import joinIncludes from './join-includes';\r\nimport mergeIncludes from './merge-includes';\r\n\r\n/**\r\n * Joins or merges a base list of includes with a set of additional includes.\r\n */\r\nexport default function joinOrMergeIncludes<T extends string>(\r\n    baseIncludes: T[],\r\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = [],\r\n): string {\r\n    return Array.isArray(includeDictionaryOrList)\r\n        ? joinIncludes([...baseIncludes, ...includeDictionaryOrList])\r\n        : mergeIncludes(baseIncludes, includeDictionaryOrList);\r\n}\r\n","import { difference, filter, keys, pickBy } from 'lodash';\r\n\r\nimport joinIncludes from './join-includes';\r\n\r\n/**\r\n * Merges includes given a list of base includes and a dictionary\r\n * of includes\r\n */\r\nexport default function mergeIncludes<T extends string>(\r\n    baseIncludes: T[],\r\n    includesDictionary?: { [key in T]?: boolean },\r\n): string {\r\n    const deletions = keys(pickBy(includesDictionary, (on) => !on));\r\n    const additions = keys(filter(includesDictionary));\r\n\r\n    return joinIncludes([...difference(baseIncludes, deletions), ...additions]);\r\n}\r\n","const CHECKOUT_DEFAULT_INCLUDES = [\r\n    'cart.lineItems.physicalItems.options',\r\n    'cart.lineItems.digitalItems.options',\r\n    'customer',\r\n    'customer.customerGroup',\r\n    'payments',\r\n    'promotions.banners',\r\n];\r\n\r\nexport default CHECKOUT_DEFAULT_INCLUDES;\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport { InternalErrorResponseBody } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { RequestError } from '../../common/error/errors';\r\n\r\n/**\r\n * Throw this error when we are unable to retrieve a checkout object from the\r\n * server using the provided ID. It could be because the shopper does not have\r\n * permission to view the object, or the ID itself is invalid.\r\n */\r\nexport default class CheckoutNotAvailableError extends RequestError {\r\n    constructor(response: Response<InternalErrorResponseBody>) {\r\n        super(response, { message: response.body.title });\r\n\r\n        this.name = 'CheckoutNotAvailableError';\r\n        this.type = 'checkout_not_available';\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport {\r\n    ContentType,\r\n    joinOrMergeIncludes,\r\n    RequestOptions,\r\n    SDK_VERSION_HEADERS,\r\n} from '../common/http-request';\r\n\r\nimport Checkout, { CheckoutRequestBody } from './checkout';\r\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\r\nimport CheckoutParams from './checkout-params';\r\nimport { CheckoutNotAvailableError } from './errors';\r\n\r\nexport default class CheckoutRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    loadCheckout(\r\n        id: string,\r\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const url = `/api/storefront/checkout/${id}`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender\r\n            .get<Checkout>(url, {\r\n                params: {\r\n                    include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\r\n                },\r\n                headers,\r\n                timeout,\r\n            })\r\n            .catch((error) => {\r\n                if (error.status >= 400 && error.status < 500) {\r\n                    throw new CheckoutNotAvailableError(error);\r\n                }\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    updateCheckout(\r\n        id: string,\r\n        body: CheckoutRequestBody,\r\n        { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const url = `/api/storefront/checkout/${id}`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.put(url, {\r\n            params: {\r\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\r\n            },\r\n            body,\r\n            headers,\r\n            timeout,\r\n        });\r\n    }\r\n}\r\n","import { isEqual } from 'lodash';\r\n\r\nimport { PartialDeep } from '../common/types';\r\n\r\nimport Cart from './cart';\r\n\r\nexport default class CartComparator {\r\n    isEqual(cartA: Cart, cartB: Cart): boolean {\r\n        return isEqual(this._normalize(cartA), this._normalize(cartB));\r\n    }\r\n\r\n    private _normalize(cart: Cart): PartialDeep<Cart> {\r\n        return {\r\n            cartAmount: cart.cartAmount,\r\n            currency: cart.currency,\r\n            id: cart.id,\r\n            lineItems: {\r\n                digitalItems: cart.lineItems.digitalItems\r\n                    .slice()\r\n                    .sort((itemA, itemB) =>\r\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\r\n                            `${itemB.productId}${itemB.variantId}`,\r\n                        ),\r\n                    )\r\n                    .map((item) => ({\r\n                        extendedSalePrice: item.extendedSalePrice,\r\n                        productId: item.productId,\r\n                        quantity: item.quantity,\r\n                        variantId: item.variantId,\r\n                    })),\r\n                giftCertificates: cart.lineItems.giftCertificates\r\n                    .slice()\r\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\r\n                    .map((item) => ({\r\n                        amount: item.amount,\r\n                        recipient: item.recipient,\r\n                    })),\r\n                physicalItems: cart.lineItems.physicalItems\r\n                    .slice()\r\n                    .sort((itemA, itemB) =>\r\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(\r\n                            `${itemB.productId}${itemB.variantId}`,\r\n                        ),\r\n                    )\r\n                    .map((item) => ({\r\n                        extendedSalePrice: item.extendedSalePrice,\r\n                        productId: item.productId,\r\n                        quantity: item.quantity,\r\n                        variantId: item.variantId,\r\n                        giftWrapping: item.giftWrapping,\r\n                    })),\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { ComparableCheckout } from '../../checkout';\r\nimport { StandardError } from '../../common/error/errors';\r\n\r\nexport default class CartChangedError extends StandardError {\r\n    /**\r\n     * @alpha\r\n     * Please note that this option is currently in an early stage of\r\n     * development. Therefore the API is unstable and not ready for public\r\n     * consumption.\r\n     */\r\n    data: { previous: ComparableCheckout; updated: ComparableCheckout };\r\n\r\n    constructor(previous: ComparableCheckout, updated: ComparableCheckout) {\r\n        super(\r\n            'An update to your shopping cart has been detected and your available shipping costs have been updated.',\r\n        );\r\n\r\n        this.name = 'CartChangedError';\r\n        this.type = 'cart_changed';\r\n        this.data = {\r\n            previous,\r\n            updated,\r\n        };\r\n    }\r\n}\r\n","import { isEqual, map } from 'lodash';\r\n\r\nimport { Cart, CartComparator } from '../cart';\r\nimport { CartChangedError } from '../cart/errors';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { RequestOptions } from '../common/http-request';\r\nimport { Coupon, GiftCertificate } from '../coupon';\r\n\r\nimport Checkout from './checkout';\r\nimport CheckoutRequestSender from './checkout-request-sender';\r\n\r\nexport type ComparableCheckout = Pick<\r\n    Checkout,\r\n    'outstandingBalance' | 'coupons' | 'giftCertificates'\r\n> & {\r\n    cart: Partial<Cart>;\r\n};\r\n\r\nexport default class CheckoutValidator {\r\n    constructor(private _checkoutRequestSender: CheckoutRequestSender) {}\r\n\r\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\r\n        if (!checkout) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n        }\r\n\r\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options).then((response) => {\r\n            const comparator = new CartComparator();\r\n\r\n            if (\r\n                checkout.outstandingBalance === response.body.outstandingBalance &&\r\n                this._compareCoupons(checkout.coupons, response.body.coupons) &&\r\n                this._compareGiftCertificates(\r\n                    checkout.giftCertificates,\r\n                    response.body.giftCertificates,\r\n                ) &&\r\n                comparator.isEqual(checkout.cart, response.body.cart)\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            throw new CartChangedError(\r\n                this._getComparableCheckout(checkout),\r\n                this._getComparableCheckout(response.body),\r\n            );\r\n        });\r\n    }\r\n\r\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\r\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\r\n    }\r\n\r\n    private _compareGiftCertificates(\r\n        giftCertificatesA: GiftCertificate[],\r\n        giftCertificatesB: GiftCertificate[],\r\n    ): boolean {\r\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\r\n    }\r\n\r\n    private _getComparableCheckout(checkout: Checkout): ComparableCheckout {\r\n        const { cart, coupons, giftCertificates, outstandingBalance } = checkout;\r\n\r\n        return {\r\n            cart: {\r\n                cartAmount: cart.cartAmount,\r\n                currency: cart.currency,\r\n                lineItems: cart.lineItems,\r\n            },\r\n            coupons,\r\n            giftCertificates,\r\n            outstandingBalance,\r\n        };\r\n    }\r\n}\r\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport { ActionOptions, cachableAction } from '../common/data-store';\r\nimport { RequestOptions } from '../common/http-request';\r\n\r\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\r\n\r\nimport { ConfigRequestSender } from '.';\r\n\r\nexport default class ConfigActionCreator {\r\n    constructor(private _configRequestSender: ConfigRequestSender) {}\r\n\r\n    @cachableAction\r\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\r\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\r\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\r\n\r\n            this._configRequestSender\r\n                .loadConfig(options)\r\n                .then((response) => {\r\n                    observer.next(\r\n                        createAction(ConfigActionType.LoadConfigSucceeded, response.body),\r\n                    );\r\n                    observer.complete();\r\n                })\r\n                .catch((response) => {\r\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\r\n                });\r\n        });\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { CheckoutNotAvailableError } from '../checkout/errors';\r\nimport {\r\n    ContentType,\r\n    INTERNAL_USE_ONLY,\r\n    RequestOptions,\r\n    SDK_VERSION_HEADERS,\r\n} from '../common/http-request';\r\n\r\nimport Config from './config';\r\n\r\nexport default class ConfigRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    loadConfig({ timeout, params }: RequestOptions = {}): Promise<Response<Config>> {\r\n        const url = '/api/storefront/checkout-settings';\r\n\r\n        return this._requestSender\r\n            .get<Config>(url, {\r\n                timeout,\r\n                headers: {\r\n                    Accept: ContentType.JsonV1,\r\n                    'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n                    ...SDK_VERSION_HEADERS,\r\n                },\r\n                params,\r\n            })\r\n            .catch((error) => {\r\n                if (error.status >= 400 && error.status < 500) {\r\n                    throw new CheckoutNotAvailableError(error);\r\n                }\r\n\r\n                throw error;\r\n            });\r\n    }\r\n}\r\n","import { ExecuteSucceededAction, SpamProtectionAction } from './spam-protection-actions';\r\n\r\nexport default function isSpamProtectionExecuteSucceededAction(\r\n    action: SpamProtectionAction,\r\n): action is ExecuteSucceededAction {\r\n    const succeededAction = action as ExecuteSucceededAction;\r\n\r\n    return (\r\n        typeof succeededAction === 'object' &&\r\n        typeof succeededAction.payload === 'object' &&\r\n        typeof succeededAction.payload.token === 'string'\r\n    );\r\n}\r\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, from, Observable, of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\r\nimport { throwErrorAction } from '../common/error';\r\nimport { RequestOptions } from '../common/http-request';\r\nimport {\r\n    isSpamProtectionExecuteSucceededAction,\r\n    SpamProtectionActionCreator,\r\n} from '../spam-protection';\r\n\r\nimport CustomerAccountRequestBody, { CustomerAddressRequestBody } from './customer-account';\r\nimport {\r\n    CreateCustomerAction,\r\n    CreateCustomerAddressAction,\r\n    CustomerActionType,\r\n    SignInCustomerAction,\r\n    SignOutCustomerAction,\r\n} from './customer-actions';\r\nimport CustomerCredentials from './customer-credentials';\r\nimport CustomerRequestSender from './customer-request-sender';\r\n\r\nexport default class CustomerActionCreator {\r\n    constructor(\r\n        private _customerRequestSender: CustomerRequestSender,\r\n        private _checkoutActionCreator: CheckoutActionCreator,\r\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\r\n    ) {}\r\n\r\n    createCustomer(\r\n        customerAccount: CustomerAccountRequestBody,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<CreateCustomerAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const state = store.getState();\r\n            const config = state.config.getStoreConfigOrThrow();\r\n            const { isStorefrontSpamProtectionEnabled } = config.checkoutSettings;\r\n\r\n            const createCustomer = (token?: string) =>\r\n                from(\r\n                    this._customerRequestSender.createAccount(\r\n                        { ...customerAccount, token },\r\n                        options,\r\n                    ),\r\n                ).pipe(\r\n                    switchMap(() =>\r\n                        concat(\r\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\r\n                            of(createAction(CustomerActionType.CreateCustomerSucceeded)),\r\n                        ),\r\n                    ),\r\n                );\r\n\r\n            return concat(\r\n                of(createAction(CustomerActionType.CreateCustomerRequested)),\r\n                isStorefrontSpamProtectionEnabled\r\n                    ? from(this._spamProtectionActionCreator.execute()(store)).pipe(\r\n                          switchMap((action) =>\r\n                              isSpamProtectionExecuteSucceededAction(action)\r\n                                  ? concat(of(action), createCustomer(action.payload?.token))\r\n                                  : of(action),\r\n                          ),\r\n                      )\r\n                    : createCustomer(),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(CustomerActionType.CreateCustomerFailed, error),\r\n                ),\r\n            );\r\n        };\r\n    }\r\n\r\n    createAddress(\r\n        customerAddress: CustomerAddressRequestBody,\r\n        options?: RequestOptions,\r\n    ): Observable<CreateCustomerAddressAction> {\r\n        return concat(\r\n            of(createAction(CustomerActionType.CreateCustomerAddressRequested)),\r\n            defer(async () => {\r\n                const { body } = await this._customerRequestSender.createAddress(\r\n                    customerAddress,\r\n                    options,\r\n                );\r\n\r\n                return createAction(CustomerActionType.CreateCustomerAddressSucceeded, body);\r\n            }),\r\n        ).pipe(\r\n            catchError((error) =>\r\n                throwErrorAction(CustomerActionType.CreateCustomerAddressFailed, error),\r\n            ),\r\n        );\r\n    }\r\n\r\n    signInCustomer(\r\n        credentials: CustomerCredentials,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            concat(\r\n                of(createAction(CustomerActionType.SignInCustomerRequested)),\r\n                from(this._customerRequestSender.signInCustomer(credentials, options)).pipe(\r\n                    switchMap(({ body }) =>\r\n                        concat(\r\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\r\n                            of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data)),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(CustomerActionType.SignInCustomerFailed, error),\r\n                ),\r\n            );\r\n    }\r\n\r\n    signOutCustomer(\r\n        options?: RequestOptions,\r\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            concat(\r\n                of(createAction(CustomerActionType.SignOutCustomerRequested)),\r\n                from(this._customerRequestSender.signOutCustomer(options)).pipe(\r\n                    switchMap(({ body }) =>\r\n                        concat(\r\n                            this._checkoutActionCreator.loadCurrentCheckout(options)(store),\r\n                            of(\r\n                                createAction(\r\n                                    CustomerActionType.SignOutCustomerSucceeded,\r\n                                    body.data,\r\n                                ),\r\n                            ),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(CustomerActionType.SignOutCustomerFailed, error),\r\n                ),\r\n            );\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\r\n\r\nimport Customer from './customer';\r\nimport { CustomerAccountInternalRequestBody, CustomerAddressRequestBody } from './customer-account';\r\nimport CustomerCredentials from './customer-credentials';\r\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\r\n\r\nexport default class CustomerRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    createAccount(\r\n        customerAccount: CustomerAccountInternalRequestBody,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<{}>> {\r\n        const url = '/api/storefront/customer';\r\n\r\n        return this._requestSender.post(url, {\r\n            timeout,\r\n            headers: SDK_VERSION_HEADERS,\r\n            body: customerAccount,\r\n        });\r\n    }\r\n\r\n    createAddress(\r\n        customerAddress: CustomerAddressRequestBody,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Customer>> {\r\n        const url = `/api/storefront/customer-address`;\r\n\r\n        return this._requestSender.post<Customer>(url, {\r\n            timeout,\r\n            headers: SDK_VERSION_HEADERS,\r\n            body: customerAddress,\r\n        });\r\n    }\r\n\r\n    signInCustomer(\r\n        credentials: CustomerCredentials,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<InternalCustomerResponseBody>> {\r\n        const url = '/internalapi/v1/checkout/customer';\r\n\r\n        return this._requestSender.post(url, {\r\n            timeout,\r\n            headers: SDK_VERSION_HEADERS,\r\n            body: credentials,\r\n        });\r\n    }\r\n\r\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<\r\n        Response<InternalCustomerResponseBody>\r\n    > {\r\n        const url = '/internalapi/v1/checkout/customer';\r\n\r\n        return this._requestSender.delete(url, { timeout, headers: SDK_VERSION_HEADERS });\r\n    }\r\n}\r\n","import { createAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { ActionOptions, cachableAction } from '../common/data-store';\r\nimport { throwErrorAction } from '../common/error';\r\nimport { RequestOptions } from '../common/http-request';\r\n\r\nimport { FormFieldsActionType, LoadFormFieldsAction } from './form-fields-actions';\r\nimport FormFieldsRequestSender from './form-fields-request-sender';\r\n\r\nexport default class FormFieldsActionCreator {\r\n    constructor(private _formFieldsRequestSender: FormFieldsRequestSender) {}\r\n\r\n    @cachableAction\r\n    loadFormFields(options?: RequestOptions & ActionOptions): Observable<LoadFormFieldsAction> {\r\n        return concat(\r\n            of(createAction(FormFieldsActionType.LoadFormFieldsRequested)),\r\n            defer(async () => {\r\n                const { body } = await this._formFieldsRequestSender.loadFields(options);\r\n\r\n                return createAction(FormFieldsActionType.LoadFormFieldsSucceeded, body);\r\n            }),\r\n        ).pipe(\r\n            catchError((response) =>\r\n                throwErrorAction(FormFieldsActionType.LoadFormFieldsFailed, response),\r\n            ),\r\n        );\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport {\r\n    ContentType,\r\n    INTERNAL_USE_ONLY,\r\n    RequestOptions,\r\n    SDK_VERSION_HEADERS,\r\n} from '../common/http-request';\r\n\r\nimport { FormFields } from './form-field';\r\n\r\nexport default class FormFieldsRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    loadFields({ timeout }: RequestOptions = {}): Promise<Response<FormFields>> {\r\n        const url = '/api/storefront/form-fields';\r\n\r\n        return this._requestSender.get(url, {\r\n            timeout,\r\n            headers: {\r\n                Accept: ContentType.JsonV1,\r\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n                ...SDK_VERSION_HEADERS,\r\n            },\r\n        });\r\n    }\r\n}\r\n","export default class CancellablePromise<T> {\r\n    promise: Promise<T>;\r\n    cancel!: (reason?: any) => void;\r\n\r\n    constructor(promise: Promise<T>) {\r\n        const cancellable = new Promise<T>((_, reject) => {\r\n            this.cancel = reject;\r\n        });\r\n\r\n        this.promise = Promise.race([promise, cancellable]);\r\n    }\r\n}\r\n","import { StandardError } from '../../error/errors';\r\n\r\nexport default class UnexpectedDetachmentError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'Unable to proceed because the required element is unexpectedly detached from the page.',\r\n        );\r\n\r\n        this.name = 'UnexpectedDetachmentError';\r\n        this.type = 'unexpected_detachment';\r\n    }\r\n}\r\n","import { CancellablePromise } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { UnexpectedDetachmentError } from './errors';\r\nimport { MutationObserverFactory } from './mutation-observer';\r\n\r\nexport default class DetachmentObserver {\r\n    constructor(private _mutationObserver: MutationObserverFactory) {}\r\n\r\n    async ensurePresence<T>(targets: Node[], promise: Promise<T>): Promise<T> {\r\n        const cancellable = new CancellablePromise(promise);\r\n\r\n        const observer = this._mutationObserver.create((mutationsList) => {\r\n            mutationsList.forEach((mutation) => {\r\n                const removedTargets = Array.from(mutation.removedNodes).filter((node) =>\r\n                    targets.some((target) => node === target || node.contains(target)),\r\n                );\r\n\r\n                if (removedTargets.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                cancellable.cancel(new UnexpectedDetachmentError());\r\n            });\r\n        });\r\n\r\n        observer.observe(document.body, { childList: true, subtree: true });\r\n\r\n        try {\r\n            const output = await cancellable.promise;\r\n\r\n            observer.disconnect();\r\n\r\n            return output;\r\n        } catch (error) {\r\n            observer.disconnect();\r\n\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n","export interface MutationObeserverCreator {\r\n    prototype: MutationObserver;\r\n    new (callback: MutationCallback): MutationObserver;\r\n}\r\n\r\nexport interface MutationObserverWindow extends Window {\r\n    MutationObserver: MutationObeserverCreator;\r\n}\r\n\r\nexport class MutationObserverFactory {\r\n    constructor(private _window: MutationObserverWindow = window as MutationObserverWindow) {}\r\n\r\n    create(callback: MutationCallback): MutationObserver {\r\n        return new this._window.MutationObserver(callback);\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\n/**\r\n * This error should be thrown when a method is unable to proceed because the\r\n * caller has not provided all the arguments according to their requirements,\r\n * i.e.: if an argument is missing or it is not the expected data type.\r\n */\r\nexport default class InvalidArgumentError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(message || 'Invalid arguments have been provided.');\r\n\r\n        this.name = 'InvalidArgumentError';\r\n        this.type = 'invalid_argument';\r\n    }\r\n}\r\n","import { InvalidArgumentError } from '../error/errors';\r\n\r\nimport Url from './url';\r\n\r\nexport default function parseUrl(url: string): Url {\r\n    if (!/^(https?:)?\\/\\//.test(url)) {\r\n        throw new InvalidArgumentError('The provided URL must be absolute.');\r\n    }\r\n\r\n    // new URL() is not supported in IE11, use anchor tag instead\r\n    const anchor = document.createElement('a');\r\n\r\n    anchor.href = url;\r\n\r\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\r\n    // even if the port number is not specified in the URL.\r\n    const port =\r\n        anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ? anchor.port : '';\r\n\r\n    return {\r\n        hash: anchor.hash,\r\n        hostname: anchor.hostname,\r\n        href: anchor.href,\r\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? `:${port}` : ''}`,\r\n        pathname: anchor.pathname,\r\n        port,\r\n        protocol: anchor.protocol,\r\n        search: anchor.search,\r\n    };\r\n}\r\n","import IframeEvent from './iframe-event';\r\n\r\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\r\n    object: any,\r\n    type: TType,\r\n): object is TEvent {\r\n    return object.type === type;\r\n}\r\n","import { fromEvent } from 'rxjs';\r\nimport { filter, map, take } from 'rxjs/operators';\r\n\r\nimport { parseUrl } from '../url';\r\n\r\nimport IframeEvent from './iframe-event';\r\nimport isIframeEvent from './is-iframe-event';\r\n\r\nexport interface IframeEventPostOptions<\r\n    TSuccessEvent extends IframeEvent,\r\n    TErrorEvent extends IframeEvent,\r\n> {\r\n    errorType?: TErrorEvent['type'];\r\n    successType?: TSuccessEvent['type'];\r\n}\r\n\r\nexport default class IframeEventPoster<TEvent> {\r\n    private _targetOrigin: string;\r\n\r\n    constructor(targetOrigin: string, private _targetWindow?: Window) {\r\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\r\n    }\r\n\r\n    post(event: TEvent): void;\r\n    post<\r\n        TSuccessEvent extends IframeEvent = IframeEvent,\r\n        TErrorEvent extends IframeEvent = IframeEvent,\r\n    >(\r\n        event: TEvent,\r\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\r\n    ): Promise<TSuccessEvent>;\r\n    post<\r\n        TSuccessEvent extends IframeEvent = IframeEvent,\r\n        TErrorEvent extends IframeEvent = IframeEvent,\r\n    >(\r\n        event: TEvent,\r\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>,\r\n    ): Promise<TSuccessEvent> | void {\r\n        const targetWindow = this._targetWindow;\r\n\r\n        if (window === targetWindow) {\r\n            return;\r\n        }\r\n\r\n        if (!targetWindow) {\r\n            throw new Error('Unable to post message because target window is not set.');\r\n        }\r\n\r\n        const result =\r\n            options &&\r\n            fromEvent<MessageEvent>(window, 'message')\r\n                .pipe(\r\n                    filter(\r\n                        (event) =>\r\n                            event.origin === this._targetOrigin &&\r\n                            isIframeEvent(event.data, event.data.type) &&\r\n                            [options.successType, options.errorType].indexOf(event.data.type) !==\r\n                                -1,\r\n                    ),\r\n                    map((event) => {\r\n                        if (options.errorType === event.data.type) {\r\n                            throw event.data;\r\n                        }\r\n\r\n                        return event.data;\r\n                    }),\r\n                    take(1),\r\n                )\r\n                .toPromise();\r\n\r\n        targetWindow.postMessage(event, this._targetOrigin);\r\n\r\n        return result;\r\n    }\r\n\r\n    setTarget(window: Window) {\r\n        this._targetWindow = window;\r\n    }\r\n}\r\n","/**\r\n * Decorates a class or a method by binding all its prototype methods or itself\r\n * to the calling instance respectively.\r\n */\r\nfunction bindDecorator<T extends Method>(\r\n    target: object,\r\n    key: string,\r\n    descriptor: TypedPropertyDescriptor<T>,\r\n): TypedPropertyDescriptor<T>;\r\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\r\n\r\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\r\n    if (!key || !descriptor) {\r\n        return bindClassDecorator(target);\r\n    }\r\n\r\n    return bindMethodDecorator(target, key, descriptor);\r\n}\r\n\r\nexport default bindDecorator;\r\n\r\n/**\r\n * Decorates a class by binding all its prototype methods to the calling\r\n * instance.\r\n */\r\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\r\n    const decoratedTarget = class extends target {};\r\n\r\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\r\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\r\n\r\n        if (!descriptor || key === 'constructor') {\r\n            return;\r\n        }\r\n\r\n        Object.defineProperty(\r\n            decoratedTarget.prototype,\r\n            key,\r\n            bindMethodDecorator(target.prototype, key, descriptor),\r\n        );\r\n    });\r\n\r\n    return decoratedTarget;\r\n}\r\n\r\n/**\r\n * Decorates a method by binding it to the calling instance.\r\n */\r\nexport function bindMethodDecorator<T extends Method>(\r\n    _: object,\r\n    key: string,\r\n    descriptor: TypedPropertyDescriptor<T>,\r\n): TypedPropertyDescriptor<T> {\r\n    if (typeof descriptor.value !== 'function') {\r\n        return descriptor;\r\n    }\r\n\r\n    let method: T = descriptor.value;\r\n\r\n    return {\r\n        get() {\r\n            const boundMethod = method.bind(this) as T;\r\n\r\n            Object.defineProperty(this, key, {\r\n                ...descriptor,\r\n                value: boundMethod,\r\n            });\r\n\r\n            return boundMethod;\r\n        },\r\n        set(value) {\r\n            method = value;\r\n        },\r\n    };\r\n}\r\n\r\nexport type Constructor<T> = new (...args: any[]) => T;\r\nexport type Method = (...args: any[]) => any;\r\n","import { appendWww, parseUrl } from '../url';\r\nimport { bindDecorator as bind } from '../utility';\r\n\r\nimport { IframeEventMap } from './iframe-event';\r\nimport isIframeEvent from './is-iframe-event';\r\n\r\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\r\n    private _isListening: boolean;\r\n    private _listeners: EventListeners<TEventMap>;\r\n    private _sourceOrigins: string[];\r\n\r\n    constructor(sourceOrigin: string) {\r\n        this._sourceOrigins = [\r\n            parseUrl(sourceOrigin).origin,\r\n            appendWww(parseUrl(sourceOrigin)).origin,\r\n        ];\r\n        this._isListening = false;\r\n        this._listeners = {};\r\n    }\r\n\r\n    listen(): void {\r\n        if (this._isListening) {\r\n            return;\r\n        }\r\n\r\n        this._isListening = true;\r\n\r\n        window.addEventListener('message', this._handleMessage);\r\n    }\r\n\r\n    stopListen(): void {\r\n        if (!this._isListening) {\r\n            return;\r\n        }\r\n\r\n        this._isListening = false;\r\n\r\n        window.removeEventListener('message', this._handleMessage);\r\n    }\r\n\r\n    addListener<TType extends keyof TEventMap>(\r\n        type: TType,\r\n        listener: (event: TEventMap[TType]) => void,\r\n    ): void {\r\n        let listeners = this._listeners[type];\r\n\r\n        if (!listeners) {\r\n            this._listeners[type] = listeners = [];\r\n        }\r\n\r\n        if (listeners.indexOf(listener) === -1) {\r\n            listeners.push(listener);\r\n        }\r\n    }\r\n\r\n    removeListener<TType extends keyof TEventMap>(\r\n        type: TType,\r\n        listener: (event: TEventMap[TType]) => void,\r\n    ): void {\r\n        const listeners = this._listeners[type];\r\n\r\n        if (!listeners) {\r\n            return;\r\n        }\r\n\r\n        const index = listeners.indexOf(listener);\r\n\r\n        if (index >= 0) {\r\n            listeners.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\r\n        const listeners = this._listeners[event.type];\r\n\r\n        if (!listeners) {\r\n            return;\r\n        }\r\n\r\n        listeners.forEach((listener) => listener(event));\r\n    }\r\n\r\n    @bind\r\n    private _handleMessage(event: MessageEvent): void {\r\n        if (\r\n            this._sourceOrigins.indexOf(event.origin) === -1 ||\r\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.trigger(event.data);\r\n    }\r\n}\r\n\r\ntype EventListeners<TEventMap> = {\r\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\r\n};\r\n","import parseUrl from './parse-url';\r\nimport Url from './url';\r\n\r\nexport default function appendWww(url: Url): Url {\r\n    return parseUrl(\r\n        url.hostname.indexOf('www') === 0\r\n            ? url.href\r\n            : url.href.replace(url.hostname, `www.${url.hostname}`),\r\n    );\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * Throw this error if the shopper chooses not to complete the spam protection\r\n * challenge (i.e.: they close the reCaptcha window).\r\n */\r\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\r\n    constructor() {\r\n        super(\"You haven't complete our spam protection challenge. Please try again.\");\r\n\r\n        this.name = 'SpamProtectionChallengeNotCompletedError';\r\n        this.type = 'spam_protection_challenge_not_completed';\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * Throw this error if the shopper chooses not to complete the spam protection\r\n * challenge (i.e.: they close the reCaptcha window).\r\n */\r\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\r\n    constructor() {\r\n        super('Please complete our human verification challenge and try again.');\r\n\r\n        this.name = 'CardingProtectionChallengeNotCompletedError';\r\n        this.type = 'carding_protection_challenge_not_completed';\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * Throw this error if we fail to complete the required spam protection\r\n * verification due to an unknown reason.\r\n */\r\nexport default class CardingProtectionFailedError extends StandardError {\r\n    constructor() {\r\n        super('We were not able to verify that you are not a robot. Please try again.');\r\n\r\n        this.name = 'CardingProtectionFailedError';\r\n        this.type = 'carding_protection_failed';\r\n    }\r\n}\r\n","import { switchMap, take } from 'rxjs/operators';\r\n\r\nimport { RequestError } from '../common/error/errors';\r\nimport { PaymentAdditionalAction } from '../payment';\r\n\r\nimport {\r\n    CardingProtectionChallengeNotCompletedError,\r\n    CardingProtectionFailedError,\r\n    SpamProtectionChallengeNotCompletedError,\r\n} from './errors';\r\nimport GoogleRecaptcha from './google-recaptcha';\r\n\r\nexport default class PaymentHumanVerificationHandler {\r\n    constructor(private _googleRecaptcha: GoogleRecaptcha) {}\r\n\r\n    handle(error: Error): Promise<PaymentAdditionalAction>;\r\n    handle(id: string, key: string): Promise<PaymentAdditionalAction>;\r\n    async handle(errorOrId: Error | string, key?: string): Promise<PaymentAdditionalAction> {\r\n        if (typeof errorOrId === 'string') {\r\n            return this.handleWithRecaptchaSitekey(errorOrId, key);\r\n        }\r\n\r\n        return this.handleWithPaymentHumanVerificationRequestError(errorOrId);\r\n    }\r\n\r\n    private async handleWithPaymentHumanVerificationRequestError(\r\n        error: Error,\r\n    ): Promise<PaymentAdditionalAction> {\r\n        if (!this._isPaymentHumanVerificationRequest(error)) {\r\n            throw error;\r\n        }\r\n\r\n        await this._initialize(error.body.additional_action_required.data.key);\r\n\r\n        return this._performRecaptcha();\r\n    }\r\n\r\n    private async handleWithRecaptchaSitekey(\r\n        id: string,\r\n        key?: string,\r\n    ): Promise<PaymentAdditionalAction> {\r\n        if (id !== 'recaptcha_v2') {\r\n            throw Error('Human verification method is not supported.');\r\n        }\r\n\r\n        if (!key) {\r\n            throw Error('Recaptcha site key is missing.');\r\n        }\r\n\r\n        await this._initialize(key);\r\n\r\n        return this._performRecaptcha();\r\n    }\r\n\r\n    private _performRecaptcha(): Promise<PaymentAdditionalAction> {\r\n        return this._googleRecaptcha\r\n            .execute()\r\n            .pipe(take(1))\r\n            .pipe(\r\n                switchMap(async ({ error, token }) => {\r\n                    if (error instanceof SpamProtectionChallengeNotCompletedError) {\r\n                        throw new CardingProtectionChallengeNotCompletedError();\r\n                    }\r\n\r\n                    if (error || !token) {\r\n                        throw new CardingProtectionFailedError();\r\n                    }\r\n\r\n                    return {\r\n                        type: 'recaptcha_v2_verification',\r\n                        data: {\r\n                            human_verification_token: token,\r\n                        },\r\n                    };\r\n                }),\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    private _initialize(recaptchaSitekey: string): Promise<void> {\r\n        const cardingProtectionElementId = 'cardingProtectionContainer';\r\n\r\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\r\n\r\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\r\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\r\n        }\r\n\r\n        cardingProtectionElement = document.createElement('div');\r\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\r\n        document.body.appendChild(cardingProtectionElement);\r\n\r\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\r\n    }\r\n\r\n    private _isPaymentHumanVerificationRequest(error: Error): error is RequestError {\r\n        const { additional_action_required, status } = (error as RequestError).body || {};\r\n\r\n        return (\r\n            status === 'additional_action_required' &&\r\n            additional_action_required &&\r\n            additional_action_required.type === 'recaptcha_v2_verification'\r\n        );\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\nexport enum NotInitializedErrorType {\r\n    CheckoutButtonNotInitialized,\r\n    CustomerNotInitialized,\r\n    PaymentNotInitialized,\r\n    ShippingNotInitialized,\r\n    SpamProtectionNotInitialized,\r\n}\r\n\r\n/**\r\n * Throw this error if a method requires a certain initialization call to be\r\n * made first. Some objects can be constructed but they cannot be used until a\r\n * separate initialization call is made.\r\n */\r\nexport default class NotInitializedError extends StandardError {\r\n    constructor(public subtype: NotInitializedErrorType) {\r\n        super(getErrorMessage(subtype));\r\n\r\n        this.name = 'NotInitializedError';\r\n        this.type = 'not_initialized';\r\n    }\r\n}\r\n\r\nfunction getErrorMessage(type: NotInitializedErrorType): string {\r\n    switch (type) {\r\n        case NotInitializedErrorType.CustomerNotInitialized:\r\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\r\n\r\n        case NotInitializedErrorType.PaymentNotInitialized:\r\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\r\n\r\n        case NotInitializedErrorType.ShippingNotInitialized:\r\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\r\n\r\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\r\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\r\n\r\n        default:\r\n            return 'Unable to proceed because the required component has not been initialized.';\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * Throw this error if we fail to complete the required spam protection\r\n * verification due to an unknown reason.\r\n */\r\nexport default class SpamProtectionFailedError extends StandardError {\r\n    constructor() {\r\n        super('We were not able to complete your spam protection verification. Please try again.');\r\n\r\n        this.name = 'SpamProtectionFailedError';\r\n        this.type = 'spam_protection_failed';\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * Throw this error if spam protection is not loaded when trying to\r\n * complete the required spam protection verification.\r\n */\r\nexport default class SpamProtectionNotLoadedError extends StandardError {\r\n    constructor() {\r\n        super('Spam protection is not loaded. Please try again.');\r\n\r\n        this.name = 'SpamProtectionNotLoadedError';\r\n        this.type = 'spam_protection_failed';\r\n    }\r\n}\r\n","import { memoize } from '@bigcommerce/memoize';\r\nimport { defer, Observable, of, Subject, throwError } from 'rxjs';\r\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\r\n\r\nimport { MutationObserverFactory } from '../common/dom';\r\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\r\n\r\nimport {\r\n    SpamProtectionChallengeNotCompletedError,\r\n    SpamProtectionFailedError,\r\n    SpamProtectionNotLoadedError,\r\n} from './errors';\r\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\r\n\r\nconst TIMEOUT = 7000;\r\nconst RETRY_INTERVAL = 250;\r\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\r\n\r\nexport interface RecaptchaResult {\r\n    error?: Error;\r\n    token?: string;\r\n}\r\n\r\nexport default class GoogleRecaptcha {\r\n    private _event$?: Subject<RecaptchaResult>;\r\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\r\n    private _memoized: (\r\n        recaptcha: ReCaptchaV2.ReCaptcha,\r\n        sitekey: string,\r\n        container: HTMLElement | null,\r\n    ) => Subject<RecaptchaResult>;\r\n    private _widgetId?: number;\r\n\r\n    constructor(\r\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\r\n        private mutationObserverFactory: MutationObserverFactory,\r\n    ) {\r\n        this._memoized = memoize(\r\n            (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\r\n                const event$ = new Subject<RecaptchaResult>();\r\n\r\n                if (!container) {\r\n                    throw new Error();\r\n                }\r\n\r\n                this._widgetId = recaptcha.render(container.id, {\r\n                    sitekey,\r\n                    size: 'invisible',\r\n                    callback: () => {\r\n                        event$.next({\r\n                            token: recaptcha.getResponse(this._widgetId),\r\n                        });\r\n                        recaptcha.reset(this._widgetId);\r\n                    },\r\n                    'error-callback': () => {\r\n                        event$.next({\r\n                            error: new SpamProtectionFailedError(),\r\n                        });\r\n                    },\r\n                });\r\n\r\n                return event$;\r\n            },\r\n            { isEqual: (a, b) => a === b },\r\n        );\r\n    }\r\n\r\n    load(containerId: string, sitekey: string): Promise<void> {\r\n        return this.googleRecaptchaScriptLoader.load().then((recaptcha) => {\r\n            if (recaptcha) {\r\n                this._event$ = this._memoized(\r\n                    recaptcha,\r\n                    sitekey,\r\n                    document.getElementById(containerId),\r\n                );\r\n                this._recaptcha = recaptcha;\r\n            }\r\n        });\r\n    }\r\n\r\n    execute(): Observable<RecaptchaResult> {\r\n        return defer(() => {\r\n            const event$ = this._event$;\r\n            const recaptcha = this._recaptcha;\r\n\r\n            if (!event$ || !recaptcha) {\r\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\r\n            }\r\n\r\n            return defer(() => {\r\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\r\n\r\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\r\n            }).pipe(\r\n                retryWhen((errors) =>\r\n                    errors.pipe(\r\n                        delay(RETRY_INTERVAL),\r\n                        switchMap((error, index) =>\r\n                            index < MAX_RETRIES ? of(error) : throwError(error),\r\n                        ),\r\n                    ),\r\n                ),\r\n                switchMap((element) => {\r\n                    this._watchRecaptchaChallengeWindow(event$, element);\r\n                    recaptcha.execute(this._widgetId);\r\n\r\n                    return event$;\r\n                }),\r\n                catchError((error) => of({ error })),\r\n            );\r\n        });\r\n    }\r\n\r\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\r\n        const iframeContainer = element.parentElement;\r\n\r\n        if (!iframeContainer) {\r\n            throw new SpamProtectionNotLoadedError();\r\n        }\r\n\r\n        const container = iframeContainer.parentElement;\r\n\r\n        if (!container) {\r\n            throw new SpamProtectionNotLoadedError();\r\n        }\r\n\r\n        this.mutationObserverFactory\r\n            .create(() => {\r\n                // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\r\n                if (container.style.visibility === 'hidden') {\r\n                    event.next({\r\n                        error: new SpamProtectionChallengeNotCompletedError(),\r\n                    });\r\n                }\r\n            })\r\n            .observe(container, { attributes: true, attributeFilter: ['style'] });\r\n    }\r\n}\r\n","import { ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nexport default class GoogleRecaptchaScriptLoader {\r\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha | undefined>;\r\n\r\n    constructor(\r\n        private _scriptLoader: ScriptLoader,\r\n        private _window: GoogleRecaptchaWindow = window,\r\n    ) {}\r\n\r\n    load(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\r\n        if (!this._loadPromise) {\r\n            this._loadPromise = this._loadScript();\r\n        }\r\n\r\n        return this._loadPromise;\r\n    }\r\n\r\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha | undefined> {\r\n        const callbackName = 'initRecaptcha';\r\n        const params = [`onload=${callbackName}`, 'render=explicit'].join('&');\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\r\n\r\n            this._scriptLoader\r\n                .loadScript(`//www.google.com/recaptcha/api.js?${params}`)\r\n                .catch((error) => {\r\n                    this._loadPromise = undefined;\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n}\r\n\r\nexport interface GoogleRecaptchaWindow extends Window {\r\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\r\n    initRecaptcha?(): void;\r\n}\r\n","import { ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { MutationObserverFactory } from '../common/dom';\r\n\r\nimport GoogleRecaptcha from './google-recaptcha';\r\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\r\n\r\nexport default function createSpamProtection(scriptLoader: ScriptLoader): GoogleRecaptcha {\r\n    return new GoogleRecaptcha(\r\n        new GoogleRecaptchaScriptLoader(scriptLoader),\r\n        new MutationObserverFactory(),\r\n    );\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\nexport default class InvalidHostedFormConfigError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'Unable to proceed due to invalid configuration provided for the hosted payment form.',\r\n        );\r\n\r\n        this.name = 'InvalidHostedFormConfigError';\r\n        this.type = 'invalid_hosted_form_config';\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\nexport default class InvalidHostedFormError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\r\n\r\n        this.name = 'InvalidHostedFormError';\r\n        this.type = 'invalid_hosted_form';\r\n    }\r\n}\r\n","import { flatMap, map, values } from 'lodash';\r\n\r\nimport { StandardError } from '../../common/error/errors';\r\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\r\n\r\nexport default class InvalidHostedFormValueError extends StandardError {\r\n    constructor(public errors: HostedInputValidateErrorDataMap) {\r\n        super(\r\n            [\r\n                'Unable to proceed due to invalid user input values',\r\n                ...flatMap(values(errors), (fieldErrors) =>\r\n                    map(fieldErrors, ({ message }) => message),\r\n                ),\r\n            ].join('. '),\r\n        );\r\n\r\n        this.name = 'InvalidHostedFormValueError';\r\n        this.type = 'invalid_hosted_form_value';\r\n    }\r\n}\r\n","import { CardInstrument } from '../payment/instrument';\r\n\r\nimport HostedFieldType from './hosted-field-type';\r\nimport { HostedFieldStylesMap } from './hosted-form-options';\r\nimport HostedFormOrderData from './hosted-form-order-data';\r\n\r\nexport enum HostedFieldEventType {\r\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\r\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\r\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\r\n}\r\n\r\nexport interface HostedFieldEventMap {\r\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\r\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\r\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\r\n}\r\n\r\nexport type HostedFieldEvent =\r\n    | HostedFieldAttachEvent\r\n    | HostedFieldSubmitRequestEvent\r\n    | HostedFieldValidateRequestEvent;\r\n\r\nexport interface HostedFieldAttachEvent {\r\n    type: HostedFieldEventType.AttachRequested;\r\n    payload: {\r\n        accessibilityLabel?: string;\r\n        cardInstrument?: CardInstrument;\r\n        fontUrls?: string[];\r\n        placeholder?: string;\r\n        styles?: HostedFieldStylesMap;\r\n        origin?: string;\r\n        type: HostedFieldType;\r\n    };\r\n}\r\n\r\nexport interface HostedFieldSubmitRequestEvent {\r\n    type: HostedFieldEventType.SubmitRequested;\r\n    payload: {\r\n        data: HostedFormOrderData;\r\n        fields: HostedFieldType[];\r\n    };\r\n}\r\n\r\nexport interface HostedFieldValidateRequestEvent {\r\n    type: HostedFieldEventType.ValidateRequested;\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport {\r\n    PaymentErrorData,\r\n    PaymentErrorResponseBody,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport HostedFieldType from '../hosted-field-type';\r\nimport { HostedFormErrorsData } from '../hosted-form-options';\r\n\r\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\r\nimport HostedInputValidateResults from './hosted-input-validate-results';\r\n\r\n// Event types\r\nexport enum HostedInputEventType {\r\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\r\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\r\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\r\n    Blurred = 'HOSTED_INPUT:BLURRED',\r\n    Changed = 'HOSTED_INPUT:CHANGED',\r\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\r\n    Entered = 'HOSTED_INPUT:ENTERED',\r\n    Focused = 'HOSTED_INPUT:FOCUSED',\r\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\r\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\r\n    Validated = 'HOSTED_INPUT:VALIDATED',\r\n}\r\n\r\n// Event mapping\r\nexport interface HostedInputEventMap {\r\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\r\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\r\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\r\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\r\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\r\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\r\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\r\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\r\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\r\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\r\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\r\n}\r\n\r\n// Events\r\nexport type HostedInputEvent =\r\n    | HostedInputAttachSuccessEvent\r\n    | HostedInputAttachErrorEvent\r\n    | HostedInputBinChangeEvent\r\n    | HostedInputBlurEvent\r\n    | HostedInputChangeEvent\r\n    | HostedInputCardTypeChangeEvent\r\n    | HostedInputEnterEvent\r\n    | HostedInputFocusEvent\r\n    | HostedInputSubmitSuccessEvent\r\n    | HostedInputSubmitErrorEvent\r\n    | HostedInputValidateEvent;\r\n\r\nexport interface HostedInputAttachSuccessEvent {\r\n    type: HostedInputEventType.AttachSucceeded;\r\n}\r\n\r\nexport interface HostedInputAttachErrorEvent {\r\n    type: HostedInputEventType.AttachFailed;\r\n    payload: {\r\n        error: HostedInputInitializeErrorData;\r\n    };\r\n}\r\n\r\nexport interface HostedInputBinChangeEvent {\r\n    type: HostedInputEventType.BinChanged;\r\n    payload: {\r\n        bin?: string;\r\n    };\r\n}\r\n\r\nexport interface HostedInputBlurEvent {\r\n    type: HostedInputEventType.Blurred;\r\n    payload: {\r\n        fieldType: HostedFieldType;\r\n        errors?: HostedFormErrorsData;\r\n    };\r\n}\r\n\r\nexport interface HostedInputChangeEvent {\r\n    type: HostedInputEventType.Changed;\r\n    payload: {\r\n        fieldType: HostedFieldType;\r\n    };\r\n}\r\n\r\nexport interface HostedInputCardTypeChangeEvent {\r\n    type: HostedInputEventType.CardTypeChanged;\r\n    payload: {\r\n        cardType?: string;\r\n    };\r\n}\r\n\r\nexport interface HostedInputFocusEvent {\r\n    type: HostedInputEventType.Focused;\r\n    payload: {\r\n        fieldType: HostedFieldType;\r\n    };\r\n}\r\n\r\nexport interface HostedInputEnterEvent {\r\n    type: HostedInputEventType.Entered;\r\n    payload: {\r\n        fieldType: HostedFieldType;\r\n    };\r\n}\r\n\r\nexport interface HostedInputSubmitSuccessEvent {\r\n    type: HostedInputEventType.SubmitSucceeded;\r\n    payload: {\r\n        response: Response<unknown>;\r\n    };\r\n}\r\n\r\nexport interface HostedInputSubmitErrorEvent {\r\n    type: HostedInputEventType.SubmitFailed;\r\n    payload: {\r\n        error: PaymentErrorData;\r\n        response?: Response<PaymentErrorResponseBody>;\r\n    };\r\n}\r\n\r\nexport interface HostedInputValidateEvent {\r\n    type: HostedInputEventType.Validated;\r\n    payload: HostedInputValidateResults;\r\n}\r\n","import { values } from 'lodash';\r\nimport { fromEvent } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\nimport { DetachmentObserver } from '../common/dom';\r\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\r\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\r\nimport { parseUrl } from '../common/url';\r\nimport { CardInstrument } from '../payment/instrument';\r\n\r\nimport {\r\n    InvalidHostedFormConfigError,\r\n    InvalidHostedFormError,\r\n    InvalidHostedFormValueError,\r\n} from './errors';\r\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\r\nimport HostedFieldType from './hosted-field-type';\r\nimport { HostedFieldStylesMap } from './hosted-form-options';\r\nimport HostedFormOrderData from './hosted-form-order-data';\r\nimport {\r\n    HostedInputEventMap,\r\n    HostedInputEventType,\r\n    HostedInputSubmitErrorEvent,\r\n    HostedInputSubmitSuccessEvent,\r\n    HostedInputValidateEvent,\r\n} from './iframe-content';\r\n\r\nexport const RETRY_INTERVAL = 60 * 1000;\r\nexport const LAST_RETRY_KEY = 'lastRetry';\r\n\r\nexport default class HostedField {\r\n    private _iframe: HTMLIFrameElement;\r\n\r\n    constructor(\r\n        private _type: HostedFieldType,\r\n        private _containerId: string,\r\n        private _placeholder: string,\r\n        private _accessibilityLabel: string,\r\n        private _styles: HostedFieldStylesMap,\r\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\r\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\r\n        private _detachmentObserver: DetachmentObserver,\r\n        private _cardInstrument?: CardInstrument,\r\n    ) {\r\n        this._iframe = document.createElement('iframe');\r\n\r\n        this._iframe.src = `/checkout/payment/hosted-field?version=${LIBRARY_VERSION}`;\r\n        this._iframe.style.border = 'none';\r\n        this._iframe.style.height = '100%';\r\n        this._iframe.style.overflow = 'hidden';\r\n        this._iframe.style.width = '100%';\r\n    }\r\n\r\n    getType(): HostedFieldType {\r\n        return this._type;\r\n    }\r\n\r\n    async attach(): Promise<void> {\r\n        const container = document.getElementById(this._containerId);\r\n\r\n        if (!container) {\r\n            throw new InvalidHostedFormConfigError(\r\n                'Unable to proceed because the provided container ID is not valid.',\r\n            );\r\n        }\r\n\r\n        container.appendChild(this._iframe);\r\n        this._eventListener.listen();\r\n\r\n        const promise = fromEvent(this._iframe, 'load')\r\n            .pipe(\r\n                switchMap(async ({ target }) => {\r\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\r\n\r\n                    if (!contentWindow) {\r\n                        throw new Error('The content window of the iframe cannot be accessed.');\r\n                    }\r\n\r\n                    this._eventPoster.setTarget(contentWindow);\r\n\r\n                    await this._eventPoster.post(\r\n                        {\r\n                            type: HostedFieldEventType.AttachRequested,\r\n                            payload: {\r\n                                accessibilityLabel: this._accessibilityLabel,\r\n                                cardInstrument: this._cardInstrument,\r\n                                fontUrls: this._getFontUrls(),\r\n                                placeholder: this._placeholder,\r\n                                styles: this._styles,\r\n                                origin: document.location.origin,\r\n                                type: this._type,\r\n                            },\r\n                        },\r\n                        {\r\n                            successType: HostedInputEventType.AttachSucceeded,\r\n                            errorType: HostedInputEventType.AttachFailed,\r\n                        },\r\n                    );\r\n                }),\r\n                take(1),\r\n            )\r\n            .toPromise();\r\n\r\n        await this._detachmentObserver.ensurePresence([this._iframe], promise);\r\n    }\r\n\r\n    detach(): void {\r\n        if (!this._iframe.parentElement) {\r\n            return;\r\n        }\r\n\r\n        this._iframe.parentElement.removeChild(this._iframe);\r\n        this._eventListener.stopListen();\r\n    }\r\n\r\n    async submitForm(\r\n        fields: HostedFieldType[],\r\n        data: HostedFormOrderData,\r\n    ): Promise<HostedInputSubmitSuccessEvent> {\r\n        try {\r\n            const promise = this._eventPoster.post<HostedInputSubmitSuccessEvent>(\r\n                {\r\n                    type: HostedFieldEventType.SubmitRequested,\r\n                    payload: { fields, data },\r\n                },\r\n                {\r\n                    successType: HostedInputEventType.SubmitSucceeded,\r\n                    errorType: HostedInputEventType.SubmitFailed,\r\n                },\r\n            );\r\n\r\n            return await this._detachmentObserver.ensurePresence([this._iframe], promise);\r\n        } catch (event) {\r\n            if (this._isSubmitErrorEvent(event)) {\r\n                if (event.payload.error.code === 'hosted_form_error') {\r\n                    throw new InvalidHostedFormError(event.payload.error.message);\r\n                }\r\n\r\n                if (event.payload.response) {\r\n                    throw mapFromPaymentErrorResponse(event.payload.response);\r\n                }\r\n\r\n                throw new Error(event.payload.error.message);\r\n            }\r\n\r\n            throw event;\r\n        }\r\n    }\r\n\r\n    async validateForm(): Promise<void> {\r\n        const promise = this._eventPoster.post<HostedInputValidateEvent>(\r\n            {\r\n                type: HostedFieldEventType.ValidateRequested,\r\n            },\r\n            {\r\n                successType: HostedInputEventType.Validated,\r\n            },\r\n        );\r\n\r\n        const { payload } = await this._detachmentObserver.ensurePresence([this._iframe], promise);\r\n\r\n        if (!payload.isValid) {\r\n            throw new InvalidHostedFormValueError(payload.errors);\r\n        }\r\n    }\r\n\r\n    private _getFontUrls(): string[] {\r\n        const hostname = 'fonts.googleapis.com';\r\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\r\n\r\n        return Array.prototype.slice\r\n            .call(links)\r\n            .filter((link) => parseUrl(link.href).hostname === hostname)\r\n            .filter((link) =>\r\n                values(this._styles)\r\n                    .map((style) => style && style.fontFamily)\r\n                    .filter((family): family is string => typeof family === 'string')\r\n                    .some((family) =>\r\n                        family\r\n                            .split(/,\\s/)\r\n                            .some((name) => link.href.indexOf(name.replace(' ', '+')) !== -1),\r\n                    ),\r\n            )\r\n            .map((link) => link.href);\r\n    }\r\n\r\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\r\n        return event.type === HostedInputEventType.SubmitFailed;\r\n    }\r\n}\r\n","import { noop, without } from 'lodash';\r\n\r\nimport { HostedForm as HostedFormInterface } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { IframeEventListener } from '../common/iframe';\r\nimport { OrderPaymentRequestBody } from '../order';\r\nimport { PaymentAdditionalAction } from '../payment';\r\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\r\n\r\nimport { InvalidHostedFormConfigError } from './errors';\r\nimport HostedField from './hosted-field';\r\nimport HostedFormOptions from './hosted-form-options';\r\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\r\nimport {\r\n    HostedInputEnterEvent,\r\n    HostedInputEventMap,\r\n    HostedInputEventType,\r\n    HostedInputSubmitSuccessEvent,\r\n} from './iframe-content';\r\n\r\ntype HostedFormEventCallbacks = Pick<\r\n    HostedFormOptions,\r\n    'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'\r\n>;\r\n\r\nexport default class HostedForm implements HostedFormInterface {\r\n    private _bin?: string;\r\n    private _cardType?: string;\r\n\r\n    constructor(\r\n        private _fields: HostedField[],\r\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\r\n        private _payloadTransformer: HostedFormOrderDataTransformer,\r\n        private _eventCallbacks: HostedFormEventCallbacks,\r\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\r\n    ) {\r\n        const {\r\n            onBlur = noop,\r\n            onCardTypeChange = noop,\r\n            onFocus = noop,\r\n            onValidate = noop,\r\n        } = this._eventCallbacks;\r\n\r\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) =>\r\n            onBlur(payload),\r\n        );\r\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) =>\r\n            onCardTypeChange(payload),\r\n        );\r\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) =>\r\n            onFocus(payload),\r\n        );\r\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) =>\r\n            onValidate(payload),\r\n        );\r\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\r\n\r\n        this._eventListener.addListener(\r\n            HostedInputEventType.CardTypeChanged,\r\n            ({ payload }) => (this._cardType = payload.cardType),\r\n        );\r\n        this._eventListener.addListener(\r\n            HostedInputEventType.BinChanged,\r\n            ({ payload }) => (this._bin = payload.bin),\r\n        );\r\n    }\r\n\r\n    getBin(): string | undefined {\r\n        return this._bin;\r\n    }\r\n\r\n    getCardType(): string | undefined {\r\n        return this._cardType;\r\n    }\r\n\r\n    async attach(): Promise<void> {\r\n        this._eventListener.listen();\r\n\r\n        const field = this._getFirstField();\r\n        const otherFields = without(this._fields, field);\r\n\r\n        await field.attach();\r\n        await Promise.all(otherFields.map((otherField) => otherField.attach()));\r\n    }\r\n\r\n    detach(): void {\r\n        this._eventListener.stopListen();\r\n\r\n        this._fields.forEach((field) => {\r\n            field.detach();\r\n        });\r\n    }\r\n\r\n    async submit(\r\n        payload: OrderPaymentRequestBody,\r\n        additionalActionData?: PaymentAdditionalAction,\r\n    ): Promise<HostedInputSubmitSuccessEvent> {\r\n        try {\r\n            return await this._getFirstField().submitForm(\r\n                this._fields.map((field) => field.getType()),\r\n                this._payloadTransformer.transform(payload, additionalActionData),\r\n            );\r\n        } catch (error) {\r\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\r\n\r\n            return await this._getFirstField().submitForm(\r\n                this._fields.map((field) => field.getType()),\r\n                this._payloadTransformer.transform(payload, additionalAction),\r\n            );\r\n        }\r\n    }\r\n\r\n    async validate(): Promise<void> {\r\n        return this._getFirstField().validateForm();\r\n    }\r\n\r\n    private _getFirstField(): HostedField {\r\n        const field = this._fields[0];\r\n\r\n        if (!field) {\r\n            throw new InvalidHostedFormConfigError(\r\n                'Unable to proceed because the payment form has no field defined.',\r\n            );\r\n        }\r\n\r\n        return field;\r\n    }\r\n\r\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\r\n        try {\r\n            await this.validate();\r\n        } catch (error) {\r\n            // Catch form validation error because we want to trigger `onEnter`\r\n            // irrespective of the validation result.\r\n            if (error.name !== 'InvalidHostedFormValueError') {\r\n                throw error;\r\n            }\r\n        }\r\n\r\n        const { onEnter = noop } = this._eventCallbacks;\r\n\r\n        onEnter(payload);\r\n    };\r\n}\r\n","import {\r\n    FormattedPayload,\r\n    FormattedVaultedInstrument,\r\n    HostedVaultedInstrument,\r\n    PaymentInstrument,\r\n    VaultedInstrument,\r\n} from './payment';\r\n\r\nexport default function isVaultedInstrument(\r\n    instrument: PaymentInstrument,\r\n): instrument is VaultedInstrument {\r\n    return Boolean((instrument as VaultedInstrument).instrumentId);\r\n}\r\n\r\nexport function isHostedVaultedInstrument(\r\n    instrument: PaymentInstrument,\r\n): instrument is HostedVaultedInstrument {\r\n    return (\r\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\r\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\r\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\r\n    );\r\n}\r\n\r\nexport function isFormattedVaultedInstrument(\r\n    instrument: PaymentInstrument,\r\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\r\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\r\n        .formattedPayload;\r\n\r\n    if (!formattedInstrument) {\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        typeof formattedInstrument.bigpay_token === 'string' ||\r\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\r\n    );\r\n}\r\n","import { omit } from 'lodash';\r\n\r\nimport { ReadableCheckoutStore } from '../checkout';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { OrderPaymentRequestBody } from '../order';\r\nimport {\r\n    HostedCreditCardInstrument,\r\n    isVaultedInstrument,\r\n    PaymentAdditionalAction,\r\n} from '../payment';\r\n\r\nimport HostedFormOrderData from './hosted-form-order-data';\r\n\r\nexport default class HostedFormOrderDataTransformer {\r\n    constructor(private _store: ReadableCheckoutStore) {}\r\n\r\n    transform(\r\n        payload: OrderPaymentRequestBody,\r\n        additionalAction?: PaymentAdditionalAction,\r\n    ): HostedFormOrderData {\r\n        const state = this._store.getState();\r\n        const checkout = state.checkout.getCheckout();\r\n        const config = state.config.getConfig();\r\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\r\n        const order = state.order.getOrder();\r\n        const orderMeta = state.order.getOrderMeta();\r\n        const payment = omit(\r\n            payload.paymentData,\r\n            'ccExpiry',\r\n            'ccName',\r\n            'ccNumber',\r\n            'ccCvv',\r\n        ) as HostedCreditCardInstrument;\r\n        const paymentMethod = state.paymentMethods.getPaymentMethod(\r\n            payload.methodId,\r\n            payload.gatewayId,\r\n        );\r\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\r\n        const authToken =\r\n            instrumentMeta && payment && isVaultedInstrument(payment)\r\n                ? `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\r\n                : state.payment.getPaymentToken();\r\n\r\n        if (!authToken) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\r\n        }\r\n\r\n        return {\r\n            additionalAction,\r\n            authToken,\r\n            checkout,\r\n            config,\r\n            order,\r\n            orderMeta,\r\n            payment,\r\n            paymentMethod,\r\n            paymentMethodMeta,\r\n        };\r\n    }\r\n}\r\n","import { createScriptLoader } from '@bigcommerce/script-loader';\r\nimport { pick } from 'lodash';\r\n\r\nimport { ReadableCheckoutStore } from '../checkout';\r\nimport { DetachmentObserver, MutationObserverFactory } from '../common/dom';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\r\nimport { CardInstrument } from '../payment/instrument';\r\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\r\n\r\nimport HostedField from './hosted-field';\r\nimport HostedFieldType from './hosted-field-type';\r\nimport HostedForm from './hosted-form';\r\nimport HostedFormOptions, {\r\n    HostedCardFieldOptionsMap,\r\n    HostedStoredCardFieldOptionsMap,\r\n} from './hosted-form-options';\r\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\r\n\r\nexport default class HostedFormFactory {\r\n    constructor(private _store: ReadableCheckoutStore) {}\r\n\r\n    create(host: string, options: HostedFormOptions): HostedForm {\r\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\r\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\r\n            const fields = options.fields as HostedStoredCardFieldOptionsMap &\r\n                HostedCardFieldOptionsMap;\r\n            const fieldOptions = fields[type];\r\n\r\n            if (!fieldOptions) {\r\n                return result;\r\n            }\r\n\r\n            return [\r\n                ...result,\r\n                new HostedField(\r\n                    type,\r\n                    fieldOptions.containerId,\r\n                    fieldOptions.placeholder || '',\r\n                    fieldOptions.accessibilityLabel || '',\r\n                    options.styles || {},\r\n                    new IframeEventPoster(host),\r\n                    new IframeEventListener(host),\r\n                    new DetachmentObserver(new MutationObserverFactory()),\r\n                    'instrumentId' in fieldOptions\r\n                        ? this._getCardInstrument(fieldOptions.instrumentId)\r\n                        : undefined,\r\n                ),\r\n            ];\r\n        }, []);\r\n\r\n        return new HostedForm(\r\n            fields,\r\n            new IframeEventListener(host),\r\n            new HostedFormOrderDataTransformer(this._store),\r\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\r\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\r\n        );\r\n    }\r\n\r\n    private _getCardInstrument(instrumentId: string): CardInstrument {\r\n        const {\r\n            instruments: { getCardInstrument },\r\n        } = this._store.getState();\r\n        const instrument = getCardInstrument(instrumentId);\r\n\r\n        if (!instrument) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\r\n        }\r\n\r\n        return instrument;\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * Throw this error if the shopper chooses not to complete the spam check.\r\n */\r\nexport default class SpamProtectionNotCompletedError extends StandardError {\r\n    constructor() {\r\n        super(\"You haven't complete our spam check. Please try again.\");\r\n\r\n        this.name = 'SpamProtectionNotCompletedError';\r\n        this.type = 'spam_protection_not_completed';\r\n    }\r\n}\r\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, from, Observable, Observer, of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\r\nimport { throwErrorAction } from '../common/error';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { RequestOptions } from '../common/http-request';\r\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\r\n\r\nimport InternalOrderRequestBody from './internal-order-request-body';\r\nimport {\r\n    FinalizeOrderAction,\r\n    LoadOrderAction,\r\n    LoadOrderPaymentsAction,\r\n    OrderActionType,\r\n    SubmitOrderAction,\r\n} from './order-actions';\r\nimport OrderRequestBody from './order-request-body';\r\nimport OrderRequestSender from './order-request-sender';\r\n\r\nexport default class OrderActionCreator {\r\n    constructor(\r\n        private _orderRequestSender: OrderRequestSender,\r\n        private _checkoutValidator: CheckoutValidator,\r\n    ) {}\r\n\r\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\r\n        return new Observable((observer: Observer<LoadOrderAction>) => {\r\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\r\n\r\n            this._orderRequestSender\r\n                .loadOrder(orderId, options)\r\n                .then((response) => {\r\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\r\n                    observer.complete();\r\n                })\r\n                .catch((response) => {\r\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\r\n                });\r\n        });\r\n    }\r\n\r\n    // TODO: Remove when checkout does not contain unrelated order data.\r\n    loadOrderPayments(\r\n        orderId: number,\r\n        options?: RequestOptions,\r\n    ): Observable<LoadOrderPaymentsAction> {\r\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\r\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\r\n\r\n            this._orderRequestSender\r\n                .loadOrder(orderId, options)\r\n                .then((response) => {\r\n                    observer.next(\r\n                        createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body),\r\n                    );\r\n                    observer.complete();\r\n                })\r\n                .catch((response) => {\r\n                    observer.error(\r\n                        createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response),\r\n                    );\r\n                });\r\n        });\r\n    }\r\n\r\n    loadCurrentOrder(\r\n        options?: RequestOptions,\r\n    ): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            defer(() => {\r\n                const orderId = this._getCurrentOrderId(store.getState());\r\n\r\n                if (!orderId) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingOrderId);\r\n                }\r\n\r\n                return this.loadOrder(orderId, options);\r\n            });\r\n    }\r\n\r\n    submitOrder(\r\n        payload?: OrderRequestBody,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            concat(\r\n                of(createAction(OrderActionType.SubmitOrderRequested)),\r\n                defer(() => {\r\n                    const state = store.getState();\r\n                    const externalSource = state.config.getExternalSource();\r\n                    const variantIdentificationToken = state.config.getVariantIdentificationToken();\r\n                    const checkout = state.checkout.getCheckout();\r\n\r\n                    if (!checkout) {\r\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                    }\r\n\r\n                    if (checkout.shouldExecuteSpamCheck) {\r\n                        throw new SpamProtectionNotCompletedError();\r\n                    }\r\n\r\n                    return from(\r\n                        this._checkoutValidator.validate(checkout, options).then(() =>\r\n                            this._orderRequestSender.submitOrder(\r\n                                this._mapToOrderRequestBody(\r\n                                    payload ?? {},\r\n                                    checkout.id,\r\n                                    checkout.customerMessage,\r\n                                    externalSource,\r\n                                ),\r\n                                {\r\n                                    ...options,\r\n                                    headers: {\r\n                                        checkoutVariant: variantIdentificationToken,\r\n                                    },\r\n                                },\r\n                            ),\r\n                        ),\r\n                    ).pipe(\r\n                        switchMap((response) =>\r\n                            concat(\r\n                                // TODO: Remove once we can submit orders using storefront API\r\n                                this.loadOrder(response.body.data.order.orderId, options),\r\n                                of(\r\n                                    createAction(\r\n                                        OrderActionType.SubmitOrderSucceeded,\r\n                                        response.body.data,\r\n                                        { ...response.body.meta, token: response.headers.token },\r\n                                    ),\r\n                                ),\r\n                            ),\r\n                        ),\r\n                    );\r\n                }).pipe(\r\n                    catchError((error) =>\r\n                        throwErrorAction(OrderActionType.SubmitOrderFailed, error),\r\n                    ),\r\n                ),\r\n            );\r\n    }\r\n\r\n    finalizeOrder(\r\n        orderId: number,\r\n        options?: RequestOptions,\r\n    ): Observable<FinalizeOrderAction | LoadOrderAction> {\r\n        return concat(\r\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\r\n            from(this._orderRequestSender.finalizeOrder(orderId, options)).pipe(\r\n                switchMap((response) =>\r\n                    concat(\r\n                        this.loadOrder(orderId, options),\r\n                        of(\r\n                            createAction(\r\n                                OrderActionType.FinalizeOrderSucceeded,\r\n                                response.body.data,\r\n                            ),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ),\r\n        ).pipe(catchError((error) => throwErrorAction(OrderActionType.FinalizeOrderFailed, error)));\r\n    }\r\n\r\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\r\n        const order = state.order.getOrder();\r\n        const checkout = state.checkout.getCheckout();\r\n\r\n        return (order && order.orderId) || (checkout && checkout.orderId);\r\n    }\r\n\r\n    private _mapToOrderRequestBody(\r\n        payload: OrderRequestBody,\r\n        cartId: string,\r\n        customerMessage: string,\r\n        externalSource?: string,\r\n    ): InternalOrderRequestBody {\r\n        const { payment, ...order } = payload;\r\n\r\n        if (!payment) {\r\n            return {\r\n                ...order,\r\n                cartId,\r\n                customerMessage,\r\n                externalSource,\r\n            };\r\n        }\r\n\r\n        return {\r\n            ...order,\r\n            cartId,\r\n            customerMessage,\r\n            externalSource,\r\n            payment: {\r\n                paymentData: payment.paymentData,\r\n                name: payment.methodId,\r\n                gateway: payment.gatewayId,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * This error is thrown when the server detects inconsistency in cart data since it is last requested,\r\n * for example, product prices or eligible discounts have changed.\r\n */\r\nexport default class CartConsistencyError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'Your checkout could not be processed because some details have changed. Please review your order and try again.',\r\n        );\r\n\r\n        this.name = 'CartConsistencyError';\r\n        this.type = 'cart_consistency';\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * Checkout prevents consumers from placing their orders when a merchant wishes\r\n * to be able to block transactions if the automated tax provider cannot be reached.\r\n */\r\nexport default class OrderTaxProviderUnavailableError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(message || 'The tax provider is unavailable.');\r\n\r\n        this.name = 'OrderTaxProviderUnavailableError';\r\n        this.type = 'tax_provider_unavailable';\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\nimport { isNil, omitBy } from 'lodash';\r\n\r\nimport { CartConsistencyError } from '../cart/errors';\r\nimport {\r\n    ContentType,\r\n    joinIncludes,\r\n    RequestOptions,\r\n    SDK_VERSION_HEADERS,\r\n} from '../common/http-request';\r\n\r\nimport { OrderTaxProviderUnavailableError } from './errors';\r\nimport InternalOrderRequestBody from './internal-order-request-body';\r\nimport { InternalOrderResponseBody } from './internal-order-responses';\r\nimport Order from './order';\r\n\r\nexport interface SubmitOrderRequestOptions extends RequestOptions {\r\n    headers?: {\r\n        checkoutVariant?: string;\r\n    };\r\n}\r\n\r\nexport default class OrderRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\r\n        const url = `/api/storefront/orders/${orderId}`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n        const include = [\r\n            'payments',\r\n            'lineItems.physicalItems.socialMedia',\r\n            'lineItems.physicalItems.options',\r\n            'lineItems.physicalItems.categories',\r\n            'lineItems.digitalItems.socialMedia',\r\n            'lineItems.digitalItems.options',\r\n            'lineItems.digitalItems.categories',\r\n        ];\r\n\r\n        return this._requestSender.get(url, {\r\n            params: {\r\n                include: joinIncludes(include),\r\n            },\r\n            headers,\r\n            timeout,\r\n        });\r\n    }\r\n\r\n    submitOrder(\r\n        body?: InternalOrderRequestBody,\r\n        { headers, timeout }: SubmitOrderRequestOptions = {},\r\n    ): Promise<Response<InternalOrderResponseBody>> {\r\n        const url = '/internalapi/v1/checkout/order';\r\n\r\n        return this._requestSender\r\n            .post<InternalOrderResponseBody>(url, {\r\n                body,\r\n                headers: omitBy(\r\n                    {\r\n                        'X-Checkout-Variant': headers && headers.checkoutVariant,\r\n                        ...SDK_VERSION_HEADERS,\r\n                    },\r\n                    isNil,\r\n                ),\r\n                timeout,\r\n            })\r\n            .catch((error) => {\r\n                if (error.body.type === 'tax_provider_unavailable') {\r\n                    throw new OrderTaxProviderUnavailableError();\r\n                }\r\n\r\n                if (error.body.type === 'cart_has_changed') {\r\n                    throw new CartConsistencyError();\r\n                }\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    finalizeOrder(\r\n        orderId: number,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<InternalOrderResponseBody>> {\r\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\r\n\r\n        return this._requestSender.post(url, { timeout, headers: SDK_VERSION_HEADERS });\r\n    }\r\n}\r\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\n\r\nimport { InternalCheckoutSelectors } from '../checkout';\r\nimport { throwErrorAction } from '../common/error';\r\nimport { OrderActionCreator } from '../order';\r\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\r\n\r\nimport Payment, {\r\n    FormattedHostedInstrument,\r\n    FormattedPayload,\r\n    FormattedVaultedInstrument,\r\n} from './payment';\r\nimport {\r\n    InitializeOffsitePaymentAction,\r\n    PaymentActionType,\r\n    SubmitPaymentAction,\r\n} from './payment-actions';\r\nimport PaymentRequestSender from './payment-request-sender';\r\nimport PaymentRequestTransformer from './payment-request-transformer';\r\n\r\ninterface InitializeOffsitePaymentSettings {\r\n    methodId: string;\r\n    gatewayId?: string;\r\n    instrumentId?: string;\r\n    target?: string;\r\n    promise?: Promise<undefined>;\r\n    shouldSaveInstrument?: boolean;\r\n    shouldSetAsDefaultInstrument?: boolean;\r\n}\r\n\r\ntype InitializeOffsitePayment = (\r\n    settings: InitializeOffsitePaymentSettings,\r\n) => ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors>;\r\n\r\nexport default class PaymentActionCreator {\r\n    constructor(\r\n        private _paymentRequestSender: PaymentRequestSender,\r\n        private _orderActionCreator: OrderActionCreator,\r\n        private _paymentRequestTransformer: PaymentRequestTransformer,\r\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler,\r\n    ) {}\r\n\r\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            concat(\r\n                of(createAction(PaymentActionType.SubmitPaymentRequested)),\r\n                defer(async () => {\r\n                    try {\r\n                        return await this._paymentRequestSender.submitPayment(\r\n                            this._paymentRequestTransformer.transform(payment, store.getState()),\r\n                        );\r\n                    } catch (error) {\r\n                        const additionalAction = await this._paymentHumanVerificationHandler.handle(\r\n                            error,\r\n                        );\r\n\r\n                        return await this._paymentRequestSender.submitPayment(\r\n                            this._paymentRequestTransformer.transform(\r\n                                { ...payment, additionalAction },\r\n                                store.getState(),\r\n                            ),\r\n                        );\r\n                    }\r\n                }).pipe(\r\n                    switchMap(({ body }) =>\r\n                        concat(\r\n                            this._orderActionCreator.loadCurrentOrder()(store),\r\n                            of(createAction(PaymentActionType.SubmitPaymentSucceeded, body)),\r\n                        ),\r\n                    ),\r\n                ),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(PaymentActionType.SubmitPaymentFailed, error),\r\n                ),\r\n            );\r\n    }\r\n\r\n    initializeOffsitePayment: InitializeOffsitePayment = ({\r\n        methodId,\r\n        gatewayId,\r\n        instrumentId,\r\n        target,\r\n        promise,\r\n        shouldSaveInstrument,\r\n        shouldSetAsDefaultInstrument,\r\n    }) => {\r\n        return (store) => {\r\n            let paymentData:\r\n                | FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument>\r\n                | undefined;\r\n\r\n            if (instrumentId) {\r\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\r\n            } else if (shouldSaveInstrument) {\r\n                paymentData = {\r\n                    formattedPayload: {\r\n                        vault_payment_instrument: shouldSaveInstrument,\r\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\r\n                    },\r\n                };\r\n            }\r\n\r\n            const payload = this._paymentRequestTransformer.transform(\r\n                { gatewayId, methodId, paymentData },\r\n                store.getState(),\r\n            );\r\n\r\n            return concat(\r\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\r\n                Promise.race(\r\n                    [\r\n                        this._paymentRequestSender.initializeOffsitePayment(payload, target),\r\n                        promise,\r\n                    ].filter(Boolean),\r\n                ).then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded)),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error),\r\n                ),\r\n            );\r\n        };\r\n    };\r\n}\r\n","import { Response } from '@bigcommerce/request-sender';\r\n\r\nimport PaymentRequestBody from './payment-request-body';\r\n\r\n/**\r\n * @todo Convert this file into TypeScript properly\r\n */\r\nexport default class PaymentRequestSender {\r\n    /**\r\n     * @class\r\n     * @param {BigpayClient} client\r\n     */\r\n    constructor(private _client: any) {}\r\n\r\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\r\n        return new Promise((resolve, reject) => {\r\n            this._client.submitPayment(payload, (error: any, response: any) => {\r\n                if (error) {\r\n                    reject(this._transformResponse(error));\r\n                } else {\r\n                    resolve(this._transformResponse(response));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\r\n        return new Promise(() => {\r\n            this._client.initializeOffsitePayment(payload, null, target);\r\n        });\r\n    }\r\n\r\n    private _transformResponse(response: any): Response<any> {\r\n        return {\r\n            headers: response.headers,\r\n            body: response.data,\r\n            status: response.status,\r\n            statusText: response.statusText,\r\n        };\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@bigcommerce/bigpay-client\");","import { BillingAddress, isBillingAddressLike } from '../billing';\r\nimport { Consignment } from '../shipping';\r\n\r\nimport Address from './address';\r\nimport InternalAddress from './internal-address';\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalAddress(\r\n    address: Address | BillingAddress,\r\n    consignments?: Consignment[],\r\n): InternalAddress<any> {\r\n    let addressId;\r\n\r\n    if (isBillingAddressLike(address)) {\r\n        addressId = address.id;\r\n    } else if (consignments && consignments.length) {\r\n        addressId = consignments[0].id;\r\n    }\r\n\r\n    return {\r\n        id: addressId,\r\n        firstName: address.firstName,\r\n        lastName: address.lastName,\r\n        company: address.company,\r\n        addressLine1: address.address1,\r\n        addressLine2: address.address2,\r\n        city: address.city,\r\n        province: address.stateOrProvince,\r\n        provinceCode: address.stateOrProvinceCode,\r\n        postCode: address.postalCode,\r\n        country: address.country,\r\n        countryCode: address.countryCode,\r\n        phone: address.phone,\r\n        customFields: address.customFields,\r\n    };\r\n}\r\n","import { Address } from '../address';\r\n\r\nimport BillingAddress from './billing-address';\r\n\r\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\r\n    const billingAddress = address as BillingAddress;\r\n\r\n    return typeof billingAddress.id !== 'undefined';\r\n}\r\n","export default class AmountTransformer {\r\n    constructor(private _decimalPlaces: number) {}\r\n\r\n    toInteger(amount: number): number {\r\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\r\n    }\r\n}\r\n","import Coupon from './coupon';\r\nimport InternalCoupon from './internal-coupon';\r\n\r\nconst couponTypes = [\r\n    'per_item_discount',\r\n    'percentage_discount',\r\n    'per_total_discount',\r\n    'shipping_discount',\r\n    'free_shipping',\r\n];\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\r\n    return {\r\n        code: coupon.code,\r\n        discount: coupon.displayName,\r\n        discountType: couponTypes.indexOf(coupon.couponType),\r\n    };\r\n}\r\n","enum CheckoutButtonMethodType {\n    APPLEPAY = \"applepay\",\n    AMAZON_PAY_V2 = \"amazonpay\",\n    BRAINTREE_PAYPAL = \"braintreepaypal\",\n    BRAINTREE_VENMO = \"braintreevenmo\",\n    BRAINTREE_PAYPAL_CREDIT = \"braintreepaypalcredit\",\n    GOOGLEPAY_ADYENV2 = \"googlepayadyenv2\",\n    GOOGLEPAY_ADYENV3 = \"googlepayadyenv3\",\n    GOOGLEPAY_AUTHORIZENET = \"googlepayauthorizenet\",\n    GOOGLEPAY_BNZ = \"googlepaybnz\",\n    GOOGLEPAY_BRAINTREE = \"googlepaybraintree\",\n    GOOGLEPAY_CHECKOUTCOM = \"googlepaycheckoutcom\",\n    GOOGLEPAY_CYBERSOURCEV2 = \"googlepaycybersourcev2\",\n    GOOGLEPAY_ORBITAL = \"googlepayorbital\",\n    GOOGLEPAY_STRIPE = \"googlepaystripe\",\n    GOOGLEPAY_STRIPEUPE = \"googlepaystripeupe\",\n    GOOGLEPAY_WORLDPAYACCESS = \"googlepayworldpayaccess\",\n    MASTERPASS = \"masterpass\",\n    PAYPALEXPRESS = \"paypalexpress\"\n}\nexport default CheckoutButtonMethodType;\n\r\n","import GiftCertificate from './gift-certificate';\r\nimport InternalGiftCertificate from './internal-gift-certificate';\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalGiftCertificate(\r\n    giftCertificate: GiftCertificate,\r\n): InternalGiftCertificate {\r\n    return {\r\n        code: giftCertificate.code,\r\n        discountedAmount: giftCertificate.used,\r\n        remainingBalance: giftCertificate.remaining,\r\n        giftCertificate: {\r\n            balance: giftCertificate.balance,\r\n            code: giftCertificate.code,\r\n            purchaseDate: giftCertificate.purchaseDate,\r\n        },\r\n    };\r\n}\r\n","import InternalLineItem from './internal-line-item';\r\nimport { LineItem } from './line-item';\r\nimport LineItemMap from './line-item-map';\r\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\r\nimport mapToInternalLineItem from './map-to-internal-line-item';\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalLineItems(\r\n    itemMap: LineItemMap,\r\n    decimalPlaces: number,\r\n    idKey: keyof LineItem = 'id',\r\n): InternalLineItem[] {\r\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>).reduce(\r\n        (result, key) => [\r\n            ...result,\r\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\r\n                if (key === 'giftCertificates') {\r\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\r\n                }\r\n\r\n                return mapToInternalLineItem(\r\n                    item,\r\n                    mapToInternalLineItemType(key),\r\n                    decimalPlaces,\r\n                    idKey,\r\n                );\r\n            }),\r\n        ],\r\n        [] as InternalLineItem[],\r\n    );\r\n}\r\n\r\nfunction mapToInternalLineItemType(type: string): string {\r\n    switch (type) {\r\n        case 'physicalItems':\r\n            return 'ItemPhysicalEntity';\r\n\r\n        case 'digitalItems':\r\n            return 'ItemDigitalEntity';\r\n\r\n        case 'giftCertificates':\r\n            return 'ItemGiftCertificateEntity';\r\n\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n","import { AmountTransformer } from '../common/utility';\r\n\r\nimport InternalLineItem from './internal-line-item';\r\nimport { GiftCertificateItem } from './line-item';\r\n\r\nexport default function mapGiftCertificateToInternalLineItem(\r\n    item: GiftCertificateItem,\r\n    decimalPlaces: number,\r\n): InternalLineItem {\r\n    const amountTransformer = new AmountTransformer(decimalPlaces);\r\n\r\n    return {\r\n        id: item.id,\r\n        imageUrl: '',\r\n        name: item.name,\r\n        amount: item.amount,\r\n        amountAfterDiscount: item.amount,\r\n        discount: 0,\r\n        integerAmount: amountTransformer.toInteger(item.amount),\r\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\r\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\r\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\r\n        integerDiscount: 0,\r\n        quantity: 1,\r\n        sender: item.sender,\r\n        recipient: item.recipient,\r\n        type: 'ItemGiftCertificateEntity',\r\n        attributes: [],\r\n        variantId: null,\r\n    };\r\n}\r\n","import { AmountTransformer } from '../common/utility';\r\n\r\nimport InternalLineItem from './internal-line-item';\r\nimport { DigitalItem, LineItem } from './line-item';\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalLineItem(\r\n    item: LineItem,\r\n    type: string,\r\n    decimalPlaces: number,\r\n    idKey: keyof LineItem = 'id',\r\n): InternalLineItem {\r\n    const amountTransformer = new AmountTransformer(decimalPlaces);\r\n\r\n    return {\r\n        id: item[idKey] as string | number,\r\n        imageUrl: item.imageUrl,\r\n        amount: item.extendedListPrice,\r\n        amountAfterDiscount: item.extendedSalePrice,\r\n        discount: item.discountAmount,\r\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\r\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\r\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\r\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\r\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\r\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\r\n        name: item.name,\r\n        quantity: item.quantity,\r\n        brand: item.brand,\r\n        sku: item.sku,\r\n        categoryNames: item.categoryNames,\r\n        variantId: item.variantId,\r\n        productId: item.productId,\r\n        attributes: (item.options || []).map((option) => ({\r\n            name: option.name,\r\n            value: option.value,\r\n        })),\r\n        addedByPromotion: item.addedByPromotion,\r\n        type,\r\n    };\r\n}\r\n","import { keyBy, reduce, some } from 'lodash';\r\n\r\nimport { Checkout } from '../checkout';\r\nimport { AmountTransformer } from '../common/utility';\r\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\r\nimport { mapToDiscountNotifications } from '../promotion';\r\n\r\nimport InternalCart from './internal-cart';\r\nimport mapToInternalLineItems from './map-to-internal-line-items';\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\r\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\r\n    const amountTransformer = new AmountTransformer(decimalPlaces);\r\n\r\n    return {\r\n        id: checkout.cart.id,\r\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\r\n        currency: checkout.cart.currency.code,\r\n        coupon: {\r\n            discountedAmount: reduce(\r\n                checkout.cart.coupons,\r\n                (sum, coupon) => {\r\n                    return sum + coupon.discountedAmount;\r\n                },\r\n                0,\r\n            ),\r\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\r\n        },\r\n        discount: {\r\n            amount: checkout.cart.discountAmount,\r\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\r\n        },\r\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\r\n        giftCertificate: {\r\n            totalDiscountedAmount: reduce(\r\n                checkout.giftCertificates,\r\n                (sum, certificate) => {\r\n                    return sum + certificate.used;\r\n                },\r\n                0,\r\n            ),\r\n            appliedGiftCertificates: keyBy(\r\n                checkout.giftCertificates.map(mapToInternalGiftCertificate),\r\n                'code',\r\n            ),\r\n        },\r\n        shipping: {\r\n            amount: checkout.shippingCostTotal,\r\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\r\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\r\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\r\n                checkout.shippingCostBeforeDiscount,\r\n            ),\r\n            required: some(\r\n                checkout.cart.lineItems.physicalItems,\r\n                (lineItem) => lineItem.isShippingRequired,\r\n            ),\r\n        },\r\n        subtotal: {\r\n            amount: checkout.subtotal,\r\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\r\n        },\r\n        storeCredit: {\r\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\r\n        },\r\n        taxSubtotal: {\r\n            amount: checkout.taxTotal,\r\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\r\n        },\r\n        taxes: checkout.taxes,\r\n        taxTotal: {\r\n            amount: checkout.taxTotal,\r\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\r\n        },\r\n        handling: {\r\n            amount: checkout.handlingCostTotal,\r\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\r\n        },\r\n        grandTotal: {\r\n            amount: checkout.grandTotal,\r\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\r\n        },\r\n    };\r\n}\r\n","import { DiscountNotification } from '../discount';\r\n\r\nimport { Promotion } from '.';\r\n\r\nexport default function mapToDiscountNotifications(\r\n    promotions?: Promotion[],\r\n): DiscountNotification[] {\r\n    const notifications: DiscountNotification[] = [];\r\n\r\n    (promotions || []).forEach((promotion) => {\r\n        (promotion.banners || []).forEach((banner) => {\r\n            notifications.push({\r\n                placeholders: [],\r\n                discountType: null,\r\n                message: '',\r\n                messageHtml: banner.text,\r\n            });\r\n        });\r\n    });\r\n\r\n    return notifications;\r\n}\r\n","import { mapToInternalAddress } from '../address';\r\nimport { OrderBillingAddress } from '../order-billing-address/order-billing-address-state';\r\n\r\nimport InternalCustomer from './internal-customer';\r\n\r\nimport { Customer } from '.';\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalCustomer(\r\n    customer: Customer,\r\n    billingAddress: OrderBillingAddress,\r\n): InternalCustomer {\r\n    const firstName = customer.firstName || billingAddress.firstName || '';\r\n    const lastName = customer.lastName || billingAddress.lastName || '';\r\n\r\n    return {\r\n        addresses: (customer.addresses || []).map((address) => mapToInternalAddress(address)),\r\n        customerId: customer.id,\r\n        isGuest: customer.isGuest,\r\n        storeCredit: customer.storeCredit,\r\n        email: customer.email || billingAddress.email || '',\r\n        firstName,\r\n        lastName,\r\n        name: customer.fullName || [firstName, lastName].join(' '),\r\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\r\n    };\r\n}\r\n","import CardExpiryDate from './card-expiry-date';\r\n\r\nconst NUMBER_SEPARATOR = '/';\r\n\r\nexport default class CardExpiryFormatter {\r\n    format(value: string): string {\r\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\r\n        const trimmedMonth = month.slice(0, 2);\r\n        const trimmedYear =\r\n            year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\r\n\r\n        // i.e.: '1'\r\n        if (value.length < 2) {\r\n            return month;\r\n        }\r\n\r\n        // ie.: '10 /' (without trailing space)\r\n        if (value.length > 3 && !trimmedYear) {\r\n            return trimmedMonth;\r\n        }\r\n\r\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\r\n    }\r\n\r\n    toObject(value: string): CardExpiryDate {\r\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\r\n\r\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\r\n            return { month: '', year: '' };\r\n        }\r\n\r\n        return {\r\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\r\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\r\n        };\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"card-validator\");","import { creditCardType, number } from 'card-validator';\r\nimport { max } from 'lodash';\r\n\r\nconst NUMBER_SEPARATOR = ' ';\r\n\r\nexport default class CardNumberFormatter {\r\n    format(value: string): string {\r\n        const { card } = number(value);\r\n\r\n        if (!card) {\r\n            return value;\r\n        }\r\n\r\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\r\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\r\n\r\n        return card.gaps\r\n            .filter((gapIndex) => unformattedValue.length > gapIndex)\r\n            .reduce(\r\n                (output, gapIndex, index) =>\r\n                    [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(\r\n                        NUMBER_SEPARATOR,\r\n                    ),\r\n                unformattedValue,\r\n            );\r\n    }\r\n\r\n    unformat(value: string): string {\r\n        const { card } = number(value);\r\n\r\n        if (!card) {\r\n            return value;\r\n        }\r\n\r\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\r\n    }\r\n}\r\n","import { filter, find, keyBy, reduce } from 'lodash';\r\n\r\nimport { LineItem, mapToInternalLineItems } from '../cart';\r\nimport { Checkout } from '../checkout';\r\nimport { AmountTransformer } from '../common/utility';\r\nimport { mapToInternalCoupon } from '../coupon';\r\nimport { HOSTED } from '../payment';\r\n\r\nimport InternalOrder, {\r\n    InternalGiftCertificateList,\r\n    InternalIncompleteOrder,\r\n    InternalOrderPayment,\r\n    InternalSocialDataList,\r\n} from './internal-order';\r\nimport Order, {\r\n    GatewayOrderPayment,\r\n    GiftCertificateOrderPayment,\r\n    OrderPayment,\r\n    OrderPayments,\r\n} from './order';\r\nimport { OrderMetaState } from './order-state';\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalOrder(\r\n    order: Order,\r\n    orderMeta: OrderMetaState = {},\r\n): InternalOrder {\r\n    const decimalPlaces = order.currency.decimalPlaces;\r\n    const amountTransformer = new AmountTransformer(decimalPlaces);\r\n\r\n    return {\r\n        id: order.orderId,\r\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\r\n        orderId: order.orderId,\r\n        currency: order.currency.code,\r\n        customerCanBeCreated: order.customerCanBeCreated,\r\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\r\n        subtotal: {\r\n            amount: order.baseAmount,\r\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\r\n        },\r\n        coupon: {\r\n            discountedAmount: reduce(\r\n                order.coupons,\r\n                (sum, coupon) => {\r\n                    return sum + coupon.discountedAmount;\r\n                },\r\n                0,\r\n            ),\r\n            coupons: order.coupons.map(mapToInternalCoupon),\r\n        },\r\n        discount: {\r\n            amount: order.discountAmount,\r\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\r\n        },\r\n        token: orderMeta.orderToken,\r\n        callbackUrl: orderMeta.callbackUrl,\r\n        discountNotifications: [],\r\n        giftCertificate: mapToGiftCertificates(order.payments),\r\n        socialData: mapToInternalSocialDataList(order),\r\n        status: order.status,\r\n        hasDigitalItems: order.hasDigitalItems,\r\n        isDownloadable: order.isDownloadable,\r\n        isComplete: order.isComplete,\r\n        shipping: {\r\n            amount: order.shippingCostTotal,\r\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\r\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\r\n            integerAmountBeforeDiscount: amountTransformer.toInteger(\r\n                order.shippingCostBeforeDiscount,\r\n            ),\r\n        },\r\n        storeCredit: {\r\n            amount: mapToStoreCredit(order.payments),\r\n        },\r\n        taxes: order.taxes,\r\n        taxTotal: {\r\n            amount: order.taxTotal,\r\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\r\n        },\r\n        handling: {\r\n            amount: order.handlingCostTotal,\r\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\r\n        },\r\n        grandTotal: {\r\n            amount: order.orderAmount,\r\n            integerAmount: order.orderAmountAsInteger,\r\n        },\r\n    };\r\n}\r\n\r\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\r\n    const payment = find(checkout.payments, { providerType: HOSTED });\r\n\r\n    return {\r\n        orderId: null,\r\n        isComplete: false,\r\n        payment: !payment\r\n            ? {}\r\n            : {\r\n                  id: payment.providerId,\r\n                  gateway: payment.gatewayId,\r\n                  status: mapToInternalPaymentStatus(payment.detail.step),\r\n              },\r\n    };\r\n}\r\n\r\nfunction mapToInternalPaymentStatus(status: string): string {\r\n    return `PAYMENT_STATUS_${status}`;\r\n}\r\n\r\nfunction mapToStoreCredit(payments?: OrderPayments): number {\r\n    const item = find(payments, { providerId: 'storecredit' });\r\n\r\n    return item ? item.amount : 0;\r\n}\r\n\r\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\r\n    const items = filter(payments, {\r\n        providerId: 'giftcertificate',\r\n    }) as GiftCertificateOrderPayment[];\r\n\r\n    return {\r\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\r\n        appliedGiftCertificates: keyBy(\r\n            items.map((item) => ({\r\n                code: item.detail.code,\r\n                discountedAmount: item.amount,\r\n                remainingBalance: item.detail.remaining,\r\n                giftCertificate: {\r\n                    balance: item.amount + item.detail.remaining,\r\n                    code: item.detail.code,\r\n                    purchaseDate: '',\r\n                },\r\n            })),\r\n            'code',\r\n        ),\r\n    };\r\n}\r\n\r\nfunction mapToInternalOrderPayment(\r\n    payments?: OrderPayments,\r\n    payment: InternalOrderPayment = {},\r\n): InternalOrderPayment {\r\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\r\n\r\n    if (!item) {\r\n        return {};\r\n    }\r\n\r\n    return {\r\n        id: item.providerId,\r\n        status: mapToInternalPaymentStatus(item.detail.step),\r\n        helpText: item.detail.instructions,\r\n        returnUrl: payment.returnUrl,\r\n    };\r\n}\r\n\r\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\r\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\r\n}\r\n\r\nfunction mapToInternalSocialDataList(\r\n    order: Order,\r\n): { [itemId: string]: InternalSocialDataList } | undefined {\r\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\r\n    const items = [...order.lineItems.physicalItems, ...order.lineItems.digitalItems];\r\n\r\n    items.forEach((item) => {\r\n        socialDataObject[item.id] = mapToInternalSocialData(item);\r\n    });\r\n\r\n    return socialDataObject;\r\n}\r\n\r\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\r\n    const codes = ['fb', 'tw', 'gp'];\r\n\r\n    return codes.reduce((socialData, code) => {\r\n        const item =\r\n            lineItem.socialMedia && find(lineItem.socialMedia, (item) => item.code === code);\r\n\r\n        if (!item) {\r\n            return socialData;\r\n        }\r\n\r\n        socialData[code] = {\r\n            name: lineItem.name,\r\n            description: lineItem.name,\r\n            image: lineItem.imageUrl,\r\n            url: item.link,\r\n            shareText: item.text,\r\n            sharingLink: item.link,\r\n            channelName: item.channel,\r\n            channelCode: item.code,\r\n        };\r\n\r\n        return socialData;\r\n    }, {} as InternalSocialDataList);\r\n}\r\n","import InternalShippingOption from './internal-shipping-option';\r\nimport ShippingOption from './shipping-option';\r\n\r\n/**\r\n * @deprecated This mapper is only for internal use only. It is required during\r\n * the transition period as we are moving to adopt the new storefront API object\r\n * schema.\r\n */\r\nexport default function mapToInternalShippingOption(\r\n    option: ShippingOption,\r\n    isSelected: boolean,\r\n): InternalShippingOption {\r\n    return {\r\n        description: option.description,\r\n        module: option.type,\r\n        price: option.cost,\r\n        id: option.id,\r\n        selected: isSelected,\r\n        isRecommended: option.isRecommended,\r\n        imageUrl: option.imageUrl,\r\n        transitTime: option.transitTime,\r\n    };\r\n}\r\n","import { pick } from 'lodash';\r\n\r\nimport { Address, mapToInternalAddress } from '../address';\r\nimport { mapToInternalCart } from '../cart';\r\nimport { InternalCheckoutSelectors } from '../checkout';\r\nimport { CheckoutButtonMethodType } from '../checkout-buttons/strategies';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { mapToInternalCustomer } from '../customer';\r\nimport { HostedFormOrderData } from '../hosted-form';\r\nimport {\r\n    CardExpiryFormatter,\r\n    CardNumberFormatter,\r\n    HostedInputValues,\r\n} from '../hosted-form/iframe-content';\r\nimport { mapToInternalOrder } from '../order';\r\nimport { mapToInternalShippingOption } from '../shipping';\r\n\r\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\r\nimport Payment, {\r\n    HostedCreditCardInstrument,\r\n    HostedVaultedInstrument,\r\n    PaymentInstrument,\r\n} from './payment';\r\nimport PaymentMethod from './payment-method';\r\nimport PaymentRequestBody from './payment-request-body';\r\n\r\nexport default class PaymentRequestTransformer {\r\n    private _cardExpiryFormatter = new CardExpiryFormatter();\r\n    private _cardNumberFormatter = new CardNumberFormatter();\r\n\r\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\r\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\r\n        const checkout = checkoutState.checkout.getCheckout();\r\n        const customer = checkoutState.customer.getCustomer();\r\n        const order = checkoutState.order.getOrder();\r\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(\r\n            payment.methodId,\r\n            payment.gatewayId,\r\n        );\r\n        const shippingAddress = this._mapShippingAddress(checkoutState, paymentMethod);\r\n        const consignments = checkoutState.consignments.getConsignments();\r\n        const shippingOption = checkoutState.consignments.getShippingOption();\r\n        const storeConfig = checkoutState.config.getStoreConfig();\r\n        const contextConfig = checkoutState.config.getContextConfig();\r\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\r\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\r\n        const orderMeta = checkoutState.order.getOrderMeta();\r\n        const internalCustomer =\r\n            customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\r\n\r\n        const authToken =\r\n            instrumentMeta &&\r\n            payment.paymentData &&\r\n            (isVaultedInstrument(payment.paymentData) ||\r\n                isFormattedVaultedInstrument(payment.paymentData))\r\n                ? `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}`\r\n                : checkoutState.payment.getPaymentToken();\r\n\r\n        if (!authToken) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\r\n        }\r\n\r\n        return {\r\n            additionalAction: payment.additionalAction,\r\n            authToken,\r\n            customer: internalCustomer,\r\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\r\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\r\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\r\n            cart: checkout && mapToInternalCart(checkout),\r\n            order: order && mapToInternalOrder(order, orderMeta),\r\n            orderMeta,\r\n            payment: payment.paymentData,\r\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\r\n            quoteMeta: {\r\n                request: {\r\n                    ...paymentMeta,\r\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\r\n                },\r\n            },\r\n            source: 'bigcommerce-checkout-js-sdk',\r\n            store: pick(storeConfig && storeConfig.storeProfile, [\r\n                'storeHash',\r\n                'storeId',\r\n                'storeLanguage',\r\n                'storeName',\r\n            ]),\r\n        };\r\n    }\r\n\r\n    transformWithHostedFormData(\r\n        values: HostedInputValues,\r\n        data: HostedFormOrderData,\r\n        nonce: string,\r\n    ): PaymentRequestBody {\r\n        const {\r\n            additionalAction,\r\n            authToken,\r\n            checkout,\r\n            config,\r\n            order,\r\n            orderMeta,\r\n            payment = {},\r\n            paymentMethod,\r\n            paymentMethodMeta,\r\n        } = data;\r\n        const consignment = checkout && checkout.consignments[0];\r\n        const shippingAddress = consignment && consignment.shippingAddress;\r\n        const shippingOption = consignment && consignment.selectedShippingOption;\r\n\r\n        return {\r\n            additionalAction,\r\n            authToken,\r\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\r\n            customer:\r\n                order &&\r\n                order.billingAddress &&\r\n                checkout &&\r\n                mapToInternalCustomer(checkout.customer, order.billingAddress),\r\n            billingAddress:\r\n                order && order.billingAddress && mapToInternalAddress(order.billingAddress),\r\n            shippingAddress:\r\n                shippingAddress &&\r\n                checkout &&\r\n                mapToInternalAddress(shippingAddress, checkout.consignments),\r\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\r\n            cart: checkout && mapToInternalCart(checkout),\r\n            order: order && mapToInternalOrder(order, orderMeta),\r\n            orderMeta,\r\n            payment: this._transformHostedInputValues(values, payment, nonce),\r\n            quoteMeta: {\r\n                request: {\r\n                    ...paymentMethodMeta,\r\n                    geoCountryCode: config && config.context.geoCountryCode,\r\n                },\r\n            },\r\n            source: 'bigcommerce-checkout-js-sdk',\r\n            store:\r\n                config &&\r\n                pick(config.storeConfig.storeProfile, [\r\n                    'storeHash',\r\n                    'storeId',\r\n                    'storeLanguage',\r\n                    'storeName',\r\n                ]),\r\n        };\r\n    }\r\n\r\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\r\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\r\n            return { ...paymentMethod, gateway: paymentMethod.id };\r\n        }\r\n\r\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\r\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\r\n        }\r\n\r\n        if (paymentMethod.id === CheckoutButtonMethodType.BRAINTREE_VENMO) {\r\n            return { ...paymentMethod, id: CheckoutButtonMethodType.BRAINTREE_PAYPAL };\r\n        }\r\n\r\n        return paymentMethod;\r\n    }\r\n\r\n    private _transformHostedInputValues(\r\n        values: HostedInputValues,\r\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\r\n        nonce: string,\r\n    ): PaymentInstrument {\r\n        return 'instrumentId' in payment\r\n            ? {\r\n                  ...payment,\r\n                  ccCvv: values.cardCodeVerification,\r\n                  ccNumber:\r\n                      values.cardNumberVerification &&\r\n                      this._cardNumberFormatter.unformat(values.cardNumberVerification),\r\n                  hostedFormNonce: nonce,\r\n              }\r\n            : {\r\n                  ...payment,\r\n                  ccCvv: values.cardCode,\r\n                  ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\r\n                  ccName: values.cardName || '',\r\n                  ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\r\n                  hostedFormNonce: nonce,\r\n              };\r\n    }\r\n\r\n    private _mapShippingAddress(\r\n        checkoutState: InternalCheckoutSelectors,\r\n        paymentMethod?: PaymentMethod,\r\n    ): Address | undefined {\r\n        if (paymentMethod) {\r\n            const isBopisEnabled = paymentMethod.initializationData?.bopis?.enabled;\r\n            const requiredAddress = paymentMethod.initializationData?.bopis?.requiredAddress;\r\n            const consignments = checkoutState.consignments.getConsignments();\r\n            const isPickup = consignments?.every((consignment) => consignment.selectedPickupOption);\r\n\r\n            if (isBopisEnabled && isPickup && requiredAddress === 'none') {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        return checkoutState.shippingAddress.getShippingAddress();\r\n    }\r\n}\r\n","export enum CheckoutIncludes {\r\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\r\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\r\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\r\n}\r\n\r\nexport default interface CheckoutParams {\r\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\r\n}\r\n\r\nexport type CheckoutIncludeParam = {\r\n    [key in CheckoutIncludes]?: boolean;\r\n};\r\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { find } from 'lodash';\r\nimport { Observable, Observer } from 'rxjs';\r\n\r\nimport { AddressRequestBody } from '../address';\r\nimport { Cart } from '../cart';\r\nimport {\r\n    CheckoutIncludes,\r\n    CheckoutParams,\r\n    CheckoutRequestSender,\r\n    InternalCheckoutSelectors,\r\n    ReadableCheckoutStore,\r\n} from '../checkout';\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n} from '../common/error/errors';\r\nimport { RequestOptions } from '../common/http-request';\r\n\r\nimport Consignment, {\r\n    ConsignmentAssignmentBaseRequestBodyWithAddress,\r\n    ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\r\n    ConsignmentAssignmentRequestBody,\r\n    ConsignmentCreateRequestBody,\r\n    ConsignmentLineItem,\r\n    ConsignmentRequestBody,\r\n    ConsignmentShippingOptionRequestBody,\r\n    ConsignmentsRequestBody,\r\n    ConsignmentUpdateRequestBody,\r\n} from './consignment';\r\nimport {\r\n    ConsignmentActionType,\r\n    CreateConsignmentsAction,\r\n    DeleteConsignmentAction,\r\n    LoadShippingOptionsAction,\r\n    UpdateConsignmentAction,\r\n    UpdateShippingOptionAction,\r\n} from './consignment-actions';\r\nimport ConsignmentRequestSender from './consignment-request-sender';\r\n\r\nexport default class ConsignmentActionCreator {\r\n    constructor(\r\n        private _consignmentRequestSender: ConsignmentRequestSender,\r\n        private _checkoutRequestSender: CheckoutRequestSender,\r\n    ) {}\r\n\r\n    unassignItemsByAddress(\r\n        consignment: ConsignmentAssignmentRequestBody,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const state = store.getState();\r\n            const checkout = state.checkout.getCheckout();\r\n\r\n            if (!checkout) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n            }\r\n\r\n            const address = this._consignmentHasAddress(consignment)\r\n                ? consignment.address\r\n                : consignment.shippingAddress;\r\n\r\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\r\n\r\n            if (!existingConsignment) {\r\n                throw new InvalidArgumentError('No consignment found for the specified address');\r\n            }\r\n\r\n            const lineItems = this._removeLineItems(\r\n                consignment.lineItems,\r\n                existingConsignment,\r\n                state.cart.getCart(),\r\n            );\r\n\r\n            if (!lineItems.length) {\r\n                return this.deleteConsignment(existingConsignment.id, options)(store);\r\n            }\r\n\r\n            return this.updateConsignment(\r\n                {\r\n                    id: existingConsignment.id,\r\n                    address,\r\n                    lineItems,\r\n                },\r\n                options,\r\n            )(store);\r\n        };\r\n    }\r\n\r\n    assignItemsByAddress(\r\n        consignment: ConsignmentAssignmentRequestBody,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const state = store.getState();\r\n            const address = this._consignmentHasAddress(consignment)\r\n                ? consignment.address\r\n                : consignment.shippingAddress;\r\n            const existingConsignment = state.consignments.getConsignmentByAddress(address);\r\n\r\n            return this._createOrUpdateConsignment(\r\n                {\r\n                    id: existingConsignment && existingConsignment.id,\r\n                    address,\r\n                    lineItems: this._addLineItems(\r\n                        consignment.lineItems,\r\n                        existingConsignment,\r\n                        state.cart.getCart(),\r\n                    ),\r\n                },\r\n                options,\r\n            )(store);\r\n        };\r\n    }\r\n\r\n    selectShippingOption(\r\n        id: string,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\r\n                const state = store.getState();\r\n                const checkout = state.checkout.getCheckout();\r\n                const consignments = state.consignments.getConsignments();\r\n\r\n                if (!checkout) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                if (!consignments || !consignments.length) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingConsignments);\r\n                }\r\n\r\n                const consignmentUpdateBody = {\r\n                    id: consignments[0].id,\r\n                    shippingOptionId: id,\r\n                };\r\n\r\n                const consignmentMeta = {\r\n                    id: consignments[0].id,\r\n                };\r\n\r\n                observer.next(\r\n                    createAction(\r\n                        ConsignmentActionType.UpdateShippingOptionRequested,\r\n                        undefined,\r\n                        consignmentMeta,\r\n                    ),\r\n                );\r\n\r\n                this._consignmentRequestSender\r\n                    .updateConsignment(checkout.id, consignmentUpdateBody, options)\r\n                    .then(({ body }) => {\r\n                        observer.next(\r\n                            createAction(\r\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\r\n                                body,\r\n                                consignmentMeta,\r\n                            ),\r\n                        );\r\n\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                ConsignmentActionType.UpdateShippingOptionFailed,\r\n                                response,\r\n                                consignmentMeta,\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    loadShippingOptions(\r\n        options?: RequestOptions,\r\n    ): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\r\n                const checkout = store.getState().checkout.getCheckout();\r\n\r\n                if (!checkout) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\r\n\r\n                this._checkoutRequestSender\r\n                    .loadCheckout(checkout.id, {\r\n                        ...options,\r\n                        params: {\r\n                            include: [CheckoutIncludes.AvailableShippingOptions],\r\n                        },\r\n                    })\r\n                    .then(({ body }) => {\r\n                        observer.next(\r\n                            createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                ConsignmentActionType.LoadShippingOptionsFailed,\r\n                                response,\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    updateAddress(\r\n        address: AddressRequestBody,\r\n        options?: RequestOptions<CheckoutParams>,\r\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const consignment = this._getUpdateAddressRequestBody(address, store);\r\n            const consignments = store.getState().consignments.getConsignments();\r\n\r\n            if (consignments && consignments.length) {\r\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\r\n            }\r\n\r\n            return this._createOrUpdateConsignment(consignment, options)(store);\r\n        };\r\n    }\r\n\r\n    createConsignments(\r\n        consignments: ConsignmentsRequestBody,\r\n        options?: RequestOptions<CheckoutParams>,\r\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<CreateConsignmentsAction>) => {\r\n                const checkout = store.getState().checkout.getCheckout();\r\n\r\n                if (!checkout || !checkout.id) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\r\n\r\n                this._consignmentRequestSender\r\n                    .createConsignments(checkout.id, consignments, options)\r\n                    .then(({ body }) => {\r\n                        observer.next(\r\n                            createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                ConsignmentActionType.CreateConsignmentsFailed,\r\n                                response,\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    updateConsignment(\r\n        consignment: ConsignmentUpdateRequestBody,\r\n        options?: RequestOptions<CheckoutParams>,\r\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<UpdateConsignmentAction>) => {\r\n                const checkout = store.getState().checkout.getCheckout();\r\n\r\n                if (!checkout || !checkout.id) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                const consignmentMeta = { id: consignment.id };\r\n\r\n                observer.next(\r\n                    createAction(\r\n                        ConsignmentActionType.UpdateConsignmentRequested,\r\n                        undefined,\r\n                        consignmentMeta,\r\n                    ),\r\n                );\r\n\r\n                this._consignmentRequestSender\r\n                    .updateConsignment(checkout.id, consignment, options)\r\n                    .then(({ body }) => {\r\n                        observer.next(\r\n                            createAction(\r\n                                ConsignmentActionType.UpdateConsignmentSucceeded,\r\n                                body,\r\n                                consignmentMeta,\r\n                            ),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                ConsignmentActionType.UpdateConsignmentFailed,\r\n                                response,\r\n                                consignmentMeta,\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    deleteConsignment(\r\n        consignmentId: string,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<DeleteConsignmentAction>) => {\r\n                const checkout = store.getState().checkout.getCheckout();\r\n                const consignmentMeta = { id: consignmentId };\r\n\r\n                if (!checkout || !checkout.id) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                observer.next(\r\n                    createAction(\r\n                        ConsignmentActionType.DeleteConsignmentRequested,\r\n                        undefined,\r\n                        consignmentMeta,\r\n                    ),\r\n                );\r\n\r\n                this._consignmentRequestSender\r\n                    .deleteConsignment(checkout.id, consignmentId, options)\r\n                    .then(({ body }) => {\r\n                        observer.next(\r\n                            createAction(\r\n                                ConsignmentActionType.DeleteConsignmentSucceeded,\r\n                                body,\r\n                                consignmentMeta,\r\n                            ),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                ConsignmentActionType.DeleteConsignmentFailed,\r\n                                response,\r\n                                consignmentMeta,\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    updateShippingOption(\r\n        consignment: ConsignmentShippingOptionRequestBody,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\r\n                const checkout = store.getState().checkout.getCheckout();\r\n\r\n                if (!checkout || !checkout.id) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                const consignmentMeta = { id: consignment.id };\r\n\r\n                observer.next(\r\n                    createAction(\r\n                        ConsignmentActionType.UpdateShippingOptionRequested,\r\n                        undefined,\r\n                        consignmentMeta,\r\n                    ),\r\n                );\r\n\r\n                this._consignmentRequestSender\r\n                    .updateConsignment(checkout.id, consignment, options)\r\n                    .then(({ body }) => {\r\n                        observer.next(\r\n                            createAction(\r\n                                ConsignmentActionType.UpdateShippingOptionSucceeded,\r\n                                body,\r\n                                consignmentMeta,\r\n                            ),\r\n                        );\r\n                        observer.complete();\r\n                    })\r\n                    .catch((response) => {\r\n                        observer.error(\r\n                            createErrorAction(\r\n                                ConsignmentActionType.UpdateShippingOptionFailed,\r\n                                response,\r\n                                consignmentMeta,\r\n                            ),\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    private _createOrUpdateConsignment(\r\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\r\n        options?: RequestOptions<CheckoutParams>,\r\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const checkout = store.getState().checkout.getCheckout();\r\n\r\n            if (!checkout || !checkout.id) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n            }\r\n\r\n            if (this._isUpdateConsignmentRequest(consignment)) {\r\n                return this.updateConsignment(consignment, options)(store);\r\n            }\r\n\r\n            return this.createConsignments([consignment], options)(store);\r\n        };\r\n    }\r\n\r\n    private _getUpdateAddressRequestBody(\r\n        address: AddressRequestBody,\r\n        store: ReadableCheckoutStore,\r\n    ): ConsignmentRequestBody {\r\n        const state = store.getState();\r\n        const cart = state.cart.getCart();\r\n\r\n        if (!cart) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n        }\r\n\r\n        const { physicalItems, customItems = [] } = cart.lineItems;\r\n\r\n        return {\r\n            address,\r\n            lineItems: [...physicalItems, ...customItems].map((item) => ({\r\n                itemId: item.id,\r\n                quantity: item.quantity,\r\n            })),\r\n        };\r\n    }\r\n\r\n    private _removeLineItems(\r\n        lineItems: ConsignmentLineItem[],\r\n        consignment: Consignment,\r\n        cart?: Cart,\r\n    ): ConsignmentLineItem[] {\r\n        if (!cart) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n        }\r\n\r\n        return this._hydrateLineItems(consignment.lineItemIds, cart)\r\n            .map((existingItem) => {\r\n                const sharedItem = find(\r\n                    lineItems,\r\n                    (lineItem) => lineItem.itemId === existingItem.itemId,\r\n                );\r\n\r\n                return {\r\n                    ...existingItem,\r\n                    quantity: sharedItem\r\n                        ? existingItem.quantity - sharedItem.quantity\r\n                        : existingItem.quantity,\r\n                };\r\n            })\r\n            .filter((lineItem) => lineItem.quantity > 0);\r\n    }\r\n\r\n    private _addLineItems(\r\n        lineItems: ConsignmentLineItem[],\r\n        consignment?: Consignment,\r\n        cart?: Cart,\r\n    ): ConsignmentLineItem[] {\r\n        if (!consignment) {\r\n            return lineItems;\r\n        }\r\n\r\n        if (!cart) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n        }\r\n\r\n        return lineItems\r\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\r\n            .filter((lineItem) => lineItem.quantity > 0);\r\n    }\r\n\r\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\r\n        return lineItemIds.map((itemId) => {\r\n            const item = find(cart.lineItems.physicalItems, (lineItem) => lineItem.id === itemId);\r\n\r\n            return {\r\n                itemId,\r\n                quantity: item ? item.quantity : 0,\r\n            };\r\n        });\r\n    }\r\n\r\n    private _isUpdateConsignmentRequest(\r\n        request: ConsignmentRequestBody,\r\n    ): request is ConsignmentUpdateRequestBody {\r\n        const updateRequest = request as ConsignmentUpdateRequestBody;\r\n\r\n        return !!updateRequest.id;\r\n    }\r\n\r\n    private _consignmentHasAddress(\r\n        consignment:\r\n            | ConsignmentAssignmentBaseRequestBodyWithAddress\r\n            | ConsignmentAssignmentBaseRequestBodyWithShippingAddress,\r\n    ): consignment is ConsignmentAssignmentBaseRequestBodyWithAddress {\r\n        return typeof consignment === 'object' && 'address' in consignment;\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { Checkout, CheckoutParams } from '../checkout';\r\nimport {\r\n    ContentType,\r\n    joinIncludes,\r\n    joinOrMergeIncludes,\r\n    RequestOptions,\r\n    SDK_VERSION_HEADERS,\r\n} from '../common/http-request';\r\n\r\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\r\n\r\nconst DEFAULT_INCLUDES = [\r\n    'consignments.availableShippingOptions',\r\n    'cart.lineItems.physicalItems.options',\r\n    'cart.lineItems.digitalItems.options',\r\n    'customer',\r\n    'promotions.banners',\r\n];\r\n\r\nexport default class ConsignmentRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    createConsignments(\r\n        checkoutId: string,\r\n        consignments: ConsignmentsRequestBody,\r\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.post(url, {\r\n            body: consignments,\r\n            params: {\r\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\r\n            },\r\n            headers,\r\n            timeout,\r\n        });\r\n    }\r\n\r\n    updateConsignment(\r\n        checkoutId: string,\r\n        consignment: ConsignmentUpdateRequestBody,\r\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const { id, ...body } = consignment;\r\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.put(url, {\r\n            body,\r\n            params: {\r\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\r\n            },\r\n            headers,\r\n            timeout,\r\n        });\r\n    }\r\n\r\n    deleteConsignment(\r\n        checkoutId: string,\r\n        consignmentId: string,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n        const include = joinIncludes(DEFAULT_INCLUDES);\r\n\r\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\r\n    }\r\n}\r\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, from, of } from 'rxjs';\r\nimport { catchError, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { InternalCheckoutSelectors } from '../checkout';\r\nimport { throwErrorAction } from '../common/error';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\n\r\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\r\nimport GoogleRecaptcha from './google-recaptcha';\r\nimport isSpamProtectionExecuteSucceededAction from './is-spam-protection-succeeded-action';\r\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\r\nimport { SpamProtectionOptions } from './spam-protection-options';\r\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\r\n\r\nexport default class SpamProtectionActionCreator {\r\n    constructor(\r\n        private _googleRecaptcha: GoogleRecaptcha,\r\n        private _requestSender: SpamProtectionRequestSender,\r\n    ) {}\r\n\r\n    initialize(\r\n        options?: SpamProtectionOptions,\r\n    ): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            concat(\r\n                of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\r\n                defer(async () => {\r\n                    const spamProtectionElementId = options\r\n                        ? options.containerId\r\n                        : 'spamProtectionContainer';\r\n\r\n                    if (!options && !document.getElementById(spamProtectionElementId)) {\r\n                        const spamProtectionElement = document.createElement('div');\r\n\r\n                        spamProtectionElement.setAttribute('id', spamProtectionElementId);\r\n                        document.body.appendChild(spamProtectionElement);\r\n                    }\r\n\r\n                    const state = store.getState();\r\n                    const storeConfig = state.config.getStoreConfigOrThrow();\r\n                    const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\r\n\r\n                    await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\r\n\r\n                    return createAction(SpamProtectionActionType.InitializeSucceeded);\r\n                }),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(SpamProtectionActionType.InitializeFailed, error),\r\n                ),\r\n            );\r\n    }\r\n\r\n    verifyCheckoutSpamProtection(): ThunkAction<SpamProtectionAction> {\r\n        return (store) =>\r\n            defer(() => {\r\n                const state = store.getState();\r\n                const checkout = state.checkout.getCheckout();\r\n\r\n                if (!checkout) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                }\r\n\r\n                return concat(\r\n                    of(createAction(SpamProtectionActionType.VerifyCheckoutRequested)),\r\n                    from(this.execute()(store)).pipe(\r\n                        switchMap((action) => {\r\n                            if (\r\n                                !isSpamProtectionExecuteSucceededAction(action) ||\r\n                                !action.payload\r\n                            ) {\r\n                                return of(action);\r\n                            }\r\n\r\n                            return from(\r\n                                this._requestSender.validate(checkout.id, action.payload.token),\r\n                            ).pipe(\r\n                                switchMap(({ body }) =>\r\n                                    concat(\r\n                                        of(action),\r\n                                        of(\r\n                                            createAction(\r\n                                                SpamProtectionActionType.VerifyCheckoutSucceeded,\r\n                                                body,\r\n                                            ),\r\n                                        ),\r\n                                    ),\r\n                                ),\r\n                            );\r\n                        }),\r\n                    ),\r\n                ).pipe(\r\n                    catchError((error) =>\r\n                        throwErrorAction(SpamProtectionActionType.VerifyCheckoutFailed, error),\r\n                    ),\r\n                );\r\n            });\r\n    }\r\n\r\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            concat(\r\n                of(createAction(SpamProtectionActionType.ExecuteRequested)),\r\n                this.initialize()(store),\r\n                this._googleRecaptcha\r\n                    .execute()\r\n                    .pipe(take(1))\r\n                    .pipe(\r\n                        switchMap(async ({ error, token }) => {\r\n                            if (error instanceof SpamProtectionChallengeNotCompletedError) {\r\n                                throw error;\r\n                            }\r\n\r\n                            if (error || !token) {\r\n                                throw new SpamProtectionFailedError();\r\n                            }\r\n\r\n                            return createAction(SpamProtectionActionType.ExecuteSucceeded, {\r\n                                token,\r\n                            });\r\n                        }),\r\n                    ),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(SpamProtectionActionType.ExecuteFailed, error),\r\n                ),\r\n            );\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { Checkout } from '../checkout';\r\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\r\n\r\nexport default class SpamProtectionRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    validate(\r\n        checkoutId: string,\r\n        token: string,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\r\n    }\r\n}\r\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { InternalCheckoutSelectors } from '../checkout';\r\nimport { throwErrorAction } from '../common/error';\r\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\r\nimport { RequestOptions } from '../common/http-request';\r\n\r\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\r\nimport StoreCreditRequestSender from './store-credit-request-sender';\r\n\r\nexport default class StoreCreditActionCreator {\r\n    constructor(private _storeCreditRequestSender: StoreCreditRequestSender) {}\r\n\r\n    applyStoreCredit(\r\n        useStoreCredit: boolean,\r\n        options?: RequestOptions,\r\n    ): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\r\n        return (store) =>\r\n            concat(\r\n                of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\r\n                defer(async () => {\r\n                    const state = store.getState();\r\n                    const checkout = state.checkout.getCheckout();\r\n\r\n                    if (!checkout) {\r\n                        throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n                    }\r\n\r\n                    const { body } = await (useStoreCredit\r\n                        ? this._storeCreditRequestSender.applyStoreCredit(checkout.id, options)\r\n                        : this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\r\n\r\n                    return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\r\n                }),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error),\r\n                ),\r\n            );\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\r\nimport {\r\n    ContentType,\r\n    joinIncludes,\r\n    RequestOptions,\r\n    SDK_VERSION_HEADERS,\r\n} from '../common/http-request';\r\n\r\nexport default class StoreCreditRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    applyStoreCredit(\r\n        checkoutId: string,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.post(url, {\r\n            headers,\r\n            timeout,\r\n            params: {\r\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\r\n            },\r\n        });\r\n    }\r\n\r\n    removeStoreCredit(\r\n        checkoutId: string,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Checkout>> {\r\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.delete(url, {\r\n            headers,\r\n            timeout,\r\n            params: {\r\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\r\n            },\r\n        });\r\n    }\r\n}\r\n","import { RequestError } from '../../common/error/errors';\r\n\r\n/**\r\n * This error should be thrown when the subscriptions fails to be updated\r\n */\r\nexport default class UpdateSubscriptionsError extends RequestError {\r\n    constructor(response?: Response) {\r\n        super(response);\r\n\r\n        this.name = 'UpdateSubscriptionsError';\r\n        this.type = 'update_subscriptions';\r\n    }\r\n}\r\n","import { createAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { throwErrorAction } from '../common/error';\r\nimport { RequestOptions } from '../common/http-request';\r\nimport {\r\n    Subscriptions,\r\n    SubscriptionsActionType,\r\n    SubscriptionsRequestSender,\r\n    UpdateSubscriptionsAction,\r\n} from '../subscription';\r\n\r\nimport { UpdateSubscriptionsError } from './errors';\r\n\r\nexport default class SubscriptionsActionCreator {\r\n    constructor(private _subscriptionsRequestSender: SubscriptionsRequestSender) {}\r\n\r\n    updateSubscriptions(\r\n        subscriptions: Subscriptions,\r\n        options?: RequestOptions,\r\n    ): Observable<UpdateSubscriptionsAction> {\r\n        return concat(\r\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\r\n            defer(async () => {\r\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(\r\n                    subscriptions,\r\n                    options,\r\n                );\r\n\r\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\r\n            }),\r\n        ).pipe(\r\n            catchError((error) =>\r\n                throwErrorAction(\r\n                    SubscriptionsActionType.UpdateSubscriptionsFailed,\r\n                    new UpdateSubscriptionsError(error),\r\n                ),\r\n            ),\r\n        );\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { ContentType, RequestOptions, SDK_VERSION_HEADERS } from '../common/http-request';\r\n\r\nimport { Subscriptions } from './subscriptions';\r\n\r\nexport default class SubscriptionsRequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    updateSubscriptions(\r\n        subscriptions: Subscriptions,\r\n        { timeout }: RequestOptions = {},\r\n    ): Promise<Response<Subscriptions>> {\r\n        const url = '/api/storefront/subscriptions';\r\n        const headers = {\r\n            Accept: ContentType.JsonV1,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\r\n    }\r\n}\r\n","import { memoize } from 'lodash';\r\n\r\nimport isPlainObject from './is-plain-object';\r\n\r\nconst cloneDeep = memoize(<T>(input: T): T => {\r\n    if (Array.isArray(input)) {\r\n        // Fixed in later versions of typescript https://github.com/microsoft/TypeScript/issues/36390\r\n        return (input as any[]).map((value: T[keyof T]) => cloneDeepSafe(value)) as any;\r\n    }\r\n\r\n    if (isPlainObject(input)) {\r\n        return (Object.keys(input) as Array<keyof T>).reduce(\r\n            (result, key) => ({\r\n                ...result,\r\n                [key]: cloneDeepSafe(input[key]),\r\n            }),\r\n            {},\r\n        ) as T;\r\n    }\r\n\r\n    return input;\r\n});\r\n\r\n// Use WeakMap as the MapCache, this allows for better garbage collection\r\n// There's a deprecated `clear` method in the lodash implementation\r\n// of MapCache, hence the `any`\r\ncloneDeep.cache = new WeakMap() as any;\r\n\r\n/**\r\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\r\n * a memoized function using an instance of `WeakMap` as its cache. Without this\r\n * wrapper, the memoized function will throw an error if it is called with a\r\n * non-object argument.\r\n */\r\nconst cloneDeepSafe = <T>(input: T): T => {\r\n    return typeof input === 'object' && input !== null ? cloneDeep(input) : input;\r\n};\r\n\r\n/**\r\n * Clone the return value of a function. If the result is the same as previous\r\n * calls, return the previous clone instead of cloning it again.\r\n */\r\nexport default function cloneResult<T extends Func>(fn: T): T {\r\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\r\n}\r\n\r\nexport type Func = (...args: any[]) => any;\r\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { InternalCheckoutSelectors } from '../checkout';\r\nimport { cloneResult as clone } from '../common/utility';\r\n\r\nexport default function createPaymentIntegrationSelectors({\r\n    billingAddress: { getBillingAddress, getBillingAddressOrThrow },\r\n    cart: { getCart, getCartOrThrow },\r\n    checkout: { getCheckout, getCheckoutOrThrow },\r\n    config: { getHost, getLocale, getStoreConfig, getStoreConfigOrThrow },\r\n    consignments: { getConsignments, getConsignmentsOrThrow },\r\n    customer: { getCustomer, getCustomerOrThrow },\r\n    instruments: { getCardInstrument, getCardInstrumentOrThrow },\r\n    order: { getOrder, getOrderOrThrow },\r\n    payment: {\r\n        getPaymentToken,\r\n        getPaymentTokenOrThrow,\r\n        getPaymentId,\r\n        getPaymentIdOrThrow,\r\n        getPaymentStatus,\r\n        getPaymentStatusOrThrow,\r\n        getPaymentRedirectUrl,\r\n        getPaymentRedirectUrlOrThrow,\r\n        isPaymentDataRequired,\r\n    },\r\n    paymentMethods: { getPaymentMethod, getPaymentMethodOrThrow },\r\n    paymentStrategies: { isInitialized: isPaymentMethodInitialized },\r\n    shippingAddress: {\r\n        getShippingAddress,\r\n        getShippingAddressOrThrow,\r\n        getShippingAddresses,\r\n        getShippingAddressesOrThrow,\r\n    },\r\n}: InternalCheckoutSelectors): PaymentIntegrationSelectors {\r\n    return {\r\n        getHost: clone(getHost),\r\n        getLocale: clone(getLocale),\r\n        getBillingAddress: clone(getBillingAddress),\r\n        getBillingAddressOrThrow: clone(getBillingAddressOrThrow),\r\n        getCart: clone(getCart),\r\n        getCartOrThrow: clone(getCartOrThrow),\r\n        getCheckout: clone(getCheckout),\r\n        getCheckoutOrThrow: clone(getCheckoutOrThrow),\r\n        getStoreConfig: clone(getStoreConfig),\r\n        getStoreConfigOrThrow: clone(getStoreConfigOrThrow),\r\n        getConsignments: clone(getConsignments),\r\n        getConsignmentsOrThrow: clone(getConsignmentsOrThrow),\r\n        getCustomer: clone(getCustomer),\r\n        getCustomerOrThrow: clone(getCustomerOrThrow),\r\n        getCardInstrument: clone(getCardInstrument),\r\n        getCardInstrumentOrThrow: clone(getCardInstrumentOrThrow),\r\n        getOrder: clone(getOrder),\r\n        getOrderOrThrow: clone(getOrderOrThrow),\r\n        getPaymentToken,\r\n        getPaymentTokenOrThrow,\r\n        getPaymentId,\r\n        getPaymentIdOrThrow,\r\n        getPaymentStatus,\r\n        getPaymentStatusOrThrow,\r\n        getPaymentRedirectUrl,\r\n        getPaymentRedirectUrlOrThrow,\r\n        getPaymentMethod: clone(getPaymentMethod),\r\n        getPaymentMethodOrThrow: clone(getPaymentMethodOrThrow),\r\n        getShippingAddress: clone(getShippingAddress),\r\n        getShippingAddressOrThrow: clone(getShippingAddressOrThrow),\r\n        getShippingAddresses: clone(getShippingAddresses),\r\n        getShippingAddressesOrThrow: clone(getShippingAddressesOrThrow),\r\n        isPaymentDataRequired,\r\n        isPaymentMethodInitialized,\r\n    };\r\n}\r\n","import {\r\n    BillingAddressRequestBody,\r\n    BuyNowCartRequestBody,\r\n    Cart,\r\n    HostedForm,\r\n    HostedFormOptions,\r\n    InitializeOffsitePaymentConfig,\r\n    OrderRequestBody,\r\n    Payment,\r\n    PaymentIntegrationSelectors,\r\n    PaymentIntegrationService,\r\n    RequestOptions,\r\n    ShippingAddressRequestBody,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { BillingAddressActionCreator } from '../billing';\r\nimport { CartRequestSender } from '../cart';\r\nimport { CheckoutActionCreator, CheckoutStore } from '../checkout';\r\nimport { DataStoreProjection } from '../common/data-store';\r\nimport { CustomerActionCreator, CustomerCredentials } from '../customer';\r\nimport { HostedFormFactory } from '../hosted-form';\r\nimport { OrderActionCreator } from '../order';\r\nimport PaymentActionCreator from '../payment/payment-action-creator';\r\nimport PaymentMethodActionCreator from '../payment/payment-method-action-creator';\r\nimport { ConsignmentActionCreator } from '../shipping';\r\nimport { SpamProtectionActionCreator } from '../spam-protection';\r\nimport { StoreCreditActionCreator } from '../store-credit';\r\n\r\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\r\n\r\nexport default class DefaultPaymentIntegrationService implements PaymentIntegrationService {\r\n    private _storeProjection: DataStoreProjection<PaymentIntegrationSelectors>;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _storeProjectionFactory: PaymentIntegrationStoreProjectionFactory,\r\n        private _checkoutActionCreator: CheckoutActionCreator,\r\n        private _hostedFormFactory: HostedFormFactory,\r\n        private _orderActionCreator: OrderActionCreator,\r\n        private _billingAddressActionCreator: BillingAddressActionCreator,\r\n        private _consignmentActionCreator: ConsignmentActionCreator,\r\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\r\n        private _paymentActionCreator: PaymentActionCreator,\r\n        private _customerActionCreator: CustomerActionCreator,\r\n        private _cartRequestSender: CartRequestSender,\r\n        private _storeCreditActionCreator: StoreCreditActionCreator,\r\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\r\n    ) {\r\n        this._storeProjection = this._storeProjectionFactory.create(this._store);\r\n    }\r\n\r\n    createHostedForm(host: string, options: HostedFormOptions): HostedForm {\r\n        return this._hostedFormFactory.create(host, options);\r\n    }\r\n\r\n    subscribe(\r\n        subscriber: (state: PaymentIntegrationSelectors) => void,\r\n        ...filters: Array<(state: PaymentIntegrationSelectors) => unknown>\r\n    ): () => void {\r\n        return this._storeProjection.subscribe(subscriber, ...filters);\r\n    }\r\n\r\n    getState(): PaymentIntegrationSelectors {\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async initializeOffsitePayment(\r\n        initializeOffsitePaymentConfig: InitializeOffsitePaymentConfig,\r\n    ): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(\r\n            this._paymentActionCreator.initializeOffsitePayment(initializeOffsitePaymentConfig),\r\n        );\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async loadCheckout(id?: string): Promise<PaymentIntegrationSelectors> {\r\n        if (id) {\r\n            await this._store.dispatch(this._checkoutActionCreator.loadCheckout(id));\r\n        } else {\r\n            await this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout());\r\n        }\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async loadDefaultCheckout(): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async loadPaymentMethod(\r\n        methodId: string,\r\n        options?: RequestOptions,\r\n    ): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(\r\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId, options),\r\n        );\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async submitOrder(\r\n        payload?: OrderRequestBody,\r\n        options?: RequestOptions,\r\n    ): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async submitPayment(payment: Payment): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async finalizeOrder(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\r\n        const {\r\n            order: { getOrderOrThrow },\r\n        } = this._store.getState();\r\n\r\n        await this._store.dispatch(\r\n            this._orderActionCreator.finalizeOrder(getOrderOrThrow().orderId, options),\r\n        );\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async updateBillingAddress(\r\n        payload: BillingAddressRequestBody,\r\n    ): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(this._billingAddressActionCreator.updateAddress(payload));\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async updateShippingAddress(\r\n        payload: ShippingAddressRequestBody,\r\n    ): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(this._consignmentActionCreator.updateAddress(payload));\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async selectShippingOption(\r\n        id: string,\r\n        options?: RequestOptions,\r\n    ): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(\r\n            this._consignmentActionCreator.selectShippingOption(id, options),\r\n        );\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async signInCustomer(\r\n        credentials: CustomerCredentials,\r\n        options?: RequestOptions,\r\n    ): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(\r\n            this._customerActionCreator.signInCustomer(credentials, options),\r\n        );\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async signOutCustomer(options?: RequestOptions): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(this._customerActionCreator.signOutCustomer(options));\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async createBuyNowCart(\r\n        buyNowCartRequestBody: BuyNowCartRequestBody,\r\n        options?: RequestOptions,\r\n    ): Promise<Cart> {\r\n        const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\r\n            buyNowCartRequestBody,\r\n            options,\r\n        );\r\n\r\n        return buyNowCart;\r\n    }\r\n\r\n    async applyStoreCredit(\r\n        useStoreCredit: boolean,\r\n        options?: RequestOptions,\r\n    ): Promise<PaymentIntegrationSelectors> {\r\n        await this._store.dispatch(\r\n            this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options),\r\n        );\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n\r\n    async verifyCheckoutSpamProtection(): Promise<PaymentIntegrationSelectors> {\r\n        const { checkout } = this._store.getState();\r\n        const { shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\r\n\r\n        if (shouldExecuteSpamCheck) {\r\n            await this._store.dispatch(\r\n                this._spamProtectionActionCreator.verifyCheckoutSpamProtection(),\r\n            );\r\n        }\r\n\r\n        return this._storeProjection.getState();\r\n    }\r\n}\r\n","import { Action, createAction, createDataStore, ReadableDataStore } from '@bigcommerce/data-store';\r\n\r\nenum ProjectionActionType {\r\n    Synchronize = 'SYNCHRONIZE',\r\n}\r\n\r\ninterface SynchronizeAction<TState> extends Action<TState> {\r\n    type: ProjectionActionType.Synchronize;\r\n    payload: TState;\r\n}\r\n\r\nexport interface DataStoreProjection<TTransformedState>\r\n    extends ReadableDataStore<TTransformedState> {\r\n    notifyState(): void;\r\n}\r\n\r\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\r\n    store: ReadableDataStore<TState>,\r\n    stateTransformer: (state: TState) => TTransformedState,\r\n): DataStoreProjection<TTransformedState> {\r\n    const projection = createDataStore<\r\n        TState | undefined,\r\n        SynchronizeAction<TState>,\r\n        TTransformedState\r\n    >(\r\n        (state, action) =>\r\n            action.type === ProjectionActionType.Synchronize ? action.payload : state,\r\n        store.getState(),\r\n        { stateTransformer },\r\n    );\r\n\r\n    store.subscribe(\r\n        (state) => {\r\n            projection.dispatch(\r\n                createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>,\r\n            );\r\n        },\r\n        { initial: false },\r\n    );\r\n\r\n    return projection;\r\n}\r\n","import { PaymentIntegrationSelectors } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\r\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\r\n\r\nexport default class PaymentIntegrationStoreProjectionFactory {\r\n    constructor(\r\n        private _transformSelectors: (\r\n            selectors: InternalCheckoutSelectors,\r\n        ) => PaymentIntegrationSelectors,\r\n    ) {}\r\n\r\n    create(store: ReadableCheckoutStore): DataStoreProjection<PaymentIntegrationSelectors> {\r\n        return createDataStoreProjection(store, this._transformSelectors);\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"shallowequal\");","export interface RootCacheKeyMap {\r\n    maps: ChildCacheKeyMap[];\r\n}\r\n\r\nexport interface IntermediateCacheKeyMap {\r\n    maps: ChildCacheKeyMap[];\r\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\r\n    usedCount: number;\r\n    value: any;\r\n}\r\n\r\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\r\n    cacheKey: string;\r\n}\r\n\r\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\r\n\r\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\r\n    return Object.prototype.hasOwnProperty.call(map, 'cacheKey');\r\n}\r\n\r\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\r\n    return Object.prototype.hasOwnProperty.call(map, 'parentMap');\r\n}\r\n","import { noop } from 'lodash';\r\nimport shallowEqual from 'shallowequal';\r\n\r\nimport {\r\n    ChildCacheKeyMap,\r\n    IntermediateCacheKeyMap,\r\n    isRootCacheKeyMap,\r\n    isTerminalCacheKeyMap,\r\n    RootCacheKeyMap,\r\n    TerminalCacheKeyMap,\r\n} from './cache-key-maps';\r\n\r\nexport interface CacheKeyResolverOptions {\r\n    maxSize?: number;\r\n    onExpire?(key: string): void;\r\n    isEqual?(valueA: any, valueB: any): boolean;\r\n}\r\n\r\ninterface ResolveResult {\r\n    index: number;\r\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\r\n    map?: TerminalCacheKeyMap;\r\n}\r\n\r\nexport default class CacheKeyResolver {\r\n    private _lastId = 0;\r\n    private _map: RootCacheKeyMap = { maps: [] };\r\n    private _usedMaps: TerminalCacheKeyMap[] = [];\r\n    private _options: Required<CacheKeyResolverOptions>;\r\n\r\n    constructor(options?: CacheKeyResolverOptions) {\r\n        this._options = {\r\n            maxSize: 0,\r\n            isEqual: shallowEqual,\r\n            onExpire: noop,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    getKey(...args: any[]): string {\r\n        const result = this._resolveMap(...args);\r\n        const { index, parentMap } = result;\r\n        let { map } = result;\r\n\r\n        if (map && map.cacheKey) {\r\n            map.usedCount++;\r\n        } else {\r\n            map = this._generateMap(parentMap, args.slice(index));\r\n        }\r\n\r\n        // Keep track of the least used map so we can remove it if the size of\r\n        // the stack exceeds the maximum size.\r\n        this._removeLeastUsedMap(map);\r\n\r\n        return map.cacheKey;\r\n    }\r\n\r\n    getUsedCount(...args: any[]): number {\r\n        const { map } = this._resolveMap(...args);\r\n\r\n        return map ? map.usedCount : 0;\r\n    }\r\n\r\n    private _resolveMap(...args: any[]): ResolveResult {\r\n        let index = 0;\r\n        let parentMap = this._map;\r\n\r\n        // Traverse the tree to find the linked list of maps that match the\r\n        // arguments of the call. Each intermediate or terminal map contains a\r\n        // value that could be used to match with the arguments. The last map in\r\n        // the list (the terminal) should contain a cache key. If it can does\r\n        // not exist, we will return a falsy value so that the caller could\r\n        // handle and generate a new cache key.\r\n        while (parentMap.maps.length) {\r\n            let isMatched = false;\r\n\r\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\r\n                const map = parentMap.maps[mapIndex];\r\n\r\n                if (!this._options.isEqual(map.value, args[index])) {\r\n                    continue;\r\n                }\r\n\r\n                // Move the most recently used map to the top of the stack for\r\n                // quicker access\r\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\r\n\r\n                if (\r\n                    (args.length === 0 || index === args.length - 1) &&\r\n                    isTerminalCacheKeyMap(map)\r\n                ) {\r\n                    return { index, map, parentMap };\r\n                }\r\n\r\n                isMatched = true;\r\n                parentMap = map;\r\n                index++;\r\n\r\n                break;\r\n            }\r\n\r\n            if (!isMatched) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return { index, parentMap };\r\n    }\r\n\r\n    private _generateMap(\r\n        parent: RootCacheKeyMap | IntermediateCacheKeyMap,\r\n        args: any[],\r\n    ): TerminalCacheKeyMap {\r\n        let index = 0;\r\n        let parentMap = parent;\r\n        let map: IntermediateCacheKeyMap;\r\n\r\n        do {\r\n            map = {\r\n                maps: [],\r\n                parentMap,\r\n                usedCount: 1,\r\n                value: args[index],\r\n            };\r\n\r\n            // Continue to build the tree of maps so that it could be resolved\r\n            // next time when the function is called with the same set of\r\n            // arguments.\r\n            parentMap.maps.unshift(map);\r\n\r\n            parentMap = map;\r\n            index++;\r\n        } while (index < args.length);\r\n\r\n        const terminalMap = map as TerminalCacheKeyMap;\r\n\r\n        terminalMap.cacheKey = `${++this._lastId}`;\r\n\r\n        return terminalMap;\r\n    }\r\n\r\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\r\n        if (!this._options.maxSize) {\r\n            return;\r\n        }\r\n\r\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\r\n\r\n        this._usedMaps.splice(index === -1 ? 0 : index, index === -1 ? 0 : 1, recentlyUsedMap);\r\n\r\n        if (this._usedMaps.length <= this._options.maxSize) {\r\n            return;\r\n        }\r\n\r\n        const map = this._usedMaps.pop();\r\n\r\n        if (!map) {\r\n            return;\r\n        }\r\n\r\n        this._removeMap(map);\r\n        this._options.onExpire(map.cacheKey);\r\n    }\r\n\r\n    private _removeMap(map: ChildCacheKeyMap): void {\r\n        if (!map.parentMap) {\r\n            return;\r\n        }\r\n\r\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\r\n\r\n        if (isRootCacheKeyMap(map.parentMap)) {\r\n            return;\r\n        }\r\n\r\n        this._removeMap(map.parentMap);\r\n    }\r\n}\r\n","import { memoize } from '@bigcommerce/memoize';\r\n\r\nimport { bindDecorator, CacheKeyResolver, isEqual, isPrivate } from '../utility';\r\n\r\n/**\r\n * Decorates a class by patching all of its methods to cache their return values\r\n * and return them if they are called again with the same set of parameters. The\r\n * decorator also binds all the methods to the calling instance so it can be\r\n * destructed.\r\n */\r\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\r\n    const decoratedTarget = class extends target {};\r\n\r\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\r\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\r\n\r\n        if (!descriptor || key === 'constructor') {\r\n            return;\r\n        }\r\n\r\n        Object.defineProperty(\r\n            decoratedTarget.prototype,\r\n            key,\r\n            selectorMethodDecorator(target.prototype, key, descriptor),\r\n        );\r\n    });\r\n\r\n    return decoratedTarget;\r\n}\r\n\r\nfunction selectorMethodDecorator<T extends Method>(\r\n    target: object,\r\n    key: string,\r\n    descriptor: TypedPropertyDescriptor<T>,\r\n): TypedPropertyDescriptor<T> {\r\n    if (typeof descriptor.value !== 'function') {\r\n        return descriptor;\r\n    }\r\n\r\n    let resolver = new CacheKeyResolver();\r\n    let method = descriptor.value;\r\n    let memoizedMethod = memoize(method);\r\n\r\n    return bindDecorator(target, key, {\r\n        get() {\r\n            const value = ((...args: any[]) => {\r\n                const cachedValue = memoizedMethod.call(this, ...args);\r\n\r\n                if (resolver.getUsedCount(...args) === 1) {\r\n                    return cachedValue;\r\n                }\r\n\r\n                const newValue = method.call(this, ...args);\r\n\r\n                if (isEqual(newValue, cachedValue, { keyFilter: (key) => !isPrivate(key) })) {\r\n                    return cachedValue;\r\n                }\r\n\r\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\r\n\r\n                return newValue;\r\n            }) as T;\r\n\r\n            Object.defineProperty(this, key, { ...descriptor, value });\r\n\r\n            return value;\r\n        },\r\n        set(value) {\r\n            resolver = new CacheKeyResolver();\r\n            method = value;\r\n            memoizedMethod = memoize(method);\r\n        },\r\n    });\r\n}\r\n\r\nexport type Constructor<T> = new (...args: any[]) => T;\r\ntype Method = (...args: any[]) => any;\r\n","export default function isPrivate(key: string): boolean {\r\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\r\n}\r\n","import { InternalCheckoutSelectors } from '../checkout';\r\nimport { selector } from '../common/selector';\r\n\r\nimport CheckoutButtonSelector from './checkout-button-selector';\r\nimport { CheckoutButtonMethodType } from './strategies';\r\n\r\n@selector\r\nexport default class CheckoutButtonErrorSelector {\r\n    private _checkoutButton: CheckoutButtonSelector;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(selectors: InternalCheckoutSelectors) {\r\n        this._checkoutButton = selectors.checkoutButton;\r\n    }\r\n\r\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\r\n        return this._checkoutButton.getInitializeError(methodId);\r\n    }\r\n\r\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\r\n        return this._checkoutButton.getDeinitializeError(methodId);\r\n    }\r\n}\r\n","import { InternalCheckoutSelectors } from '../checkout';\r\nimport { selector } from '../common/selector';\r\n\r\nimport CheckoutButtonSelector from './checkout-button-selector';\r\nimport { CheckoutButtonMethodType } from './strategies';\r\n\r\n@selector\r\nexport default class CheckoutButtonStatusSelector {\r\n    private _checkoutButton: CheckoutButtonSelector;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(selectors: InternalCheckoutSelectors) {\r\n        this._checkoutButton = selectors.checkoutButton;\r\n    }\r\n\r\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\r\n        return this._checkoutButton.isInitializing(methodId);\r\n    }\r\n\r\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\r\n        return this._checkoutButton.isDeinitializing(methodId);\r\n    }\r\n}\r\n","import { InternalCheckoutSelectors } from '../checkout';\r\n\r\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\r\nimport CheckoutButtonSelectors from './checkout-button-selectors';\r\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\r\n\r\nexport default function createCheckoutButtonSelectors(\r\n    selectors: InternalCheckoutSelectors,\r\n): CheckoutButtonSelectors {\r\n    const errors = new CheckoutButtonErrorSelector(selectors);\r\n    const statuses = new CheckoutButtonStatusSelector(selectors);\r\n\r\n    return {\r\n        errors,\r\n        statuses,\r\n    };\r\n}\r\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\r\nimport { isElementId, setUniqueElementId } from '../common/dom';\r\nimport { bindDecorator as bind } from '../common/utility';\r\n\r\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\r\nimport CheckoutButtonSelectors from './checkout-button-selectors';\r\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\r\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\r\n\r\n@bind\r\nexport default class CheckoutButtonInitializer {\r\n    private _state: CheckoutButtonSelectors;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator,\r\n    ) {\r\n        this._state = createCheckoutButtonSelectors(this._store.getState());\r\n\r\n        this._store.subscribe((state) => {\r\n            this._state = createCheckoutButtonSelectors(state);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a snapshot of the current state.\r\n     *\r\n     * The method returns a new instance every time there is a change in the\r\n     * state. You can query the state by calling any of its getter methods.\r\n     *\r\n     * ```js\r\n     * const state = service.getState();\r\n     *\r\n     * console.log(state.errors.getInitializeButtonError());\r\n     * console.log(state.statuses.isInitializingButton());\r\n     * ```\r\n     *\r\n     * @returns The current customer's checkout state\r\n     */\r\n    getState(): CheckoutButtonSelectors {\r\n        return this._state;\r\n    }\r\n\r\n    /**\r\n     * Subscribes to any changes to the current state.\r\n     *\r\n     * The method registers a callback function and executes it every time there\r\n     * is a change in the current state.\r\n     *\r\n     * ```js\r\n     * service.subscribe(state => {\r\n     *     console.log(state.statuses.isInitializingButton());\r\n     * });\r\n     * ```\r\n     *\r\n     * The method can be configured to notify subscribers only regarding\r\n     * relevant changes, by providing a filter function.\r\n     *\r\n     * ```js\r\n     * const filter = state => state.errors.getInitializeButtonError();\r\n     *\r\n     * // Only trigger the subscriber when the cart changes.\r\n     * service.subscribe(state => {\r\n     *     console.log(state.errors.getInitializeButtonError())\r\n     * }, filter);\r\n     * ```\r\n     *\r\n     * @param subscriber - The function to subscribe to state changes.\r\n     * @param filters - One or more functions to filter out irrelevant state\r\n     * changes. If more than one function is provided, the subscriber will only\r\n     * be triggered if all conditions are met.\r\n     * @returns A function, if called, will unsubscribe the subscriber.\r\n     */\r\n    subscribe(\r\n        subscriber: (state: CheckoutButtonSelectors) => void,\r\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\r\n    ): () => void {\r\n        return this._store.subscribe(\r\n            () => subscriber(this.getState()),\r\n            (state) => state.checkoutButton.getState(),\r\n            ...filters.map(\r\n                (filter) => (state: InternalCheckoutSelectors) =>\r\n                    filter(createCheckoutButtonSelectors(state)),\r\n            ),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initializes the checkout button of a payment method.\r\n     *\r\n     * When the checkout button is initialized, it will be inserted into the DOM,\r\n     * ready to be interacted with by the customer.\r\n     *\r\n     * ```js\r\n     * initializer.initializeButton({\r\n     *     methodId: 'braintreepaypal',\r\n     *     containerId: 'checkoutButton',\r\n     *     braintreepaypal: {\r\n     *     },\r\n     * });\r\n     * ```\r\n     *\r\n     * @param options - Options for initializing the checkout button.\r\n     * @returns A promise that resolves to the current state.\r\n     */\r\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\r\n        const containerIds = isElementId(options.containerId)\r\n            ? [options.containerId]\r\n            : setUniqueElementId(options.containerId, `${options.methodId}-container`);\r\n\r\n        return Promise.all(\r\n            containerIds.map((containerId) => {\r\n                const action = this._buttonStrategyActionCreator.initialize({\r\n                    ...options,\r\n                    containerId,\r\n                });\r\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\r\n\r\n                return this._store.dispatch(action, { queueId });\r\n            }),\r\n        ).then(() => this.getState());\r\n    }\r\n\r\n    /**\r\n     * De-initializes the checkout button by performing any necessary clean-ups.\r\n     *\r\n     * ```js\r\n     * await service.deinitializeButton({\r\n     *     methodId: 'braintreepaypal',\r\n     * });\r\n     * ```\r\n     *\r\n     * @param options - Options for deinitializing the checkout button.\r\n     * @returns A promise that resolves to the current state.\r\n     */\r\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\r\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\r\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\r\n\r\n        return this._store.dispatch(action, { queueId }).then(() => this.getState());\r\n    }\r\n}\r\n","/* eslint-disable no-useless-escape */\r\nexport default function isElementId(id: string): boolean {\r\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\r\n}\r\n","import { uniqueId } from 'lodash';\r\n\r\nimport { InvalidArgumentError } from '../error/errors';\r\n\r\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\r\n    const containers = document.querySelectorAll(selector);\r\n\r\n    if (!containers.length) {\r\n        throw new InvalidArgumentError(\r\n            `Unable to find any element with the specified selector: ${selector}`,\r\n        );\r\n    }\r\n\r\n    return Array.prototype.slice.call(containers).map((container: HTMLElement) => {\r\n        if (!container.id) {\r\n            container.id = uniqueId(idPrefix);\r\n        }\r\n\r\n        return container.id;\r\n    });\r\n}\r\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\r\nimport { concat, defer, empty, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { CheckoutButtonStrategy as CheckoutButtonStrategyV2 } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { InternalCheckoutSelectors } from '../checkout';\r\nimport { throwErrorAction } from '../common/error';\r\nimport { Registry } from '../common/registry';\r\nimport { PaymentMethodActionCreator } from '../payment';\r\n\r\nimport {\r\n    CheckoutButtonActionType,\r\n    DeinitializeButtonAction,\r\n    InitializeButtonAction,\r\n} from './checkout-button-actions';\r\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\r\nimport CheckoutButtonRegistryV2 from './checkout-button-strategy-registry-v2';\r\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\r\n\r\nexport default class CheckoutButtonStrategyActionCreator {\r\n    constructor(\r\n        private _registry: Registry<CheckoutButtonStrategy>,\r\n        private _registryV2: CheckoutButtonRegistryV2,\r\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\r\n    ) {}\r\n\r\n    initialize(\r\n        options: CheckoutButtonInitializeOptions,\r\n    ): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const meta = {\r\n                methodId: options.methodId,\r\n                containerId: options.containerId,\r\n            };\r\n\r\n            if (\r\n                store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)\r\n            ) {\r\n                return empty();\r\n            }\r\n\r\n            const paymentMethodRequestParams = options.currencyCode\r\n                ? { params: { currencyCode: options.currencyCode } }\r\n                : {};\r\n\r\n            const paymentMethodRequestOptions = {\r\n                ...paymentMethodRequestParams,\r\n                timeout: options.timeout,\r\n                useCache: true,\r\n            };\r\n\r\n            return concat(\r\n                of(\r\n                    createAction(\r\n                        CheckoutButtonActionType.InitializeButtonRequested,\r\n                        undefined,\r\n                        meta,\r\n                    ),\r\n                ),\r\n                this._paymentMethodActionCreator.loadPaymentMethod(\r\n                    options.methodId,\r\n                    paymentMethodRequestOptions,\r\n                )(store),\r\n                defer(() =>\r\n                    this._getStrategy(options.methodId)\r\n                        .initialize(options)\r\n                        .then(() =>\r\n                            createAction(\r\n                                CheckoutButtonActionType.InitializeButtonSucceeded,\r\n                                undefined,\r\n                                meta,\r\n                            ),\r\n                        ),\r\n                ),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta),\r\n                ),\r\n            );\r\n        };\r\n    }\r\n\r\n    deinitialize(\r\n        options: CheckoutButtonOptions,\r\n    ): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\r\n        return (store) => {\r\n            const meta = { methodId: options.methodId };\r\n\r\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\r\n                return empty();\r\n            }\r\n\r\n            return concat(\r\n                of(\r\n                    createAction(\r\n                        CheckoutButtonActionType.DeinitializeButtonRequested,\r\n                        undefined,\r\n                        meta,\r\n                    ),\r\n                ),\r\n                defer(() =>\r\n                    this._getStrategy(options.methodId)\r\n                        .deinitialize()\r\n                        .then(() =>\r\n                            createAction(\r\n                                CheckoutButtonActionType.DeinitializeButtonSucceeded,\r\n                                undefined,\r\n                                meta,\r\n                            ),\r\n                        ),\r\n                ),\r\n            ).pipe(\r\n                catchError((error) =>\r\n                    throwErrorAction(\r\n                        CheckoutButtonActionType.DeinitializeButtonFailed,\r\n                        error,\r\n                        meta,\r\n                    ),\r\n                ),\r\n            );\r\n        };\r\n    }\r\n\r\n    private _getStrategy(\r\n        methodId: CheckoutButtonMethodType,\r\n    ): CheckoutButtonStrategy | CheckoutButtonStrategyV2 {\r\n        let strategy: CheckoutButtonStrategy | CheckoutButtonStrategyV2;\r\n\r\n        try {\r\n            strategy = this._registryV2.get({ id: methodId });\r\n        } catch {\r\n            strategy = this._registry.get(methodId);\r\n        }\r\n\r\n        return strategy;\r\n    }\r\n}\r\n","import { InvalidArgumentError } from '../error/errors';\r\n\r\nimport Factory from './factory';\r\n\r\nexport default class Registry<T, K extends string = string> {\r\n    private _factories: { [key: string]: Factory<T> };\r\n    private _instances: { [key: string]: T };\r\n    private _defaultToken: string;\r\n    private _useFallback: string | boolean;\r\n    private _tokenResolver: (token: string, registeredTokens: string[]) => string | undefined;\r\n\r\n    constructor(options?: RegistryOptions) {\r\n        this._factories = {};\r\n        this._instances = {};\r\n        this._defaultToken = options?.defaultToken ?? 'default';\r\n        this._useFallback = options?.useFallback ?? true;\r\n        this._tokenResolver = options?.tokenResolver ?? ((token) => token);\r\n    }\r\n\r\n    get(token?: K, cacheToken?: string): T {\r\n        try {\r\n            return this._getInstance(\r\n                token || this._defaultToken,\r\n                cacheToken || token || this._defaultToken,\r\n            );\r\n        } catch (error) {\r\n            if (!this._useFallback) {\r\n                throw error;\r\n            }\r\n\r\n            return this._getInstance(this._defaultToken, cacheToken || this._defaultToken);\r\n        }\r\n    }\r\n\r\n    register(token: K, factory: Factory<T>): void {\r\n        if (this._hasFactory(token)) {\r\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\r\n        }\r\n\r\n        this._factories[token] = factory;\r\n    }\r\n\r\n    protected _hasFactory(token: string): boolean {\r\n        return !!this._factories[token];\r\n    }\r\n\r\n    private _hasInstance(token: string): boolean {\r\n        return !!this._instances[token];\r\n    }\r\n\r\n    private _getInstance(token: string, cacheToken: string): T {\r\n        if (!this._hasInstance(cacheToken)) {\r\n            const resolvedToken = this._tokenResolver(token, Object.keys(this._factories));\r\n            const factory = resolvedToken && this._factories[resolvedToken];\r\n\r\n            if (!factory) {\r\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\r\n            }\r\n\r\n            this._instances[cacheToken] = factory();\r\n        }\r\n\r\n        return this._instances[cacheToken];\r\n    }\r\n}\r\n\r\nexport interface RegistryOptions {\r\n    defaultToken?: string;\r\n    useFallback?: boolean;\r\n    tokenResolver?(token: string, registeredTokens: string[]): string | undefined;\r\n}\r\n","import { Cart } from '../cart';\r\n\r\nimport getLineItemsCount from './getLineItemsCount';\r\n\r\nexport default function getShippableItemsCount(cart: Cart): number {\r\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\r\n}\r\n","import { reduce } from 'lodash';\r\n\r\nimport { LineItem } from '../cart';\r\n\r\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\r\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\r\n}\r\n","import { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\r\n\r\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\r\n\r\nexport interface AmazonPayV2Options {\r\n    environment: EnvironmentType;\r\n}\r\n\r\nexport interface AmazonPayV2SDK {\r\n    Pay: AmazonPayV2Client;\r\n}\r\n\r\nexport interface RequestConfig {\r\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\r\n    estimatedOrderAmount?: AmazonPayV2Price;\r\n    productType?: AmazonPayV2PayOptions;\r\n}\r\n\r\nexport interface AmazonPayV2Button {\r\n    /**\r\n     * Allows you to define custom actions.\r\n     */\r\n    onClick: (callback: () => void) => void;\r\n\r\n    /**\r\n     * Initiates the Amazon Pay checkout.\r\n     */\r\n    initCheckout(requestConfig: RequestConfig): void;\r\n}\r\n\r\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\r\n\r\nexport interface AmazonPayV2Client {\r\n    /**\r\n     * Render the Amazon Pay button to a HTML container element.\r\n     *\r\n     * @param containerId - HTML element id.\r\n     * @param params - Button rendering params.\r\n     */\r\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\r\n\r\n    /**\r\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\r\n     *\r\n     * @param buttonId - HTML element id.\r\n     * @param options - Element binding options.\r\n     */\r\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\r\n\r\n    /**\r\n     * Allow buyers to sign out from their Amazon account.\r\n     */\r\n    signout(): void;\r\n}\r\n\r\nexport interface AmazonPayV2HostWindow extends Window {\r\n    amazon?: AmazonPayV2SDK;\r\n}\r\n\r\nexport interface AmazonPayV2ButtonConfig {\r\n    /**\r\n     * Amazon Pay merchant account identifier.\r\n     */\r\n    merchantId: string;\r\n\r\n    /**\r\n     * Placement of the Amazon Pay button on your website.\r\n     */\r\n    placement: AmazonPayV2Placement;\r\n\r\n    /**\r\n     * Ledger currency provided during registration for the given merchant identifier.\r\n     */\r\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\r\n\r\n    /**\r\n     * Product type selected for checkout. Default is 'PayAndShip'.\r\n     */\r\n    productType?: AmazonPayV2PayOptions;\r\n\r\n    /**\r\n     * Color of the Amazon Pay button.\r\n     */\r\n    buttonColor?: AmazonPayV2ButtonColor;\r\n\r\n    /**\r\n     * Language used to render the button and text on Amazon Pay hosted pages.\r\n     */\r\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\r\n\r\n    /**\r\n     * Sets button to Sandbox environment. You do not have to set this parameter\r\n     * if your `publicKeyId` has an environment prefix. Default is false.\r\n     */\r\n    sandbox?: boolean;\r\n\r\n    /**\r\n     * Sets Amazon Pay button design.\r\n     */\r\n    design?: AmazonPayV2ButtonDesign;\r\n}\r\n\r\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\r\n    /**\r\n     * Configuration for calling the endpoint to Create Checkout Session.\r\n     */\r\n    createCheckoutSession: AmazonPayV2CheckoutSession;\r\n}\r\n\r\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\r\n    /**\r\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\r\n     * parameter if your `publicKeyId` does not have an environment prefix.\r\n     */\r\n    publicKeyId?: string;\r\n\r\n    /**\r\n     * It does not have to match the final order amount if the buyer updates\r\n     * their order after starting checkout. Amazon Pay will use this value to\r\n     * assess transaction risk and prevent buyers from selecting payment methods\r\n     * that can't be used to process the order.\r\n     */\r\n    estimatedOrderAmount?: AmazonPayV2Price;\r\n\r\n    /**\r\n     * Create Checkout Session configuration.\r\n     */\r\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\r\n}\r\n\r\nexport interface AmazonPayV2CheckoutSession {\r\n    /**\r\n     * Endpoint URL to Create Checkout Session.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * HTTP request method. Default is 'POST'.\r\n     */\r\n    method?: 'GET' | 'POST';\r\n\r\n    /**\r\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\r\n     */\r\n    extractAmazonCheckoutSessionId?: string;\r\n}\r\n\r\nexport interface AmazonPayV2CheckoutSessionConfig {\r\n    /**\r\n     * A payload that Amazon Pay will use to create a Checkout Session object.\r\n     */\r\n    payloadJSON: string;\r\n\r\n    /**\r\n     * Payload's signature.\r\n     */\r\n    signature: string;\r\n\r\n    /**\r\n     * Credential provided by Amazon Pay. You do not have to set this parameter\r\n     * if your `publicKeyId` has an environment prefix.\r\n     */\r\n    publicKeyId?: string;\r\n}\r\n\r\nexport interface AmazonPayV2Price {\r\n    /**\r\n     * Transaction amount.\r\n     */\r\n    amount: string;\r\n\r\n    /**\r\n     * Transaction currency code in ISO 4217 format. Example: USD.\r\n     */\r\n    currencyCode: string;\r\n}\r\n\r\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\r\n\r\nexport interface AmazonPayV2ChangeActionOptions {\r\n    /**\r\n     * Amazon Pay Checkout Session identifier.\r\n     */\r\n    amazonCheckoutSessionId: string;\r\n\r\n    /**\r\n     * Update requested by the buyer.\r\n     */\r\n    changeAction: AmazonPayV2ChangeActionType;\r\n}\r\n\r\nexport enum AmazonPayV2Regions {\r\n    de = 'eu',\r\n    jp = 'fe',\r\n    uk = 'eu',\r\n    us = 'na',\r\n}\r\n\r\nexport enum AmazonPayV2CheckoutLanguage {\r\n    en_US = 'en_US',\r\n    en_GB = 'en_GB',\r\n    de_DE = 'de_DE',\r\n    fr_FR = 'fr_FR',\r\n    it_IT = 'it_IT',\r\n    es_ES = 'es_ES',\r\n    ja_JP = 'ja_JP',\r\n}\r\n\r\nexport enum AmazonPayV2Placement {\r\n    /** Initial or main page. */\r\n    Home = 'Home',\r\n\r\n    /** Product details page. */\r\n    Product = 'Product',\r\n\r\n    /** Cart review page before buyer starts checkout. */\r\n    Cart = 'Cart',\r\n\r\n    /** Any page after buyer starts checkout. */\r\n    Checkout = 'Checkout',\r\n\r\n    /** Any page that doesn't fit the previous descriptions. */\r\n    Other = 'Other',\r\n}\r\n\r\nexport enum AmazonPayV2LedgerCurrency {\r\n    USD = 'USD',\r\n    EUR = 'EUR',\r\n    GBP = 'GBP',\r\n    JPY = 'JPY',\r\n}\r\n\r\nexport enum AmazonPayV2PayOptions {\r\n    /** Select this product type if you need the buyer's shipping details. */\r\n    PayAndShip = 'PayAndShip',\r\n\r\n    /** Select this product type if you do not need the buyer's shipping details. */\r\n    PayOnly = 'PayOnly',\r\n}\r\n\r\nexport enum AmazonPayV2ButtonColor {\r\n    Gold = 'Gold',\r\n    LightGray = 'LightGray',\r\n    DarkGray = 'DarkGray',\r\n}\r\n\r\nexport enum AmazonPayV2ButtonDesign {\r\n    C0001 = 'C0001',\r\n}\r\n\r\nexport interface AmazonPayV2ButtonRenderingOptions {\r\n    checkoutState: InternalCheckoutSelectors;\r\n    containerId: string;\r\n    decoupleCheckoutInitiation?: boolean;\r\n    methodId: string;\r\n    buttonColor?: AmazonPayV2ButtonColor;\r\n    options?: AmazonPayV2ButtonParameters;\r\n    placement: AmazonPayV2Placement;\r\n}\r\n","import { PaymentMethod } from '../..';\r\nimport { InternalCheckoutSelectors } from '../../../../../core/src/checkout';\r\nimport { getShippableItemsCount } from '../../../../../core/src/shipping';\r\nimport { guard } from '../../../../src/common/utility';\r\nimport { StoreProfile } from '../../../../src/config';\r\nimport { CheckoutSettings } from '../../../../src/config/config';\r\nimport BuyNowCartRequestBody from '../../../cart/buy-now-cart-request-body';\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    NotInitializedError,\r\n    NotInitializedErrorType,\r\n} from '../../../common/error/errors';\r\n\r\nimport {\r\n    AmazonPayV2Button,\r\n    AmazonPayV2ButtonColor,\r\n    AmazonPayV2ButtonConfig,\r\n    AmazonPayV2ButtonDesign,\r\n    AmazonPayV2ButtonParameters,\r\n    AmazonPayV2ButtonRenderingOptions,\r\n    AmazonPayV2ChangeActionType,\r\n    AmazonPayV2CheckoutSessionConfig,\r\n    AmazonPayV2NewButtonParams,\r\n    AmazonPayV2PayOptions,\r\n    AmazonPayV2Placement,\r\n    AmazonPayV2Price,\r\n    AmazonPayV2SDK,\r\n    RequestConfig,\r\n} from './amazon-pay-v2';\r\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\r\n\r\nexport default class AmazonPayV2PaymentProcessor {\r\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\r\n    private _buttonParentContainer?: HTMLDivElement;\r\n    private _amazonPayV2Button?: AmazonPayV2Button;\r\n    private _buyNowCartRequestBody?: BuyNowCartRequestBody;\r\n\r\n    constructor(private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\r\n\r\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\r\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\r\n        this._buttonParentContainer =\r\n            this._buttonParentContainer || this._createAmazonPayButtonParentContainer();\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        this._amazonPayV2Button = undefined;\r\n        this._buttonParentContainer?.remove();\r\n        this._buttonParentContainer = undefined;\r\n        this._amazonPayV2SDK = undefined;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    bindButton(\r\n        buttonId: string,\r\n        sessionId: string,\r\n        changeAction: AmazonPayV2ChangeActionType,\r\n    ): void {\r\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\r\n            amazonCheckoutSessionId: sessionId,\r\n            changeAction,\r\n        });\r\n    }\r\n\r\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\r\n        this._amazonPayV2Button = this._getAmazonPayV2SDK().Pay.renderButton(\r\n            `#${containerId}`,\r\n            options,\r\n        );\r\n    }\r\n\r\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\r\n        const requestConfig = this._prepareRequestConfig(createCheckoutSessionConfig);\r\n\r\n        this._getAmazonPayV2Button().onClick(() => {\r\n            this._getAmazonPayV2Button().initCheckout(requestConfig);\r\n        });\r\n    }\r\n\r\n    prepareCheckoutWithCreationRequestConfig(\r\n        createCheckoutConfig: () => Promise<{\r\n            createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\r\n            estimatedOrderAmount: AmazonPayV2Price;\r\n            productType: AmazonPayV2PayOptions;\r\n        }>,\r\n    ) {\r\n        this._getAmazonPayV2Button().onClick(async () => {\r\n            const config = await createCheckoutConfig();\r\n            const requestConfig = this._prepareRequestConfig(\r\n                config.createCheckoutSessionConfig,\r\n                config.estimatedOrderAmount,\r\n                config.productType,\r\n            );\r\n\r\n            this._getAmazonPayV2Button().initCheckout(requestConfig);\r\n        });\r\n    }\r\n\r\n    async signout(): Promise<void> {\r\n        if (this._amazonPayV2SDK) {\r\n            this._amazonPayV2SDK.Pay.signout();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    renderAmazonPayButton({\r\n        buttonColor,\r\n        checkoutState,\r\n        containerId,\r\n        decoupleCheckoutInitiation = false,\r\n        methodId,\r\n        options,\r\n        placement,\r\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement {\r\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\r\n\r\n        if (!container) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to render the Amazon Pay button to an invalid HTML container element.',\r\n            );\r\n        }\r\n\r\n        const { id: parentContainerId } = container.appendChild(this._getButtonParentContainer());\r\n\r\n        if (options) {\r\n            options.design = AmazonPayV2ButtonDesign.C0001;\r\n        }\r\n\r\n        const amazonPayV2ButtonOptions =\r\n            options ??\r\n            this._getAmazonPayV2ButtonOptions(\r\n                checkoutState,\r\n                methodId,\r\n                placement,\r\n                decoupleCheckoutInitiation,\r\n                buttonColor,\r\n            );\r\n\r\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\r\n\r\n        return this._getButtonParentContainer();\r\n    }\r\n\r\n    setCartRequestBody(buyNowCartRequestBody: BuyNowCartRequestBody) {\r\n        this._buyNowCartRequestBody = buyNowCartRequestBody;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    isPh4Enabled(\r\n        features: CheckoutSettings['features'],\r\n        storeCountryCode: StoreProfile['storeCountryCode'],\r\n    ): boolean {\r\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\r\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\r\n\r\n        if (isPh4Enabled && isPh4UsOnly) {\r\n            return storeCountryCode === 'US';\r\n        }\r\n\r\n        return isPh4Enabled;\r\n    }\r\n\r\n    private _prepareRequestConfig(\r\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\r\n        estimatedOrderAmount?: AmazonPayV2Price,\r\n        productType?: AmazonPayV2PayOptions,\r\n    ): RequestConfig {\r\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\r\n\r\n        return {\r\n            createCheckoutSessionConfig: this._isEnvironmentSpecific(publicKeyId)\r\n                ? signedPayload\r\n                : createCheckoutSessionConfig,\r\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\r\n            ...(productType && { productType }),\r\n        };\r\n    }\r\n\r\n    private _createAmazonPayButtonParentContainer(): HTMLDivElement {\r\n        const uid = Math.random().toString(16).substr(-4);\r\n        const parentContainer = document.createElement('div');\r\n\r\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\r\n\r\n        return parentContainer;\r\n    }\r\n\r\n    private _getAmazonPayV2ButtonOptions(\r\n        {\r\n            cart: { getCart },\r\n            checkout: { getCheckout },\r\n            config: { getStoreConfigOrThrow },\r\n            paymentMethods: { getPaymentMethodOrThrow },\r\n        }: InternalCheckoutSelectors,\r\n        methodId: string,\r\n        placement: AmazonPayV2Placement,\r\n        decoupleCheckoutInitiation = false,\r\n        buttonColor = AmazonPayV2ButtonColor.Gold,\r\n    ): AmazonPayV2ButtonParameters {\r\n        const {\r\n            config: { merchantId, testMode },\r\n            initializationData: {\r\n                checkoutLanguage,\r\n                checkoutSessionMethod,\r\n                createCheckoutSessionConfig,\r\n                extractAmazonCheckoutSessionId,\r\n                ledgerCurrency,\r\n                publicKeyId,\r\n            },\r\n        } = getPaymentMethodOrThrow(methodId);\r\n\r\n        if (!merchantId || !ledgerCurrency) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\r\n            merchantId,\r\n            ledgerCurrency,\r\n            checkoutLanguage,\r\n            placement,\r\n            buttonColor,\r\n            design: AmazonPayV2ButtonDesign.C0001,\r\n        };\r\n\r\n        if (this._buyNowCartRequestBody) {\r\n            return {\r\n                ...buttonBaseConfig,\r\n                sandbox: !!testMode,\r\n            };\r\n        }\r\n\r\n        const cart = getCart();\r\n\r\n        buttonBaseConfig.productType =\r\n            cart && getShippableItemsCount(cart) === 0\r\n                ? AmazonPayV2PayOptions.PayOnly\r\n                : AmazonPayV2PayOptions.PayAndShip;\r\n\r\n        const {\r\n            checkoutSettings: { features },\r\n            storeProfile: { shopPath, storeCountryCode },\r\n        } = getStoreConfigOrThrow();\r\n\r\n        if (this.isPh4Enabled(features, storeCountryCode)) {\r\n            const amount = getCheckout()?.outstandingBalance.toString();\r\n            const currencyCode = cart?.currency.code;\r\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\r\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\r\n\r\n            if (this._isEnvironmentSpecific(publicKeyId)) {\r\n                buttonOptions.publicKeyId = publicKeyId;\r\n                tmpConfig = createCheckoutSessionConfig;\r\n            } else {\r\n                buttonOptions.sandbox = !!testMode;\r\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\r\n            }\r\n\r\n            if (!decoupleCheckoutInitiation) {\r\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\r\n            }\r\n\r\n            if (amount && currencyCode) {\r\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\r\n            }\r\n\r\n            return buttonOptions;\r\n        }\r\n\r\n        const createCheckoutSession = {\r\n            method: checkoutSessionMethod,\r\n            url: features['INT-5826.amazon_relative_url']\r\n                ? `/remote-checkout/${methodId}/payment-session`\r\n                : `${shopPath}/remote-checkout/${methodId}/payment-session`,\r\n            extractAmazonCheckoutSessionId,\r\n        };\r\n\r\n        return {\r\n            ...buttonBaseConfig,\r\n            createCheckoutSession,\r\n            sandbox: !!testMode,\r\n        };\r\n    }\r\n\r\n    private _isEnvironmentSpecific(publicKeyId: string): boolean {\r\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\r\n    }\r\n\r\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\r\n        return this._getOrThrow(this._amazonPayV2SDK);\r\n    }\r\n\r\n    private _getButtonParentContainer(): HTMLDivElement {\r\n        return this._getOrThrow(this._buttonParentContainer);\r\n    }\r\n\r\n    private _getAmazonPayV2Button(): AmazonPayV2Button {\r\n        return this._getOrThrow(this._amazonPayV2Button);\r\n    }\r\n\r\n    private _getOrThrow<T>(value?: T): T {\r\n        return guard(\r\n            value,\r\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\r\n        );\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * This error should be thrown when the client library of a payment method fails\r\n * to load, or for some reason, it is inaccessible.\r\n */\r\nexport default class PaymentMethodClientUnavailableError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\r\n        );\r\n\r\n        this.name = 'PaymentMethodClientUnavailableError';\r\n        this.type = 'payment_method_client_unavailable';\r\n    }\r\n}\r\n","import { ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { PaymentMethodClientUnavailableError } from '../../errors';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\r\n\r\nexport default class AmazonPayV2ScriptLoader {\r\n    constructor(\r\n        private _scriptLoader: ScriptLoader,\r\n        private _window: AmazonPayV2HostWindow = window,\r\n    ) {}\r\n\r\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\r\n        const { initializationData: { region = 'us' } = {} } = method;\r\n\r\n        const amazonPayV2Region = (AmazonPayV2Regions as any)[region];\r\n\r\n        await this._scriptLoader.loadScript(\r\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\r\n        );\r\n\r\n        if (!this._window.amazon) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this._window.amazon;\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\n/**\r\n * Throw this error if the shopper is using a browser version that is not\r\n * supported by us or any third party provider we use.\r\n */\r\nexport default class UnsupportedBrowserError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(message || 'Unsupported browser error');\r\n\r\n        this.name = 'UnsupportedBrowserError';\r\n        this.type = 'unsupported_browser';\r\n    }\r\n}\r\n","import { Omit } from '../../../common/types';\r\nimport {\r\n    GooglePayBraintreeDataRequest,\r\n    GooglePayBraintreePaymentDataRequestV1,\r\n    GooglePayCreator,\r\n    GooglePaymentData,\r\n    TokenizePayload,\r\n} from '../googlepay';\r\nimport { PaypalAuthorizeData, PaypalButtonOptions, PaypalButtonRender, PaypalSDK } from '../paypal';\r\n\r\nimport {\r\n    VisaCheckoutInitOptions,\r\n    VisaCheckoutPaymentSuccessPayload,\r\n    VisaCheckoutTokenizedPayload,\r\n} from './visacheckout';\r\n\r\n/**\r\n *\r\n * Constants\r\n *\r\n */\r\nexport const PAYPAL_COMPONENTS = ['buttons', 'messages'];\r\n\r\n/**\r\n *\r\n * Common\r\n *\r\n */\r\nexport interface BraintreeModuleCreator<\r\n    TInstance,\r\n    TOptions = BraintreeModuleCreatorConfig,\r\n    TError = BraintreeError,\r\n> {\r\n    create(\r\n        config: TOptions,\r\n        callback?: (error: TError, instance: TInstance) => void,\r\n    ): Promise<TInstance>;\r\n}\r\n\r\nexport interface BraintreeModuleCreatorConfig {\r\n    client?: BraintreeClient;\r\n    authorization?: string;\r\n}\r\n\r\nexport interface BraintreeModule {\r\n    teardown(): Promise<void>;\r\n}\r\n\r\nexport interface BraintreeSDK {\r\n    client?: BraintreeClientCreator;\r\n    dataCollector?: BraintreeDataCollectorCreator;\r\n    googlePayment?: GooglePayCreator;\r\n    hostedFields?: BraintreeHostedFieldsCreator;\r\n    paypal?: BraintreePaypalCreator;\r\n    paypalCheckout?: BraintreePaypalCheckoutCreator;\r\n    threeDSecure?: BraintreeThreeDSecureCreator;\r\n    venmo?: BraintreeVenmoCheckoutCreator;\r\n    visaCheckout?: BraintreeVisaCheckoutCreator;\r\n}\r\n\r\nexport interface BraintreePaypalRequest {\r\n    amount: string | number;\r\n    billingAgreementDescription?: string;\r\n    currency?: string;\r\n    displayName?: string;\r\n    enableShippingAddress: true;\r\n    flow: 'checkout' | 'vault';\r\n    intent?: 'authorize' | 'order' | 'sale';\r\n    landingPageType?: 'login' | 'billing';\r\n    locale?: string;\r\n    offerCredit?: boolean;\r\n    shippingAddressEditable?: boolean;\r\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\r\n    useraction?: 'commit';\r\n}\r\n\r\nexport interface BraintreeShippingAddressOverride {\r\n    line1: string;\r\n    line2?: string;\r\n    city: string;\r\n    state: string;\r\n    postalCode: string;\r\n    countryCode: string;\r\n    phone?: string;\r\n    recipientName?: string;\r\n}\r\n\r\nexport interface BraintreeTokenizePayload {\r\n    nonce: string;\r\n    type: 'PaypalAccount' | 'VenmoAccount';\r\n    details: BraintreeDetails;\r\n    creditFinancingOffered?: {\r\n        totalCost: {\r\n            value: string;\r\n            currency: string;\r\n        };\r\n        term: number;\r\n        monthlyPayment: {\r\n            value: string;\r\n            currency: string;\r\n        };\r\n        totalInsterest: {\r\n            value: string;\r\n            currency: string;\r\n        };\r\n        payerAcceptance: boolean;\r\n        cartAmountImmutable: boolean;\r\n    };\r\n}\r\n\r\nexport interface BraintreeDetails {\r\n    username?: string;\r\n    email?: string;\r\n    payerId?: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    countryCode?: string;\r\n    phone?: string;\r\n    shippingAddress?: BraintreeShippingAddress;\r\n    billingAddress?: BraintreeAddress;\r\n}\r\n\r\nexport interface BraintreeAddress {\r\n    line1: string;\r\n    line2: string;\r\n    city: string;\r\n    state: string;\r\n    postalCode: string;\r\n    countryCode: string;\r\n}\r\n\r\nexport interface BraintreeShippingAddress extends BraintreeAddress {\r\n    recipientName: string;\r\n}\r\n\r\nexport interface BraintreeVerifyPayload {\r\n    nonce: string;\r\n    details: {\r\n        cardType: string;\r\n        lastFour: string;\r\n        lastTwo: string;\r\n    };\r\n    description: string;\r\n    liabilityShiftPossible: boolean;\r\n    liabilityShifted: boolean;\r\n}\r\n\r\nexport interface BraintreeError extends Error {\r\n    type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN';\r\n    code: string;\r\n    details?: unknown;\r\n}\r\n\r\n/**\r\n *\r\n * Braintree Client\r\n *\r\n */\r\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\r\n\r\nexport interface BraintreeClient {\r\n    request(payload: BraintreeRequestData): Promise<BraintreeTokenizeResponse>;\r\n    getVersion(): string | void;\r\n}\r\n\r\nexport interface BraintreeRequestData {\r\n    data: {\r\n        creditCard: {\r\n            billingAddress?: {\r\n                countryCodeAlpha2: string;\r\n                locality: string;\r\n                countryName: string;\r\n                postalCode: string;\r\n                streetAddress: string;\r\n            };\r\n            cardholderName: string;\r\n            cvv?: string;\r\n            expirationDate: string;\r\n            number: string;\r\n            postalCode?: string;\r\n            options: {\r\n                validate: boolean;\r\n            };\r\n        };\r\n    };\r\n    endpoint: string;\r\n    method: string;\r\n}\r\n\r\nexport interface BraintreeTokenizeResponse {\r\n    creditCards: Array<{ nonce: string }>;\r\n}\r\n\r\n/**\r\n *\r\n * Braintree Data Collector\r\n *\r\n */\r\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\r\n    BraintreeDataCollector,\r\n    BraintreeDataCollectorCreatorConfig\r\n>;\r\n\r\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\r\n    kount?: boolean;\r\n    paypal?: boolean;\r\n}\r\n\r\nexport interface BraintreeDataCollector extends BraintreeModule {\r\n    deviceData?: string;\r\n}\r\n\r\n/**\r\n *\r\n * Braintree Google Pay\r\n *\r\n */\r\nexport interface BraintreeGooglePayThreeDSecure {\r\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\r\n}\r\n\r\nexport interface BraintreeGooglePayThreeDSecureOptions {\r\n    nonce: string;\r\n    amount: number;\r\n    showLoader?: boolean;\r\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\r\n}\r\n\r\nexport interface GooglePayBraintreeSDK extends BraintreeModule {\r\n    createPaymentDataRequest(\r\n        request?: GooglePayBraintreeDataRequest,\r\n    ): GooglePayBraintreePaymentDataRequestV1;\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\r\n}\r\n\r\n/**\r\n *\r\n * Braintree Hosted Fields\r\n *\r\n */\r\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\r\n    BraintreeHostedFields,\r\n    BraintreeHostedFieldsCreatorConfig\r\n>;\r\n\r\nexport interface BraintreeHostedFields {\r\n    teardown(): Promise<void>;\r\n    tokenize(\r\n        options?: BraintreeHostedFieldsTokenizeOptions,\r\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\r\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\r\n}\r\n\r\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\r\n    fields: {\r\n        number?: BraintreeHostedFieldOption;\r\n        expirationDate?: BraintreeHostedFieldOption;\r\n        expirationMonth?: BraintreeHostedFieldOption;\r\n        expirationYear?: BraintreeHostedFieldOption;\r\n        cvv?: BraintreeHostedFieldOption;\r\n        postalCode?: BraintreeHostedFieldOption;\r\n    };\r\n    styles?: {\r\n        input?: { [key: string]: string };\r\n        '.invalid'?: { [key: string]: string };\r\n        '.valid'?: { [key: string]: string };\r\n        ':focus'?: { [key: string]: string };\r\n    };\r\n}\r\n\r\nexport interface BraintreeHostedFieldOption {\r\n    container: string | HTMLElement;\r\n    placeholder?: string;\r\n    type?: string;\r\n    formatInput?: boolean;\r\n    maskInput?: boolean | { character?: string; showLastFour?: string };\r\n    select?: boolean | { options?: string[] };\r\n    maxCardLength?: number;\r\n    maxlength?: number;\r\n    minlength?: number;\r\n    prefill?: string;\r\n    rejectUnsupportedCards?: boolean;\r\n    supportedCardBrands?: { [key: string]: boolean };\r\n    internalLabel?: string;\r\n}\r\n\r\nexport interface BraintreeHostedFieldsState {\r\n    cards: BraintreeHostedFieldsCard[];\r\n    emittedBy: string;\r\n    fields: {\r\n        number?: BraintreeHostedFieldsFieldData;\r\n        expirationDate?: BraintreeHostedFieldsFieldData;\r\n        expirationMonth?: BraintreeHostedFieldsFieldData;\r\n        expirationYear?: BraintreeHostedFieldsFieldData;\r\n        cvv?: BraintreeHostedFieldsFieldData;\r\n        postalCode?: BraintreeHostedFieldsFieldData;\r\n    };\r\n}\r\n\r\nexport interface BraintreeHostedFieldsCard {\r\n    type: string;\r\n    niceType: string;\r\n    code: { name: string; size: number };\r\n}\r\n\r\nexport interface BraintreeFormFieldState {\r\n    isFocused: boolean;\r\n    isEmpty: boolean;\r\n    isPotentiallyValid: boolean;\r\n    isValid: boolean;\r\n}\r\n\r\nexport interface BraintreeHostedFieldsFieldData extends BraintreeFormFieldState {\r\n    container: HTMLElement;\r\n}\r\n\r\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\r\n\r\nexport type BraintreeFormErrorDataKeys =\r\n    | 'number'\r\n    | 'expirationDate'\r\n    | 'expirationMonth'\r\n    | 'expirationYear'\r\n    | 'cvv'\r\n    | 'postalCode';\r\n\r\nexport type BraintreeFormErrorsData = Partial<\r\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\r\n>;\r\n\r\nexport interface BraintreeHostedFieldsTokenizeOptions {\r\n    vault?: boolean;\r\n    fieldsToTokenize?: string[];\r\n    cardholderName?: string;\r\n    billingAddress?: BraintreeBillingAddressRequestData;\r\n}\r\n\r\nexport interface BraintreeHostedFieldsTokenizePayload {\r\n    nonce: string;\r\n    details: {\r\n        bin: string;\r\n        cardType: string;\r\n        expirationMonth: string;\r\n        expirationYear: string;\r\n        lastFour: string;\r\n        lastTwo: string;\r\n    };\r\n    description: string;\r\n    type: string;\r\n    binData: {\r\n        commercial: string;\r\n        countryOfIssuance: string;\r\n        debit: string;\r\n        durbinRegulated: string;\r\n        healthcare: string;\r\n        issuingBank: string;\r\n        payroll: string;\r\n        prepaid: string;\r\n        productId: string;\r\n    };\r\n}\r\n\r\nexport interface BraintreeBillingAddressRequestData {\r\n    postalCode?: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    company?: string;\r\n    streetAddress?: string;\r\n    extendedAddress?: string;\r\n    locality?: string;\r\n    region?: string;\r\n    countryCodeNumeric?: string;\r\n    countryCodeAlpha2?: string;\r\n    countryCodeAlpha3?: string;\r\n    countryName?: string;\r\n}\r\n\r\nexport interface BraintreeHostedFormError extends BraintreeError {\r\n    details?: {\r\n        invalidFieldKeys?: string[];\r\n    };\r\n}\r\n\r\n/**\r\n *\r\n * Braintree 3D Secure\r\n *\r\n */\r\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\r\n    BraintreeThreeDSecure,\r\n    BraintreeThreeDSecureCreatorConfig\r\n>;\r\n\r\nexport interface BraintreeThreeDSecure extends BraintreeModule {\r\n    verifyCard(options: BraintreeThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\r\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\r\n}\r\n\r\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\r\n    version?: number;\r\n}\r\n\r\nexport interface BraintreeThreeDSecureOptions {\r\n    nonce: string;\r\n    amount: number;\r\n    challengeRequested: boolean;\r\n    showLoader?: boolean;\r\n    addFrame(error: Error | undefined, iframe: HTMLIFrameElement): void;\r\n    removeFrame(): void;\r\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\r\n}\r\n\r\ninterface BraintreeThreeDSecureVerificationData {\r\n    lookup: {\r\n        threeDSecureVersion: string;\r\n    };\r\n    paymentMethod: BraintreeVerifyPayload;\r\n    requiresUserAuthentication: boolean;\r\n    threeDSecureInfo: {\r\n        liabilityShiftPossible: boolean;\r\n        liabilityShifted: boolean;\r\n    };\r\n}\r\n\r\n/**\r\n *\r\n * Braintree PayPal\r\n *\r\n */\r\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\r\n\r\nexport interface BraintreePaypal {\r\n    closeWindow(): void;\r\n    focusWindow(): void;\r\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\r\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\r\n}\r\n\r\n/**\r\n *\r\n * Braintree PayPal Checkout\r\n *\r\n */\r\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\r\n\r\nexport interface BraintreePaypalCheckout {\r\n    loadPayPalSDK(\r\n        config: BraintreePaypalSdkCreatorConfig,\r\n        callback: (instance: BraintreePaypalCheckout) => void,\r\n    ): void;\r\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\r\n    teardown(): Promise<void>;\r\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\r\n}\r\n\r\nexport interface BraintreePaypalSdkCreatorConfig {\r\n    components?: string;\r\n    currency?: string;\r\n    intent?: string;\r\n    isCreditEnabled?: boolean;\r\n}\r\n\r\n/**\r\n *\r\n * Braintree Venmo\r\n *\r\n */\r\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\r\n    BraintreeVenmoCheckout,\r\n    BraintreeVenmoCreatorConfig\r\n>;\r\n\r\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\r\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => void): void;\r\n    isBrowserSupported(): boolean;\r\n}\r\n\r\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\r\n    allowDesktop: boolean;\r\n    paymentMethodUsage: string;\r\n}\r\n\r\n/**\r\n *\r\n * Braintree Visa Checkout\r\n *\r\n */\r\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\r\n\r\nexport interface BraintreeVisaCheckout extends BraintreeModule {\r\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\r\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\r\n}\r\n\r\n/**\r\n *\r\n * Other\r\n *\r\n */\r\nexport interface BraintreeHostWindow extends Window {\r\n    braintree?: BraintreeSDK;\r\n    paypal?: PaypalSDK;\r\n}\r\n","import {\r\n    NotInitializedError,\r\n    NotInitializedErrorType,\r\n    UnsupportedBrowserError,\r\n} from '../../../common/error/errors';\r\nimport { PaypalHostWindow } from '../paypal';\r\n\r\nimport {\r\n    BraintreeClient,\r\n    BraintreeDataCollector,\r\n    BraintreeError,\r\n    BraintreeHostedFields,\r\n    BraintreeHostedFieldsCreatorConfig,\r\n    BraintreeModule,\r\n    BraintreePaypal,\r\n    BraintreePaypalCheckout,\r\n    BraintreePaypalSdkCreatorConfig,\r\n    BraintreeThreeDSecure,\r\n    BraintreeVenmoCheckout,\r\n    BraintreeVisaCheckout,\r\n    GooglePayBraintreeSDK,\r\n    PAYPAL_COMPONENTS,\r\n} from './braintree';\r\nimport BraintreeScriptLoader from './braintree-script-loader';\r\n\r\nexport default class BraintreeSDKCreator {\r\n    private _client?: Promise<BraintreeClient>;\r\n    private _3ds?: Promise<BraintreeThreeDSecure>;\r\n    private _paypal?: Promise<BraintreePaypal>;\r\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\r\n    private _clientToken?: string;\r\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\r\n    private _venmoCheckout?: Promise<BraintreeVenmoCheckout>;\r\n    private _dataCollectors: {\r\n        default?: Promise<BraintreeDataCollector>;\r\n        paypal?: Promise<BraintreeDataCollector>;\r\n    } = {};\r\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\r\n    private _window: PaypalHostWindow;\r\n\r\n    constructor(private _braintreeScriptLoader: BraintreeScriptLoader) {\r\n        this._window = window;\r\n    }\r\n\r\n    initialize(clientToken: string) {\r\n        this._clientToken = clientToken;\r\n    }\r\n\r\n    getClient(): Promise<BraintreeClient> {\r\n        if (!this._clientToken) {\r\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\r\n        }\r\n\r\n        if (!this._client) {\r\n            this._client = this._braintreeScriptLoader\r\n                .loadClient()\r\n                .then((client) => client.create({ authorization: this._clientToken }));\r\n        }\r\n\r\n        return this._client;\r\n    }\r\n\r\n    getPaypal(): Promise<BraintreePaypal> {\r\n        if (!this._paypal) {\r\n            this._paypal = Promise.all([\r\n                this.getClient(),\r\n                this._braintreeScriptLoader.loadPaypal(),\r\n            ]).then(([client, paypal]) => paypal.create({ client }));\r\n        }\r\n\r\n        return this._paypal;\r\n    }\r\n\r\n    async getPaypalCheckout(\r\n        config: Partial<BraintreePaypalSdkCreatorConfig>,\r\n        onSuccess: (instance: BraintreePaypalCheckout) => void,\r\n        onError: (error: BraintreeError) => void,\r\n    ): Promise<BraintreePaypalCheckout> {\r\n        const client = await this.getClient();\r\n        const paypalCheckout = await this._braintreeScriptLoader.loadPaypalCheckout();\r\n\r\n        const paypalCheckoutConfig = { client };\r\n        const paypalCheckoutCallback = (\r\n            error: BraintreeError,\r\n            braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        ) => {\r\n            if (error) {\r\n                return onError(error);\r\n            }\r\n\r\n            const paypalSdkLoadCallback = () => onSuccess(braintreePaypalCheckout);\r\n            const paypalSdkLoadConfig = {\r\n                currency: config.currency,\r\n                ...(config.isCreditEnabled && { 'enable-funding': 'paylater' }),\r\n                components: PAYPAL_COMPONENTS.toString(),\r\n                intent: config.intent,\r\n            };\r\n\r\n            if (!this._window.paypal) {\r\n                braintreePaypalCheckout.loadPayPalSDK(paypalSdkLoadConfig, paypalSdkLoadCallback);\r\n            } else {\r\n                onSuccess(braintreePaypalCheckout);\r\n            }\r\n        };\r\n\r\n        this._paypalCheckout = paypalCheckout.create(paypalCheckoutConfig, paypalCheckoutCallback);\r\n\r\n        return this._paypalCheckout;\r\n    }\r\n\r\n    async getVenmoCheckout(\r\n        onSuccess: (braintreeVenmoCheckout: BraintreeVenmoCheckout) => void,\r\n        onError: (error: BraintreeError | UnsupportedBrowserError) => void,\r\n    ): Promise<BraintreeVenmoCheckout> {\r\n        if (!this._venmoCheckout) {\r\n            const client = await this.getClient();\r\n\r\n            const venmoCheckout = await this._braintreeScriptLoader.loadVenmoCheckout();\r\n\r\n            const venmoCheckoutConfig = {\r\n                client,\r\n                allowDesktop: true,\r\n                paymentMethodUsage: 'multi_use',\r\n            };\r\n\r\n            const venmoCheckoutCallback = (\r\n                error: BraintreeError,\r\n                braintreeVenmoCheckout: BraintreeVenmoCheckout,\r\n            ): void => {\r\n                if (error) {\r\n                    return onError(error);\r\n                }\r\n\r\n                if (!braintreeVenmoCheckout.isBrowserSupported()) {\r\n                    return onError(new UnsupportedBrowserError());\r\n                }\r\n\r\n                onSuccess(braintreeVenmoCheckout);\r\n            };\r\n\r\n            this._venmoCheckout = venmoCheckout.create(venmoCheckoutConfig, venmoCheckoutCallback);\r\n        }\r\n\r\n        return this._venmoCheckout;\r\n    }\r\n\r\n    get3DS(): Promise<BraintreeThreeDSecure> {\r\n        if (!this._3ds) {\r\n            this._3ds = Promise.all([this.getClient(), this._braintreeScriptLoader.load3DS()]).then(\r\n                ([client, threeDSecure]) => threeDSecure.create({ client, version: 2 }),\r\n            );\r\n        }\r\n\r\n        return this._3ds;\r\n    }\r\n\r\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\r\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\r\n        let cached = this._dataCollectors[cacheKey];\r\n\r\n        if (!cached) {\r\n            cached = Promise.all([\r\n                this.getClient(),\r\n                this._braintreeScriptLoader.loadDataCollector(),\r\n            ])\r\n                .then(([client, dataCollector]) =>\r\n                    dataCollector.create({ client, kount: true, ...options }),\r\n                )\r\n                .catch((error) => {\r\n                    if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\r\n                        return { deviceData: undefined, teardown: () => Promise.resolve() };\r\n                    }\r\n\r\n                    throw error;\r\n                });\r\n\r\n            this._dataCollectors[cacheKey] = cached;\r\n        }\r\n\r\n        return cached;\r\n    }\r\n\r\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\r\n        if (!this._visaCheckout) {\r\n            this._visaCheckout = Promise.all([\r\n                this.getClient(),\r\n                this._braintreeScriptLoader.loadVisaCheckout(),\r\n            ]).then(([client, visaCheckout]) => visaCheckout.create({ client }));\r\n        }\r\n\r\n        return this._visaCheckout;\r\n    }\r\n\r\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\r\n        if (!this._googlePay) {\r\n            this._googlePay = Promise.all([\r\n                this.getClient(),\r\n                this._braintreeScriptLoader.loadGooglePayment(),\r\n            ]).then(([client, googlePay]) => googlePay.create({ client }));\r\n        }\r\n\r\n        return this._googlePay;\r\n    }\r\n\r\n    async createHostedFields(\r\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>,\r\n    ): Promise<BraintreeHostedFields> {\r\n        const [client, hostedFields] = await Promise.all([\r\n            this.getClient(),\r\n            this._braintreeScriptLoader.loadHostedFields(),\r\n        ]);\r\n\r\n        return hostedFields.create({ ...options, client });\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.all([\r\n            this._teardown(this._3ds),\r\n            this._teardown(this._dataCollectors.default),\r\n            this._teardown(this._dataCollectors.paypal),\r\n            this._teardown(this._googlePay),\r\n            this._teardown(this._paypalCheckout),\r\n            this._teardown(this._venmoCheckout),\r\n            this._teardown(this._visaCheckout),\r\n        ]).then(() => {\r\n            this._3ds = undefined;\r\n            this._dataCollectors = {};\r\n            this._googlePay = undefined;\r\n            this._paypalCheckout = undefined;\r\n            this._venmoCheckout = undefined;\r\n            this._visaCheckout = undefined;\r\n        });\r\n    }\r\n\r\n    private _teardown(module?: Promise<BraintreeModule>) {\r\n        return module\r\n            ? module\r\n                  .then((mod) => mod.teardown())\r\n                  .catch((error) => {\r\n                      if (error.code !== 'METHOD_CALLED_AFTER_TEARDOWN') {\r\n                          throw error;\r\n                      }\r\n                  })\r\n            : Promise.resolve();\r\n    }\r\n}\r\n","import { ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { PaymentMethodClientUnavailableError } from '../../errors';\r\nimport { GooglePayCreator } from '../googlepay';\r\n\r\nimport {\r\n    BraintreeClientCreator,\r\n    BraintreeDataCollectorCreator,\r\n    BraintreeHostedFieldsCreator,\r\n    BraintreeHostWindow,\r\n    BraintreePaypalCheckoutCreator,\r\n    BraintreePaypalCreator,\r\n    BraintreeThreeDSecureCreator,\r\n    BraintreeVenmoCheckoutCreator,\r\n    BraintreeVisaCheckoutCreator,\r\n} from './braintree';\r\n\r\nconst version = '3.81.0';\r\n\r\nexport default class BraintreeScriptLoader {\r\n    constructor(\r\n        private _scriptLoader: ScriptLoader,\r\n        private _window: BraintreeHostWindow = window,\r\n    ) {}\r\n\r\n    loadClient(): Promise<BraintreeClientCreator> {\r\n        return this._scriptLoader\r\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/client.min.js`)\r\n            .then(() => {\r\n                if (!this._window.braintree || !this._window.braintree.client) {\r\n                    throw new PaymentMethodClientUnavailableError();\r\n                }\r\n\r\n                return this._window.braintree.client;\r\n            });\r\n    }\r\n\r\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\r\n        return this._scriptLoader\r\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/three-d-secure.min.js`)\r\n            .then(() => {\r\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\r\n                    throw new PaymentMethodClientUnavailableError();\r\n                }\r\n\r\n                return this._window.braintree.threeDSecure;\r\n            });\r\n    }\r\n\r\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\r\n        return this._scriptLoader\r\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/data-collector.min.js`)\r\n            .then(() => {\r\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\r\n                    throw new PaymentMethodClientUnavailableError();\r\n                }\r\n\r\n                return this._window.braintree.dataCollector;\r\n            });\r\n    }\r\n\r\n    loadPaypal(): Promise<BraintreePaypalCreator> {\r\n        return this._scriptLoader\r\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal.min.js`)\r\n            .then(() => {\r\n                if (!this._window.braintree || !this._window.braintree.paypal) {\r\n                    throw new PaymentMethodClientUnavailableError();\r\n                }\r\n\r\n                return this._window.braintree.paypal;\r\n            });\r\n    }\r\n\r\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\r\n        return this._scriptLoader\r\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/paypal-checkout.min.js`)\r\n            .then(() => {\r\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\r\n                    throw new PaymentMethodClientUnavailableError();\r\n                }\r\n\r\n                return this._window.braintree.paypalCheckout;\r\n            });\r\n    }\r\n\r\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\r\n        return this._scriptLoader\r\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/visa-checkout.min.js`)\r\n            .then(() => {\r\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\r\n                    throw new PaymentMethodClientUnavailableError();\r\n                }\r\n\r\n                return this._window.braintree.visaCheckout;\r\n            });\r\n    }\r\n\r\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\r\n        return this._scriptLoader\r\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/venmo.min.js`)\r\n            .then(() => {\r\n                if (!this._window.braintree?.venmo) {\r\n                    throw new PaymentMethodClientUnavailableError();\r\n                }\r\n\r\n                return this._window.braintree.venmo;\r\n            });\r\n    }\r\n\r\n    loadGooglePayment(): Promise<GooglePayCreator> {\r\n        return this._scriptLoader\r\n            .loadScript(`//js.braintreegateway.com/web/${version}/js/google-payment.min.js`)\r\n            .then(() => {\r\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\r\n                    throw new PaymentMethodClientUnavailableError();\r\n                }\r\n\r\n                return this._window.braintree.googlePayment;\r\n            });\r\n    }\r\n\r\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\r\n        await this._scriptLoader.loadScript(\r\n            `//js.braintreegateway.com/web/${version}/js/hosted-fields.min.js`,\r\n        );\r\n\r\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this._window.braintree.hostedFields;\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * Throw this error if we are unable to synchronize the checkout details of a\r\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\r\n */\r\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\r\n    constructor(public error?: Error) {\r\n        super(\r\n            'Unable to synchronize your checkout details with a third party provider. Please try again later.',\r\n        );\r\n\r\n        this.name = 'RemoteCheckoutSynchronizationError';\r\n        this.type = 'remote_checkout_synchronization';\r\n    }\r\n}\r\n","import { PaymentInitializeOptions } from '../..';\r\nimport { Checkout, InternalCheckoutSelectors } from '../../../checkout';\r\nimport PaymentMethod from '../../payment-method';\r\nimport {\r\n    BraintreeModuleCreator,\r\n    BraintreeVerifyPayload,\r\n    GooglePayBraintreeSDK,\r\n} from '../braintree';\r\n\r\nexport enum CallbackTriggerType {\r\n    INITIALIZE = 'INITIALIZE',\r\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\r\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\r\n    OFFER = 'OFFER',\r\n}\r\n\r\nexport enum TotalPriceStatusType {\r\n    ESTIMATED = 'ESTIMATED',\r\n    FINAL = 'FINAL',\r\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\r\n}\r\n\r\nexport enum CallbackIntentsType {\r\n    OFFER = 'OFFER',\r\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\r\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\r\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\r\n}\r\n\r\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\r\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\r\n\r\nexport interface GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | void,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n        publishableKey?: string,\r\n    ): Promise<GooglePayPaymentDataRequestV2>;\r\n    teardown(): Promise<void>;\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\r\n}\r\n\r\nexport interface GooglePayProviderProcessor {\r\n    initialize(options: PaymentInitializeOptions): Promise<void>;\r\n    processAdditionalAction(error: unknown): Promise<InternalCheckoutSelectors>;\r\n}\r\n\r\nexport type GooglePayCreator = BraintreeModuleCreator<GooglePayBraintreeSDK>;\r\n\r\nexport interface GooglePayPaymentOptions {\r\n    environment: EnvironmentType;\r\n    paymentDataCallbacks?: {\r\n        onPaymentDataChanged(\r\n            intermediatePaymentData: IntermediatePaymentData,\r\n        ): Promise<NewTransactionInfo | void>;\r\n    };\r\n}\r\n\r\nexport type GooglePayVerifyPayload = BraintreeVerifyPayload | undefined;\r\n\r\nexport interface GooglePayIsReadyToPayResponse {\r\n    result: boolean;\r\n    paymentMethodPresend?: boolean;\r\n}\r\n\r\nexport interface GooglePaySDK {\r\n    payments: {\r\n        api: {\r\n            PaymentsClient: new (options: GooglePayPaymentOptions) => GooglePayClient;\r\n        };\r\n    };\r\n}\r\n\r\nexport interface GooglePayClient {\r\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\r\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\r\n    createButton(options: { [key: string]: string | object }): HTMLElement;\r\n}\r\n\r\nexport interface GooglePayHostWindow extends Window {\r\n    google?: GooglePaySDK;\r\n}\r\n\r\nexport interface TokenizePayload {\r\n    nonce: string;\r\n    tokenFormat?: string;\r\n    details: {\r\n        cardType: string;\r\n        lastFour: string;\r\n        lastTwo?: string;\r\n    };\r\n    description?: string;\r\n    type: TokenizeType;\r\n    binData?: {\r\n        commercial: string;\r\n        countryOfIssuance: string;\r\n        debit: string;\r\n        durbinRegulated: string;\r\n        healthcare: string;\r\n        issuingBank: string;\r\n        payroll: string;\r\n        prepaid: string;\r\n        productId: string;\r\n    };\r\n}\r\n\r\nexport interface GooglePaymentData {\r\n    apiVersion: number;\r\n    apiVersionMinor: number;\r\n    paymentMethodData: {\r\n        description: string;\r\n        info: {\r\n            cardDetails: string;\r\n            cardNetwork: string;\r\n            billingAddress: GooglePayAddress;\r\n        };\r\n        tokenizationData: {\r\n            token: string;\r\n            type: string;\r\n        };\r\n        type: TokenizeType;\r\n    };\r\n    shippingAddress: GooglePayAddress;\r\n    email: string;\r\n}\r\n\r\nexport interface GooglePayAddress {\r\n    address1: string;\r\n    address2: string;\r\n    address3: string;\r\n    administrativeArea: string;\r\n    companyName: string;\r\n    countryCode: string;\r\n    locality: string;\r\n    name: string;\r\n    postalCode: string;\r\n    sortingCode: string;\r\n    phoneNumber: string;\r\n}\r\n\r\nexport interface GooglePaymentsError {\r\n    statusCode: string;\r\n    statusMessage?: string;\r\n}\r\n\r\nexport interface PaymentMethodData {\r\n    methodId: string;\r\n    paymentData: {\r\n        method: string;\r\n        nonce: string;\r\n        cardInformation: {\r\n            type: string;\r\n            number: string;\r\n        };\r\n    };\r\n}\r\n\r\nexport enum ButtonType {\r\n    Long = 'long',\r\n    Short = 'short',\r\n}\r\nexport enum ButtonColor {\r\n    Default = 'default',\r\n    Black = 'black',\r\n    White = 'white',\r\n}\r\n\r\nexport interface TokenizationSpecification {\r\n    type: string;\r\n    parameters: {\r\n        gateway: string;\r\n        gatewayMerchantId?: string;\r\n        'braintree:apiVersion'?: string;\r\n        'braintree:clientKey'?: string;\r\n        'braintree:merchantId'?: string;\r\n        'braintree:sdkVersion'?: string;\r\n        'braintree:authorizationFingerprint'?: string;\r\n        'stripe:version'?: string;\r\n        'stripe:publishableKey'?: string;\r\n    };\r\n}\r\n\r\nexport enum BillingAddressFormat {\r\n    /*\r\n     * Name, country code, and postal code (default).\r\n     */\r\n    Min = 'MIN',\r\n    /*\r\n     * Name, street address, locality, region, country code, and postal code.\r\n     */\r\n    Full = 'FULL',\r\n}\r\n\r\nexport interface GooglePayPaymentDataRequestV2 {\r\n    apiVersion: number;\r\n    apiVersionMinor: number;\r\n    merchantInfo: {\r\n        authJwt?: string;\r\n        merchantId?: string;\r\n        merchantName?: string;\r\n    };\r\n    allowedPaymentMethods: [\r\n        {\r\n            type: string;\r\n            parameters: {\r\n                allowedAuthMethods: string[];\r\n                allowedCardNetworks: string[];\r\n                allowPrepaidCards?: boolean;\r\n                billingAddressRequired?: boolean;\r\n                billingAddressParameters?: {\r\n                    format?: BillingAddressFormat;\r\n                    phoneNumberRequired?: boolean;\r\n                };\r\n            };\r\n            tokenizationSpecification?: TokenizationSpecification;\r\n        },\r\n    ];\r\n    transactionInfo: {\r\n        currencyCode: string;\r\n        countryCode?: string;\r\n        totalPriceStatus?: TotalPriceStatusType;\r\n        totalPrice?: string;\r\n        checkoutOption?: string;\r\n    };\r\n    callbackIntents?: CallbackIntentsType[];\r\n    emailRequired?: boolean;\r\n    shippingAddressRequired?: boolean;\r\n    shippingAddressParameters?: {\r\n        allowedCountryCodes?: string[];\r\n        phoneNumberRequired?: boolean;\r\n    };\r\n}\r\n\r\nexport interface UpdatePaymentDataRequestPayload {\r\n    apiVersion?: number;\r\n    apiVersionMinor?: number;\r\n    merchantInfo?: {\r\n        authJwt?: string;\r\n        merchantId?: string;\r\n        merchantName?: string;\r\n    };\r\n    allowedPaymentMethods?: [\r\n        {\r\n            type: string;\r\n            parameters: {\r\n                allowedAuthMethods: string[];\r\n                allowedCardNetworks: string[];\r\n                allowPrepaidCards?: boolean;\r\n                billingAddressRequired?: boolean;\r\n                billingAddressParameters?: {\r\n                    format?: BillingAddressFormat;\r\n                    phoneNumberRequired?: boolean;\r\n                };\r\n            };\r\n            tokenizationSpecification?: TokenizationSpecification;\r\n        },\r\n    ];\r\n    transactionInfo?: {\r\n        currencyCode: string;\r\n        countryCode?: string;\r\n        totalPriceStatus?: TotalPriceStatusType;\r\n        totalPrice?: string;\r\n        checkoutOption?: string;\r\n    };\r\n    callbackIntents?: CallbackIntentsType[];\r\n    emailRequired?: boolean;\r\n    shippingAddressRequired?: boolean;\r\n    shippingAddressParameters?: {\r\n        allowedCountryCodes?: string[];\r\n        phoneNumberRequired?: boolean;\r\n    };\r\n}\r\n\r\nexport interface NewTransactionInfo {\r\n    newTransactionInfo: {\r\n        currencyCode: string;\r\n        totalPrice: string;\r\n        totalPriceStatus: TotalPriceStatusType;\r\n    };\r\n}\r\n\r\nexport interface IntermediatePaymentData {\r\n    callbackTrigger: CallbackTriggerType;\r\n}\r\n\r\nexport type GooglePayTransactionInfo = Pick<GooglePayPaymentDataRequestV2, 'transactionInfo'>;\r\n","export function getFirstAndLastName(fullName: string): [string, string] {\r\n    const nameParts = fullName.split(' ');\r\n\r\n    if (nameParts.length === 1) {\r\n        return [fullName, ''];\r\n    }\r\n\r\n    const firstName = nameParts.slice(0, -1).join(' ');\r\n    const lastName = nameParts[nameParts.length - 1];\r\n\r\n    return [firstName, lastName];\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { PaymentMethodInvalidError } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { AddressRequestBody } from '../../../address';\r\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\r\nimport { Checkout, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\r\nimport {\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    NotInitializedError,\r\n    NotInitializedErrorType,\r\n} from '../../../common/error/errors';\r\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\r\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\r\nimport { ConsignmentActionCreator } from '../../../shipping';\r\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\r\n\r\nimport {\r\n    ButtonColor,\r\n    ButtonType,\r\n    EnvironmentType,\r\n    GooglePayAddress,\r\n    GooglePayClient,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    GooglePayPaymentOptions,\r\n    GooglePaySDK,\r\n    TokenizePayload,\r\n    UpdatePaymentDataRequestPayload,\r\n} from './googlepay';\r\nimport { getFirstAndLastName } from './googlepay-get-first-and-last-name';\r\nimport GooglePayScriptLoader from './googlepay-script-loader';\r\n\r\nexport default class GooglePayPaymentProcessor {\r\n    private _googlePayClient?: GooglePayClient;\r\n    private _methodId?: string;\r\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\r\n    private _isBuyNowFlow = false;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\r\n        private _googlePayScriptLoader: GooglePayScriptLoader,\r\n        private _googlePayInitializer: GooglePayInitializer,\r\n        private _billingAddressActionCreator: BillingAddressActionCreator,\r\n        private _consignmentActionCreator: ConsignmentActionCreator,\r\n        private _requestSender: RequestSender,\r\n    ) {}\r\n\r\n    initialize(methodId: string, googlePayClientOptions?: GooglePayPaymentOptions): Promise<void> {\r\n        this._methodId = methodId;\r\n\r\n        return this._configureWallet(googlePayClientOptions);\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return this._googlePayInitializer.teardown();\r\n    }\r\n\r\n    createButton(\r\n        onClick: (event: Event) => Promise<void>,\r\n        buttonType: ButtonType = ButtonType.Short,\r\n        buttonColor: ButtonColor = ButtonColor.Default,\r\n    ): HTMLElement {\r\n        if (!this._googlePayClient) {\r\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\r\n        }\r\n\r\n        return this._googlePayClient.createButton({\r\n            buttonColor,\r\n            buttonType,\r\n            onClick,\r\n        });\r\n    }\r\n\r\n    updatePaymentDataRequest(paymentDataRequest: UpdatePaymentDataRequestPayload) {\r\n        const existingPaymentDataRequest = this._getPaymentDataRequest();\r\n\r\n        this._paymentDataRequest = {\r\n            ...existingPaymentDataRequest,\r\n            ...paymentDataRequest,\r\n            merchantInfo: {\r\n                ...(existingPaymentDataRequest.merchantInfo ?? {}),\r\n                ...(paymentDataRequest.merchantInfo ?? {}),\r\n            },\r\n            transactionInfo: {\r\n                ...(existingPaymentDataRequest.transactionInfo ?? {}),\r\n                ...(paymentDataRequest.transactionInfo ?? {}),\r\n            },\r\n            shippingAddressParameters: {\r\n                ...(existingPaymentDataRequest.shippingAddressParameters ?? {}),\r\n                ...(paymentDataRequest.shippingAddressParameters ?? {}),\r\n            },\r\n        };\r\n    }\r\n\r\n    displayWallet(): Promise<GooglePaymentData> {\r\n        if (!this._googlePayClient) {\r\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\r\n        }\r\n\r\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\r\n    }\r\n\r\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\r\n        return this._googlePayInitializer\r\n            .parseResponse(paymentData)\r\n            .then((tokenizePayload) => this._postForm(tokenizePayload))\r\n            .then(() => this._updateBillingAddress(paymentData));\r\n    }\r\n\r\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\r\n        return this._store.dispatch(\r\n            this._consignmentActionCreator.updateAddress(\r\n                this._mapGooglePayAddressToShippingAddress(shippingAddress),\r\n            ),\r\n        );\r\n    }\r\n\r\n    updateBuyNowFlowFlag(isBuyNowFlow: boolean): void {\r\n        this._isBuyNowFlow = isBuyNowFlow;\r\n    }\r\n\r\n    private _configureWallet(\r\n        googlePayClientOptions?: Partial<GooglePayPaymentOptions>,\r\n    ): Promise<void> {\r\n        const features = this._store.getState().config.getStoreConfig()?.checkoutSettings.features;\r\n        const options =\r\n            features && features['INT-5826.google_hostname_alias']\r\n                ? { params: { origin: window.location.hostname } }\r\n                : undefined;\r\n        const methodId = this._getMethodId();\r\n\r\n        return this._store\r\n            .dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId, options))\r\n            .then((state) => {\r\n                const checkout = this._getCheckout(state);\r\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\r\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\r\n\r\n                if (!paymentMethod) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n                }\r\n\r\n                const { testMode } = paymentMethod.config;\r\n\r\n                return Promise.all([\r\n                    this._googlePayScriptLoader.load(),\r\n                    this._googlePayInitializer.initialize(\r\n                        checkout,\r\n                        paymentMethod,\r\n                        hasShippingAddress,\r\n                    ),\r\n                ]).then(([googlePay, paymentDataRequest]) => {\r\n                    this._googlePayClient = this._getGooglePayClient(\r\n                        googlePay,\r\n                        testMode,\r\n                        googlePayClientOptions,\r\n                    );\r\n                    this._paymentDataRequest = paymentDataRequest;\r\n\r\n                    return this._googlePayClient\r\n                        .isReadyToPay({\r\n                            allowedPaymentMethods: [\r\n                                {\r\n                                    type: paymentDataRequest.allowedPaymentMethods[0].type,\r\n                                    parameters: {\r\n                                        allowedAuthMethods:\r\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\r\n                                                .allowedAuthMethods,\r\n                                        allowedCardNetworks:\r\n                                            paymentDataRequest.allowedPaymentMethods[0].parameters\r\n                                                .allowedCardNetworks,\r\n                                    },\r\n                                },\r\n                            ],\r\n                            apiVersion: paymentDataRequest.apiVersion,\r\n                            apiVersionMinor: paymentDataRequest.apiVersionMinor,\r\n                        })\r\n                        .then((response) => {\r\n                            if (response.result) {\r\n                                return;\r\n                            }\r\n\r\n                            throw new PaymentMethodInvalidError();\r\n                        });\r\n                });\r\n            });\r\n    }\r\n\r\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\r\n        return {\r\n            type: cardInformation.cardType,\r\n            number: cardInformation.lastFour,\r\n        };\r\n    }\r\n\r\n    private _getCheckout(state: InternalCheckoutSelectors): Checkout | void {\r\n        if (this._isBuyNowFlow) {\r\n            return;\r\n        }\r\n\r\n        const checkout = state.checkout.getCheckout();\r\n\r\n        if (!checkout) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n        }\r\n\r\n        return checkout;\r\n    }\r\n\r\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\r\n        if (!this._paymentDataRequest) {\r\n            throw new RemoteCheckoutSynchronizationError();\r\n        }\r\n\r\n        return this._paymentDataRequest;\r\n    }\r\n\r\n    private _getGooglePayClient(\r\n        google: GooglePaySDK,\r\n        testMode?: boolean,\r\n        googlePayClientOptions?: Partial<GooglePayPaymentOptions>,\r\n    ): GooglePayClient {\r\n        if (testMode === undefined) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\r\n\r\n        return new google.payments.api.PaymentsClient({\r\n            environment,\r\n            ...(googlePayClientOptions ?? {}),\r\n        });\r\n    }\r\n\r\n    private _getMethodId(): string {\r\n        if (!this._methodId) {\r\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\r\n        }\r\n\r\n        return this._methodId;\r\n    }\r\n\r\n    private _mapGooglePayAddressToBillingAddress(\r\n        paymentData: GooglePaymentData,\r\n        id: string,\r\n        customerEmail?: string,\r\n    ): BillingAddressUpdateRequestBody {\r\n        const fullName = paymentData.paymentMethodData.info.billingAddress.name;\r\n        const [firstName, lastName] = getFirstAndLastName(fullName);\r\n        const address1 = paymentData.paymentMethodData.info.billingAddress.address1;\r\n        const city = paymentData.paymentMethodData.info.billingAddress.locality;\r\n        const postalCode = paymentData.paymentMethodData.info.billingAddress.postalCode;\r\n        const countryCode = paymentData.paymentMethodData.info.billingAddress.countryCode;\r\n\r\n        if (!firstName || !address1 || !city || !postalCode || !countryCode) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\r\n        }\r\n\r\n        return {\r\n            id,\r\n            firstName,\r\n            lastName,\r\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\r\n            address1,\r\n            address2:\r\n                paymentData.paymentMethodData.info.billingAddress.address2 +\r\n                paymentData.paymentMethodData.info.billingAddress.address3,\r\n            city,\r\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\r\n            stateOrProvinceCode:\r\n                paymentData.paymentMethodData.info.billingAddress.administrativeArea,\r\n            postalCode,\r\n            countryCode,\r\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\r\n            customFields: [],\r\n            email: customerEmail || paymentData.email,\r\n        };\r\n    }\r\n\r\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\r\n        const [firstName, lastName] = getFirstAndLastName(address.name);\r\n\r\n        return {\r\n            firstName,\r\n            lastName,\r\n            company: address.companyName,\r\n            address1: address.address1,\r\n            address2: address.address2 + address.address3,\r\n            city: address.locality,\r\n            stateOrProvince: address.administrativeArea,\r\n            stateOrProvinceCode: address.administrativeArea,\r\n            postalCode: address.postalCode,\r\n            countryCode: address.countryCode,\r\n            phone: address.phoneNumber,\r\n            customFields: [],\r\n        };\r\n    }\r\n\r\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\r\n        const cardInformation = postPaymentData.details;\r\n        const buyNowCartId = this._isBuyNowFlow\r\n            ? this._store.getState().cart.getCartOrThrow().id\r\n            : undefined;\r\n\r\n        return this._requestSender.post('/checkout.php', {\r\n            headers: {\r\n                Accept: 'text/html',\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n                ...SDK_VERSION_HEADERS,\r\n            },\r\n            body: {\r\n                payment_type: postPaymentData.type,\r\n                nonce: postPaymentData.nonce,\r\n                tokenFormat: postPaymentData.tokenFormat,\r\n                provider: this._getMethodId(),\r\n                action: 'set_external_checkout',\r\n                card_information: this._getCardInformation(cardInformation),\r\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\r\n            },\r\n        });\r\n    }\r\n\r\n    private _updateBillingAddress(\r\n        paymentData: GooglePaymentData,\r\n    ): Promise<InternalCheckoutSelectors> {\r\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\r\n\r\n        if (!remoteBillingAddress) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\r\n        }\r\n\r\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(\r\n            paymentData,\r\n            remoteBillingAddress.id,\r\n            remoteBillingAddress.email,\r\n        );\r\n\r\n        return this._store.dispatch(\r\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped),\r\n        );\r\n    }\r\n}\r\n","import { ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { PaymentMethodClientUnavailableError } from '../../errors';\r\n\r\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\r\n\r\nexport default class GooglePayScriptLoader {\r\n    constructor(\r\n        private _scriptLoader: ScriptLoader,\r\n        private _window: GooglePayHostWindow = window,\r\n    ) {}\r\n\r\n    load(): Promise<GooglePaySDK> {\r\n        return this._scriptLoader.loadScript('https://pay.google.com/gp/p/js/pay.js').then(() => {\r\n            if (!this._window.google) {\r\n                throw new PaymentMethodClientUnavailableError();\r\n            }\r\n\r\n            return this._window.google;\r\n        });\r\n    }\r\n}\r\n","import { createRequestSender } from '@bigcommerce/request-sender';\r\nimport { getScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\r\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\r\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\r\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\r\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\r\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\r\n\r\nimport { GooglePayInitializer } from './googlepay';\r\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\r\nimport GooglePayScriptLoader from './googlepay-script-loader';\r\n\r\nexport default function createGooglePayPaymentProcessor(\r\n    store: CheckoutStore,\r\n    initializer: GooglePayInitializer,\r\n): GooglePayPaymentProcessor {\r\n    const requestSender = createRequestSender();\r\n    const scriptLoader = getScriptLoader();\r\n\r\n    return new GooglePayPaymentProcessor(\r\n        store,\r\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\r\n        new GooglePayScriptLoader(scriptLoader),\r\n        initializer,\r\n        new BillingAddressActionCreator(\r\n            new BillingAddressRequestSender(requestSender),\r\n            new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\r\n        ),\r\n        new ConsignmentActionCreator(\r\n            new ConsignmentRequestSender(requestSender),\r\n            new CheckoutRequestSender(requestSender),\r\n        ),\r\n        requestSender,\r\n    );\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        const {\r\n            paymentMethodData: {\r\n                type,\r\n                tokenizationData: { token },\r\n                info: { cardNetwork: cardType, cardDetails: lastFour },\r\n            },\r\n        } = paymentData;\r\n\r\n        return Promise.resolve({\r\n            type,\r\n            nonce: token,\r\n            details: {\r\n                cardType,\r\n                lastFour,\r\n            },\r\n        });\r\n    }\r\n\r\n    private _getGooglePayPaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        const {\r\n            initializationData: {\r\n                gatewayMerchantId,\r\n                storeCountry: countryCode,\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt,\r\n                merchantId,\r\n                merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: supportedCards.map((card) =>\r\n                            card === 'MC' ? 'MASTERCARD' : card,\r\n                        ),\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'adyen',\r\n                            gatewayMerchantId,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                countryCode,\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayAdyenV3Initializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        const {\r\n            paymentMethodData: {\r\n                type,\r\n                tokenizationData: { token },\r\n                info: { cardNetwork: cardType, cardDetails: lastFour },\r\n            },\r\n        } = paymentData;\r\n\r\n        return Promise.resolve({\r\n            type,\r\n            nonce: token,\r\n            details: {\r\n                cardType,\r\n                lastFour,\r\n            },\r\n        });\r\n    }\r\n\r\n    private _getGooglePayPaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        const {\r\n            initializationData: {\r\n                gatewayMerchantId,\r\n                storeCountry: countryCode,\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt,\r\n                merchantId,\r\n                merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: supportedCards.map((card) =>\r\n                            card === 'MC' ? 'MASTERCARD' : card,\r\n                        ),\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'adyen',\r\n                            gatewayMerchantId,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                countryCode,\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { PaymentMethod } from '../..';\r\nimport { Checkout } from '../../../checkout';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizationSpecification,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nconst baseRequest = {\r\n    apiVersion: 2,\r\n    apiVersionMinor: 0,\r\n};\r\n\r\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        const {\r\n            paymentMethodData: {\r\n                type,\r\n                tokenizationData: { token },\r\n                info: { cardNetwork: cardType, cardDetails: lastFour },\r\n            },\r\n        } = paymentData;\r\n\r\n        return Promise.resolve({\r\n            type,\r\n            nonce: btoa(token),\r\n            details: {\r\n                cardType,\r\n                lastFour,\r\n            },\r\n        });\r\n    }\r\n\r\n    private _getGooglePaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        const {\r\n            initializationData: {\r\n                paymentGatewayId: gatewayMerchantId,\r\n                storeCountry: countryCode,\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\r\n        const cardPaymentMethod = this._getCardPaymentMethod(\r\n            paymentGatewaySpecification,\r\n            supportedCards,\r\n        );\r\n\r\n        return {\r\n            ...baseRequest,\r\n            allowedPaymentMethods: [cardPaymentMethod],\r\n            transactionInfo: {\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n                currencyCode,\r\n                countryCode,\r\n            },\r\n            merchantInfo: {\r\n                merchantName,\r\n                merchantId,\r\n                authJwt,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n\r\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\r\n        return {\r\n            type: 'PAYMENT_GATEWAY',\r\n            parameters: {\r\n                gateway: 'authorizenet',\r\n                gatewayMerchantId,\r\n            },\r\n        };\r\n    }\r\n\r\n    private _getCardPaymentMethod(\r\n        tokenizationSpecification: TokenizationSpecification,\r\n        supportedCards: string[],\r\n    ) {\r\n        return {\r\n            type: 'CARD',\r\n            parameters: {\r\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                allowedCardNetworks: supportedCards.map((card) =>\r\n                    card === 'MC' ? 'MASTERCARD' : card,\r\n                ),\r\n                billingAddressRequired: true,\r\n                billingAddressParameters: {\r\n                    format: BillingAddressFormat.Full,\r\n                    phoneNumberRequired: true,\r\n                },\r\n            },\r\n            tokenizationSpecification,\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayBNZInitializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        const {\r\n            paymentMethodData: {\r\n                type,\r\n                tokenizationData: { token },\r\n                info: { cardNetwork: cardType, cardDetails: lastFour },\r\n            },\r\n        } = paymentData;\r\n\r\n        return Promise.resolve({\r\n            nonce: btoa(token),\r\n            type,\r\n            details: {\r\n                cardType,\r\n                lastFour,\r\n            },\r\n        });\r\n    }\r\n\r\n    private _getGooglePayPaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        const {\r\n            initializationData: {\r\n                gatewayMerchantId,\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt,\r\n                merchantId,\r\n                merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: supportedCards.map((card) =>\r\n                            card === 'MC' ? 'MASTERCARD' : card,\r\n                        ),\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'cybersource',\r\n                            gatewayMerchantId,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\r\nimport PaymentMethod from '../../payment-method';\r\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\nimport {\r\n    GooglePayBraintreeDataRequest,\r\n    GooglePayBraintreePaymentDataRequestV1,\r\n} from './googlepay-braintree';\r\n\r\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\r\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\r\n\r\n    constructor(private _braintreeSDKCreator: BraintreeSDKCreator) {}\r\n\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        if (!paymentMethod.clientToken) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\r\n\r\n        return this._braintreeSDKCreator\r\n            .getGooglePaymentComponent()\r\n            .then((googleBraintreePaymentInstance) => {\r\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\r\n\r\n                return this._createGooglePayPayload(\r\n                    checkout,\r\n                    paymentMethod.initializationData,\r\n                    hasShippingAddress,\r\n                );\r\n            });\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return this._braintreeSDKCreator.teardown();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token)\r\n            .androidPayCards[0];\r\n\r\n        return Promise.resolve({\r\n            nonce: payload.nonce,\r\n            type: payload.type,\r\n            description: payload.description,\r\n            details: {\r\n                cardType: payload.details.cardType,\r\n                lastFour: payload.details.lastFour,\r\n                lastTwo: payload.details.lastTwo,\r\n            },\r\n            binData: payload.binData,\r\n        });\r\n    }\r\n\r\n    private _createGooglePayPayload(\r\n        checkout: Checkout | undefined,\r\n        initializationData: any,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        if (!initializationData.platformToken) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\r\n            merchantInfo: {\r\n                authJwt: initializationData.platformToken,\r\n                merchantName: initializationData.googleMerchantName,\r\n                merchantId: initializationData.googleMerchantId,\r\n            },\r\n            transactionInfo: {\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            cardRequirements: {\r\n                billingAddressRequired: true,\r\n                billingAddressFormat: 'FULL',\r\n            },\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            emailRequired: true,\r\n            phoneNumberRequired: true,\r\n        };\r\n\r\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\r\n            this._googlePaymentInstance.createPaymentDataRequest(\r\n                googlePayBraintreePaymentDataRequest,\r\n            ),\r\n        );\r\n    }\r\n\r\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\r\n        googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\r\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\r\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks:\r\n                            googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'braintree',\r\n                            'braintree:apiVersion': 'v1',\r\n                            'braintree:authorizationFingerprint':\r\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\r\n                                    .parameters['braintree:authorizationFingerprint'],\r\n                            'braintree:merchantId':\r\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\r\n                                    .parameters['braintree:merchantId'],\r\n                            'braintree:sdkVersion':\r\n                                googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters\r\n                                    .parameters['braintree:sdkVersion'],\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\r\n            emailRequired: true,\r\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\n/**\r\n * This error should be thrown when a payment method experiences some kind of\r\n * failure (i.e.: its client library returns a rejected promise). And there is\r\n * no other error type that is more specific than this one.\r\n */\r\nexport default class PaymentMethodFailedError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\r\n        );\r\n\r\n        this.name = 'PaymentMethodFailedError';\r\n        this.type = 'payment_method_client_invalid';\r\n    }\r\n}\r\n","import { RequestSender } from '@bigcommerce/request-sender';\r\nimport { round } from 'lodash';\r\n\r\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport { InvalidArgumentError } from '../../../common/error/errors';\r\nimport { ContentType } from '../../../common/http-request';\r\nimport PaymentMethod from '../../payment-method';\r\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\r\n    private _publishableKey = '';\r\n    private _testMode = true;\r\n    private _errorMessage = 'Unable to parse response from GooglePay.';\r\n\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    async initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\r\n        this._testMode = !!paymentMethod.config.testMode;\r\n\r\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\r\n            checkout,\r\n            paymentMethod.initializationData,\r\n            hasShippingAddress,\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        let token;\r\n\r\n        try {\r\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\r\n        } catch (err) {\r\n            throw new InvalidArgumentError(this._errorMessage);\r\n        }\r\n\r\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\r\n            throw new PaymentMethodFailedError(this._errorMessage);\r\n        }\r\n\r\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\r\n\r\n        const payload: TokenizePayload = {\r\n            nonce: finalToken.token,\r\n            type: 'CreditCard',\r\n            description: paymentData.paymentMethodData.description,\r\n            details: {\r\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\r\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\r\n            },\r\n        };\r\n\r\n        if (finalToken.token_format) {\r\n            payload.tokenFormat = finalToken.token_format;\r\n        }\r\n\r\n        return payload;\r\n    }\r\n\r\n    private async _convertToken(\r\n        testMode: boolean,\r\n        checkoutcomkey: string,\r\n        token: CheckoutcomGooglePayToken,\r\n    ): Promise<CheckoutcomToken> {\r\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(\r\n            testMode,\r\n            checkoutcomkey,\r\n            {\r\n                type: 'googlepay',\r\n                token_data: token,\r\n            },\r\n        );\r\n\r\n        if (!checkoutcomToken || !checkoutcomToken.token) {\r\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\r\n        }\r\n\r\n        return checkoutcomToken;\r\n    }\r\n\r\n    private async _requestCheckoutcomTokenize(\r\n        testMode: boolean,\r\n        checkoutcomKey: string,\r\n        data = {},\r\n    ): Promise<CheckoutcomToken> {\r\n        const TEST_URL = 'https://api.sandbox.checkout.com/tokens';\r\n        const LIVE_URL = 'https://api.checkout.com/tokens';\r\n\r\n        const url = testMode ? TEST_URL : LIVE_URL;\r\n\r\n        const response = await this._requestSender.post(url, {\r\n            credentials: false,\r\n            body: data,\r\n            headers: {\r\n                'Content-Type': ContentType.Json,\r\n                Authorization: checkoutcomKey,\r\n                'X-XSRF-TOKEN': null,\r\n            },\r\n        });\r\n\r\n        return response.body as CheckoutcomToken;\r\n    }\r\n\r\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\r\n        checkout: Checkout | undefined,\r\n        initializationData: any,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt: initializationData.platformToken,\r\n                merchantId: initializationData.googleMerchantId,\r\n                merchantName: initializationData.googleMerchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'checkoutltd',\r\n                            gatewayMerchantId: initializationData.checkoutcomkey,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayCybersourceV2Initializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        const {\r\n            paymentMethodData: {\r\n                type,\r\n                tokenizationData: { token },\r\n                info: { cardNetwork: cardType, cardDetails: lastFour },\r\n            },\r\n        } = paymentData;\r\n\r\n        return Promise.resolve({\r\n            nonce: btoa(token),\r\n            type,\r\n            details: {\r\n                cardType,\r\n                lastFour,\r\n            },\r\n        });\r\n    }\r\n\r\n    private _getGooglePayPaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        const {\r\n            initializationData: {\r\n                gatewayMerchantId,\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt,\r\n                merchantId,\r\n                merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: supportedCards.map((card) =>\r\n                            card === 'MC' ? 'MASTERCARD' : card,\r\n                        ),\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'cybersource',\r\n                            gatewayMerchantId,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayOrbitalInitializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        const {\r\n            paymentMethodData: {\r\n                type,\r\n                tokenizationData: { token },\r\n                info: { cardNetwork: cardType, cardDetails: lastFour },\r\n            },\r\n        } = paymentData;\r\n\r\n        return Promise.resolve({\r\n            nonce: btoa(token),\r\n            type,\r\n            details: {\r\n                cardType,\r\n                lastFour,\r\n            },\r\n        });\r\n    }\r\n\r\n    private _getGooglePayPaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        const {\r\n            initializationData: {\r\n                gatewayMerchantId,\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt,\r\n                merchantId,\r\n                merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: supportedCards.map((card) =>\r\n                            card === 'MC' ? 'MASTERCARD' : card,\r\n                        ),\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'chase',\r\n                            gatewayMerchantId,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport { InvalidArgumentError } from '../../../common/error/errors';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        try {\r\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\r\n\r\n            return Promise.resolve({\r\n                nonce: payload.id,\r\n                type: payload.type,\r\n                details: {\r\n                    cardType: payload.card.brand,\r\n                    lastFour: payload.card.last4,\r\n                },\r\n            });\r\n        } catch (err) {\r\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\r\n        }\r\n    }\r\n\r\n    private _getGooglePayPaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n        const consignments = checkout?.consignments || [];\r\n\r\n        const {\r\n            initializationData: {\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n                stripeVersion,\r\n                stripePublishableKey,\r\n                stripeConnectedAccount,\r\n                bopis,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        const isPickup = consignments.every((consignment) => consignment.selectedPickupOption);\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt,\r\n                merchantId,\r\n                merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: supportedCards.map((card) =>\r\n                            card === 'MC' ? 'MASTERCARD' : card,\r\n                        ),\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'stripe',\r\n                            'stripe:version': stripeVersion,\r\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired:\r\n                bopis?.enabled && isPickup && bopis?.requiredAddress === 'none'\r\n                    ? false\r\n                    : !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { PaymentMethodFailedError } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport { InvalidArgumentError } from '../../../common/error/errors';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayStripeUPEInitializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        let payload;\r\n\r\n        try {\r\n            payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\r\n        } catch (err) {\r\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\r\n        }\r\n\r\n        if (\r\n            !payload.id ||\r\n            !payload.type ||\r\n            !payload.card ||\r\n            !payload.card.brand ||\r\n            !payload.card.last4\r\n        ) {\r\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\r\n        }\r\n\r\n        return Promise.resolve({\r\n            nonce: payload.id,\r\n            type: payload.type,\r\n            details: {\r\n                cardType: payload.card.brand,\r\n                lastFour: payload.card.last4,\r\n            },\r\n        });\r\n    }\r\n\r\n    private _getGooglePayPaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const decimalPlaces = checkout?.cart.currency.decimalPlaces || 2;\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, decimalPlaces).toFixed(decimalPlaces)\r\n            : '';\r\n\r\n        const {\r\n            initializationData: {\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n                stripeVersion,\r\n                stripePublishableKey,\r\n                stripeConnectedAccount,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt,\r\n                merchantId,\r\n                merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: supportedCards.map((card) =>\r\n                            card === 'MC' ? 'MASTERCARD' : card,\r\n                        ),\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'stripe',\r\n                            'stripe:version': stripeVersion,\r\n                            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { round } from 'lodash';\r\n\r\nimport { Checkout } from '../../../checkout';\r\nimport PaymentMethod from '../../payment-method';\r\n\r\nimport {\r\n    BillingAddressFormat,\r\n    GooglePayInitializer,\r\n    GooglePaymentData,\r\n    GooglePayPaymentDataRequestV2,\r\n    TokenizePayload,\r\n    TotalPriceStatusType,\r\n} from './googlepay';\r\n\r\nexport default class GooglePayWorldpayAccessInitializer implements GooglePayInitializer {\r\n    initialize(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): Promise<GooglePayPaymentDataRequestV2> {\r\n        return Promise.resolve(\r\n            this._getGooglePayPaymentDataRequest(checkout, paymentMethod, hasShippingAddress),\r\n        );\r\n    }\r\n\r\n    teardown(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\r\n        const {\r\n            paymentMethodData: {\r\n                type,\r\n                tokenizationData: { token },\r\n                info: { cardNetwork: cardType, cardDetails: lastFour },\r\n            },\r\n        } = paymentData;\r\n\r\n        return Promise.resolve({\r\n            nonce: btoa(token),\r\n            type,\r\n            details: {\r\n                cardType,\r\n                lastFour,\r\n            },\r\n        });\r\n    }\r\n\r\n    private _getGooglePayPaymentDataRequest(\r\n        checkout: Checkout | undefined,\r\n        paymentMethod: PaymentMethod,\r\n        hasShippingAddress: boolean,\r\n    ): GooglePayPaymentDataRequestV2 {\r\n        const currencyCode = checkout?.cart.currency.code || '';\r\n        const totalPrice = checkout?.outstandingBalance\r\n            ? round(checkout.outstandingBalance, 2).toFixed(2)\r\n            : '';\r\n\r\n        const {\r\n            initializationData: {\r\n                gatewayMerchantId,\r\n                storeCountry: countryCode,\r\n                googleMerchantName: merchantName,\r\n                googleMerchantId: merchantId,\r\n                platformToken: authJwt,\r\n            },\r\n            supportedCards,\r\n        } = paymentMethod;\r\n\r\n        return {\r\n            apiVersion: 2,\r\n            apiVersionMinor: 0,\r\n            merchantInfo: {\r\n                authJwt,\r\n                merchantId,\r\n                merchantName,\r\n            },\r\n            allowedPaymentMethods: [\r\n                {\r\n                    type: 'CARD',\r\n                    parameters: {\r\n                        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\r\n                        allowedCardNetworks: supportedCards.map((card) =>\r\n                            card === 'MC' ? 'MASTERCARD' : card,\r\n                        ),\r\n                        billingAddressRequired: true,\r\n                        billingAddressParameters: {\r\n                            format: BillingAddressFormat.Full,\r\n                            phoneNumberRequired: true,\r\n                        },\r\n                    },\r\n                    tokenizationSpecification: {\r\n                        type: 'PAYMENT_GATEWAY',\r\n                        parameters: {\r\n                            gateway: 'worldpay',\r\n                            gatewayMerchantId,\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n            transactionInfo: {\r\n                countryCode,\r\n                currencyCode,\r\n                totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                totalPrice,\r\n            },\r\n            emailRequired: true,\r\n            shippingAddressRequired: !hasShippingAddress,\r\n            shippingAddressParameters: {\r\n                phoneNumberRequired: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { PaymentMethodClientUnavailableError } from '../../errors';\r\n\r\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\r\n\r\ninterface MasterpassScriptLoaderParams {\r\n    useMasterpassSrc: boolean;\r\n    language: string;\r\n    testMode?: boolean;\r\n    checkoutId?: string;\r\n}\r\n\r\nexport default class MasterpassScriptLoader {\r\n    constructor(\r\n        private _scriptLoader: ScriptLoader,\r\n        public _window: MasterpassHostWindow = window,\r\n    ) {}\r\n\r\n    async load({\r\n        useMasterpassSrc,\r\n        language,\r\n        testMode,\r\n        checkoutId,\r\n    }: MasterpassScriptLoaderParams): Promise<Masterpass> {\r\n        if (useMasterpassSrc) {\r\n            const subdomain = testMode ? 'sandbox.' : '';\r\n            const params = [`locale=${language}`, `checkoutid=${checkoutId}`];\r\n\r\n            const sourceUrl = [\r\n                `https://${subdomain}src.mastercard.com/srci/integration/merchant.js`,\r\n                params.join('&'),\r\n            ].join('?');\r\n\r\n            await this._scriptLoader.loadScript(sourceUrl);\r\n\r\n            if (!this._window.masterpass) {\r\n                throw new PaymentMethodClientUnavailableError();\r\n            }\r\n\r\n            return this._window.masterpass;\r\n        }\r\n\r\n        await this._scriptLoader.loadScript(\r\n            `//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`,\r\n        );\r\n\r\n        if (!this._window.masterpass) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this._window.masterpass;\r\n    }\r\n}\r\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { PaymentMethodClientUnavailableError } from '../../errors';\r\n\r\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\r\n\r\nexport default class PaypalScriptLoader {\r\n    private _window: PaypalHostWindow;\r\n\r\n    constructor(private _scriptLoader: ScriptLoader) {\r\n        this._window = window;\r\n    }\r\n\r\n    async loadPaypal(merchantId = ''): Promise<PaypalSDK> {\r\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\r\n        const options: LoadScriptOptions = {\r\n            async: true,\r\n            attributes: { 'data-merchant-id': merchantId },\r\n        };\r\n\r\n        merchantId\r\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\r\n            : await this._scriptLoader.loadScript(scriptSrc);\r\n\r\n        if (!this._window.paypal) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this._window.paypal;\r\n    }\r\n}\r\n","import { StandardError } from '../../common/error/errors';\r\n\r\n/**\r\n * This error should be thrown when a shopper tries to sign in as a guest but\r\n * they are already signed in as a registered customer.\r\n */\r\nexport default class BuyNowCartCreationError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\r\n        );\r\n\r\n        this.name = 'BuyNowCartCreationError';\r\n        this.type = 'buy_now_cart_creation_error';\r\n    }\r\n}\r\n","import { BuyNowCartRequestBody } from '../../../cart';\r\nimport {\r\n    AmazonPayV2ButtonConfig,\r\n    AmazonPayV2ButtonParameters,\r\n} from '../../../payment/strategies/amazon-pay-v2';\r\n\r\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\r\n    if (!(options instanceof Object)) {\r\n        return false;\r\n    }\r\n\r\n    return 'buyNowInitializeOptions' in options;\r\n}\r\n\r\nexport interface WithBuyNowFeature extends AmazonPayV2ButtonConfig {\r\n    /**\r\n     * The options that are required to initialize Buy Now functionality.\r\n     */\r\n    buyNowInitializeOptions?: {\r\n        getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\r\n    };\r\n}\r\n\r\n/**\r\n * The required config to render the AmazonPayV2 button.\r\n */\r\nexport type AmazonPayV2ButtonInitializeOptions = AmazonPayV2ButtonParameters | WithBuyNowFeature;\r\n","import { StandardError } from '../../../../common/error/errors';\r\n\r\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'An unexpected error has occurred during config creation process. Please try again later.',\r\n        );\r\n\r\n        this.name = 'AmazonPayV2ConfigCreationError';\r\n        this.type = 'amazon_pay_v2_config_creation_error';\r\n    }\r\n}\r\n","import { CartRequestSender } from '../../../cart';\r\nimport BuyNowCartRequestBody from '../../../cart/buy-now-cart-request-body';\r\nimport { BuyNowCartCreationError } from '../../../cart/errors';\r\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n} from '../../../common/error/errors';\r\nimport {\r\n    AmazonPayV2CheckoutSessionConfig,\r\n    AmazonPayV2PaymentProcessor,\r\n    AmazonPayV2PayOptions,\r\n    AmazonPayV2Placement,\r\n} from '../../../payment/strategies/amazon-pay-v2';\r\nimport { getShippableItemsCount } from '../../../shipping';\r\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\r\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\r\n\r\nimport { isWithBuyNowFeatures } from './amazon-pay-v2-button-options';\r\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\r\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\r\n\r\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\r\n    private _buyNowCartRequestBody?: BuyNowCartRequestBody | void;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _checkoutActionCreator: CheckoutActionCreator,\r\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\r\n        private _cartRequestSender: CartRequestSender,\r\n        private _amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\r\n    ) {}\r\n\r\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\r\n        const { methodId, containerId, amazonpay } = options;\r\n        const { buttonColor } = amazonpay || {};\r\n\r\n        if (!methodId || !containerId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        const {\r\n            paymentMethods: { getPaymentMethodOrThrow },\r\n        } = this._store.getState();\r\n\r\n        await this._amazonPayV2PaymentProcessor.initialize(getPaymentMethodOrThrow(methodId));\r\n\r\n        if (!amazonpay) {\r\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\r\n        }\r\n\r\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\r\n            ? undefined\r\n            : amazonpay;\r\n\r\n        if (\r\n            isWithBuyNowFeatures(amazonpay) &&\r\n            typeof amazonpay?.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\r\n        ) {\r\n            this._buyNowCartRequestBody =\r\n                amazonpay.buyNowInitializeOptions.getBuyNowCartRequestBody();\r\n\r\n            if (this._buyNowCartRequestBody) {\r\n                this._amazonPayV2PaymentProcessor.setCartRequestBody(this._buyNowCartRequestBody);\r\n            }\r\n        }\r\n\r\n        this._amazonPayV2PaymentProcessor.renderAmazonPayButton({\r\n            checkoutState: this._store.getState(),\r\n            containerId,\r\n            methodId,\r\n            options: initializeAmazonButtonOptions,\r\n            placement: AmazonPayV2Placement.Cart,\r\n            buttonColor,\r\n        });\r\n\r\n        if (this._buyNowCartRequestBody) {\r\n            this._amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\r\n                this._getCheckoutCreationRequestConfig.bind(this),\r\n            );\r\n        }\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return this._amazonPayV2PaymentProcessor.deinitialize();\r\n    }\r\n\r\n    private async _createBuyNowCart() {\r\n        if (!this._buyNowCartRequestBody) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n        }\r\n\r\n        try {\r\n            const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\r\n                this._buyNowCartRequestBody,\r\n            );\r\n\r\n            return buyNowCart;\r\n        } catch (error) {\r\n            throw new BuyNowCartCreationError();\r\n        }\r\n    }\r\n\r\n    private async _createCheckoutConfig(\r\n        id: string,\r\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\r\n        try {\r\n            const {\r\n                body: { payload, public_key, ...rest },\r\n            } = await this._amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\r\n\r\n            return {\r\n                payloadJSON: payload,\r\n                publicKeyId: public_key,\r\n                ...rest,\r\n            };\r\n        } catch (error) {\r\n            throw new AmazonPayV2ConfigCreationError();\r\n        }\r\n    }\r\n\r\n    private async _getCheckoutCreationRequestConfig() {\r\n        const buyNowCart = await this._createBuyNowCart();\r\n\r\n        const estimatedOrderAmount = {\r\n            amount: String(buyNowCart.baseAmount),\r\n            currencyCode: buyNowCart.currency.code,\r\n        };\r\n\r\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\r\n\r\n        return {\r\n            createCheckoutSessionConfig,\r\n            estimatedOrderAmount,\r\n            productType:\r\n                getShippableItemsCount(buyNowCart) === 0\r\n                    ? AmazonPayV2PayOptions.PayOnly\r\n                    : AmazonPayV2PayOptions.PayAndShip,\r\n        };\r\n    }\r\n}\r\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\r\n\r\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\r\n\r\nexport interface CheckoutConfig {\r\n    payload: string;\r\n    signature: string;\r\n    public_key: string;\r\n}\r\n\r\nexport default class AmazonPayV2RequestSender {\r\n    constructor(private _requestSender: RequestSender) {}\r\n\r\n    createCheckoutConfig(cartId: string | number): Promise<Response<CheckoutConfig>> {\r\n        const body = { cartId };\r\n        const headers = {\r\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n            'Content-Type': ContentType.Json,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\r\n    }\r\n}\r\n","import { Address } from '../../../address';\r\n\r\nimport { BraintreeShippingAddressOverride } from './braintree';\r\n\r\nexport default function mapToBraintreeShippingAddressOverride(\r\n    address: Address,\r\n): BraintreeShippingAddressOverride {\r\n    return {\r\n        recipientName: `${address.firstName} ${address.lastName}`,\r\n        line1: address.address1,\r\n        line2: address.address2,\r\n        city: address.city,\r\n        state: address.stateOrProvinceCode,\r\n        postalCode: address.postalCode,\r\n        countryCode: address.countryCode,\r\n        phone: address.phone,\r\n    };\r\n}\r\n","import { isNil, omitBy } from 'lodash';\r\n\r\nimport { PaypalStyleOptions } from '../../../payment/strategies/paypal';\r\n\r\nexport default function getValidButtonStyle(style: PaypalStyleOptions): PaypalStyleOptions {\r\n    const { color, fundingicons, height, layout, shape, size, tagline } = style;\r\n\r\n    const validStyles = {\r\n        color,\r\n        fundingicons,\r\n        height: getValidHeight(height),\r\n        layout,\r\n        shape: shape || 'rect',\r\n        size,\r\n        tagline,\r\n    };\r\n\r\n    return omitBy(validStyles, isNil);\r\n}\r\n\r\nfunction getValidHeight(height?: number): number {\r\n    const minHeight = 25;\r\n    const maxHeight = 55;\r\n\r\n    if (typeof height !== 'number' || height > maxHeight) {\r\n        return maxHeight;\r\n    }\r\n\r\n    if (height < minHeight) {\r\n        return minHeight;\r\n    }\r\n\r\n    return height;\r\n}\r\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\r\n\r\nexport default function mapToLegacyBillingAddress(\r\n    details: BraintreeDetails,\r\n): Partial<LegacyAddress> {\r\n    const { billingAddress, email, firstName, lastName, phone, shippingAddress } = details;\r\n\r\n    const address = billingAddress || shippingAddress;\r\n\r\n    return {\r\n        email,\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        phone_number: phone,\r\n        address_line_1: address?.line1,\r\n        address_line_2: address?.line2,\r\n        city: address?.city,\r\n        state: address?.state,\r\n        country_code: address?.countryCode,\r\n        postal_code: address?.postalCode,\r\n    };\r\n}\r\n","import { LegacyAddress } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { BraintreeDetails } from '../../../payment/strategies/braintree';\r\n\r\nexport default function mapToLegacyShippingAddress(\r\n    details: BraintreeDetails,\r\n): Partial<LegacyAddress> {\r\n    const { email, phone, shippingAddress } = details;\r\n\r\n    const recipientName = shippingAddress?.recipientName || '';\r\n    const [firstName, lastName] = recipientName.split(' ');\r\n\r\n    return {\r\n        email,\r\n        first_name: firstName || '',\r\n        last_name: lastName || '',\r\n        phone_number: phone,\r\n        address_line_1: shippingAddress?.line1,\r\n        address_line_2: shippingAddress?.line2,\r\n        city: shippingAddress?.city,\r\n        state: shippingAddress?.state,\r\n        country_code: shippingAddress?.countryCode,\r\n        postal_code: shippingAddress?.postalCode,\r\n    };\r\n}\r\n","import { FormPoster } from '@bigcommerce/form-poster';\r\n\r\nimport { Cart, CartRequestSender } from '../../../cart';\r\nimport { BuyNowCartCreationError } from '../../../cart/errors';\r\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    StandardError,\r\n} from '../../../common/error/errors';\r\nimport PaymentMethod from '../../../payment/payment-method';\r\nimport {\r\n    BraintreeError,\r\n    BraintreePaypalCheckout,\r\n    BraintreePaypalSdkCreatorConfig,\r\n    BraintreeSDKCreator,\r\n    BraintreeTokenizePayload,\r\n    mapToBraintreeShippingAddressOverride,\r\n} from '../../../payment/strategies/braintree';\r\nimport { PaypalAuthorizeData, PaypalHostWindow } from '../../../payment/strategies/paypal';\r\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\r\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\r\n\r\nimport { BraintreePaypalButtonInitializeOptions } from './braintree-paypal-button-options';\r\nimport getValidButtonStyle from './get-valid-button-style';\r\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\r\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\r\n\r\ntype BuyNowInitializeOptions = Pick<\r\n    BraintreePaypalButtonInitializeOptions,\r\n    'buyNowInitializeOptions'\r\n>;\r\n\r\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\r\n    private _buyNowCart?: Cart;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _checkoutActionCreator: CheckoutActionCreator,\r\n        private _cartRequestSender: CartRequestSender,\r\n        private _braintreeSDKCreator: BraintreeSDKCreator,\r\n        private _formPoster: FormPoster,\r\n        private _window: PaypalHostWindow,\r\n    ) {}\r\n\r\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\r\n        const { braintreepaypal, containerId, methodId } = options;\r\n        const { messagingContainerId, onError } = braintreepaypal || {};\r\n\r\n        if (!methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        if (!containerId) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (!braintreepaypal) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        let state: InternalCheckoutSelectors;\r\n        let paymentMethod: PaymentMethod;\r\n        let currencyCode: string;\r\n\r\n        if (braintreepaypal.buyNowInitializeOptions) {\r\n            state = this._store.getState();\r\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\r\n\r\n            if (!braintreepaypal.currencyCode) {\r\n                throw new InvalidArgumentError(\r\n                    `Unable to initialize payment because \"options.braintreepaypal.currencyCode\" argument is not provided.`,\r\n                );\r\n            }\r\n\r\n            currencyCode = braintreepaypal.currencyCode;\r\n        } else {\r\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\r\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\r\n            currencyCode = state.cart.getCartOrThrow().currency.code;\r\n        }\r\n\r\n        if (!paymentMethod.clientToken) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\r\n            currency: currencyCode,\r\n            intent: paymentMethod.initializationData?.intent,\r\n            isCreditEnabled: paymentMethod.initializationData?.isCreditEnabled,\r\n        };\r\n\r\n        const paypalCheckoutSuccessCallback = (\r\n            braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        ) => {\r\n            this._renderPayPalComponents(\r\n                braintreePaypalCheckout,\r\n                braintreepaypal,\r\n                containerId,\r\n                methodId,\r\n                Boolean(paymentMethod.config.testMode),\r\n            );\r\n        };\r\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\r\n            this._handleError(error, containerId, messagingContainerId, onError);\r\n\r\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\r\n        await this._braintreeSDKCreator.getPaypalCheckout(\r\n            paypalCheckoutOptions,\r\n            paypalCheckoutSuccessCallback,\r\n            paypalCheckoutErrorCallback,\r\n        );\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        this._braintreeSDKCreator.teardown();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _renderPayPalComponents(\r\n        braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\r\n        containerId: string,\r\n        methodId: string,\r\n        testMode: boolean,\r\n    ): void {\r\n        const { messagingContainerId } = braintreepaypal;\r\n\r\n        this._renderPayPalMessages(messagingContainerId);\r\n        this._renderPayPalButton(\r\n            braintreePaypalCheckout,\r\n            braintreepaypal,\r\n            containerId,\r\n            methodId,\r\n            testMode,\r\n        );\r\n    }\r\n\r\n    private _renderPayPalButton(\r\n        braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\r\n        containerId: string,\r\n        methodId: string,\r\n        testMode: boolean,\r\n    ): void {\r\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypal;\r\n\r\n        const { paypal } = this._window;\r\n        const fundingSource = paypal?.FUNDING.PAYPAL;\r\n\r\n        if (paypal && fundingSource) {\r\n            const validButtonStyle = style ? getValidButtonStyle(style) : {};\r\n\r\n            const paypalButtonRender = paypal.Buttons({\r\n                env: testMode ? 'sandbox' : 'production',\r\n                commit: false,\r\n                fundingSource,\r\n                style: validButtonStyle,\r\n                createOrder: () =>\r\n                    this._setupPayment(braintreePaypalCheckout, braintreepaypal, methodId),\r\n                onApprove: (authorizeData: PaypalAuthorizeData) =>\r\n                    this._tokenizePayment(\r\n                        authorizeData,\r\n                        braintreePaypalCheckout,\r\n                        methodId,\r\n                        shouldProcessPayment,\r\n                        onAuthorizeError,\r\n                    ),\r\n            });\r\n\r\n            if (paypalButtonRender.isEligible()) {\r\n                paypalButtonRender.render(`#${containerId}`);\r\n            }\r\n        } else {\r\n            this._removeElement(containerId);\r\n        }\r\n    }\r\n\r\n    private _renderPayPalMessages(messagingContainerId?: string): void {\r\n        const isMessageContainerAvailable =\r\n            messagingContainerId && Boolean(document.getElementById(messagingContainerId));\r\n        const { paypal } = this._window;\r\n\r\n        if (paypal && isMessageContainerAvailable) {\r\n            const state = this._store.getState();\r\n            const cart = state.cart.getCartOrThrow();\r\n\r\n            const paypalMessagesRender = paypal.Messages({\r\n                amount: cart.cartAmount,\r\n                placement: 'cart',\r\n            });\r\n\r\n            paypalMessagesRender.render(`#${messagingContainerId}`);\r\n        } else {\r\n            this._removeElement(messagingContainerId);\r\n        }\r\n    }\r\n\r\n    private async _setupPayment(\r\n        braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        braintreepaypal: BraintreePaypalButtonInitializeOptions,\r\n        methodId: string,\r\n    ): Promise<string> {\r\n        const { buyNowInitializeOptions, shippingAddress, onPaymentError } = braintreepaypal;\r\n        let state: InternalCheckoutSelectors;\r\n\r\n        try {\r\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\r\n\r\n            if (this._buyNowCart) {\r\n                state = this._store.getState();\r\n            } else {\r\n                state = await this._store.dispatch(\r\n                    this._checkoutActionCreator.loadDefaultCheckout(),\r\n                );\r\n            }\r\n\r\n            const customer = state.customer.getCustomer();\r\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\r\n\r\n            const amount = this._buyNowCart\r\n                ? this._buyNowCart.cartAmount\r\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\r\n            const currencyCode =\r\n                braintreepaypal.currencyCode ?? state.config.getStoreConfigOrThrow().currency.code;\r\n\r\n            const address = shippingAddress || customer?.addresses[0];\r\n            const shippingAddressOverride = address\r\n                ? mapToBraintreeShippingAddressOverride(address)\r\n                : undefined;\r\n\r\n            return await braintreePaypalCheckout.createPayment({\r\n                flow: 'checkout',\r\n                enableShippingAddress: true,\r\n                shippingAddressEditable: false,\r\n                shippingAddressOverride,\r\n                amount,\r\n                currency: currencyCode,\r\n                offerCredit: false,\r\n                intent: paymentMethod.initializationData?.intent,\r\n            });\r\n        } catch (error) {\r\n            if (onPaymentError) {\r\n                onPaymentError(error);\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\r\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\r\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\r\n\r\n            if (!cartRequestBody) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n            }\r\n\r\n            try {\r\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\r\n                    cartRequestBody,\r\n                );\r\n\r\n                return cart;\r\n            } catch (error) {\r\n                throw new BuyNowCartCreationError();\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _tokenizePayment(\r\n        authorizeData: PaypalAuthorizeData,\r\n        braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        methodId: string,\r\n        shouldProcessPayment?: boolean,\r\n        onError?: (error: BraintreeError | StandardError) => void,\r\n    ): Promise<BraintreeTokenizePayload> {\r\n        try {\r\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\r\n                paypal: true,\r\n            });\r\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\r\n            const { details, nonce } = tokenizePayload;\r\n            const buyNowCartId = this._buyNowCart?.id;\r\n\r\n            this._formPoster.postForm('/checkout.php', {\r\n                payment_type: 'paypal',\r\n                provider: methodId,\r\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\r\n                nonce,\r\n                device_data: deviceData,\r\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\r\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\r\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\r\n            });\r\n\r\n            return tokenizePayload;\r\n        } catch (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private _handleError(\r\n        error: BraintreeError,\r\n        buttonContainerId: string,\r\n        messagingContainerId?: string,\r\n        onErrorCallback?: (error: BraintreeError) => void,\r\n    ): void {\r\n        this._removeElement(buttonContainerId);\r\n        this._removeElement(messagingContainerId);\r\n\r\n        if (onErrorCallback) {\r\n            onErrorCallback(error);\r\n        }\r\n    }\r\n\r\n    private _removeElement(elementId?: string): void {\r\n        const element = elementId && document.getElementById(elementId);\r\n\r\n        if (element) {\r\n            element.remove();\r\n        }\r\n    }\r\n}\r\n","export interface PaypalSDK {\r\n    Button: PaypalButton;\r\n    checkout: PaypalExpressCheckout;\r\n    FUNDING: PaypalFundingTypeList;\r\n    Messages(options: MessagingOptions): MessagingRender;\r\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\r\n}\r\n\r\nexport interface PaypalFundingTypeList {\r\n    CARD?: string;\r\n    CREDIT?: string;\r\n    PAYPAL?: string;\r\n    PAYLATER?: string;\r\n}\r\n\r\nexport interface PaypalButton {\r\n    render(options: PaypalButtonOptions, container: string): void;\r\n}\r\n\r\nexport interface PaypalButtonRender {\r\n    render(container: string): void;\r\n    isEligible(): boolean;\r\n}\r\n\r\nexport interface MessagingRender {\r\n    render(container: string): void;\r\n}\r\n\r\nexport interface MessagingOptions {\r\n    amount: number;\r\n    placement: string;\r\n}\r\n\r\nexport interface PaypalButtonOptions {\r\n    env?: string;\r\n    commit?: boolean;\r\n    style?: PaypalStyleOptions;\r\n    funding?: PaypalFundingType;\r\n    fundingSource?: string;\r\n    client?: PaypalClientToken;\r\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\r\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\r\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\r\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\r\n}\r\n\r\nexport interface PaypalClientToken {\r\n    production?: string;\r\n    sandbox?: string;\r\n}\r\n\r\nexport interface PaypalFundingType {\r\n    allowed?: string[];\r\n    disallowed?: string[];\r\n}\r\n\r\nexport enum PaypalButtonStyleLayoutOption {\r\n    HORIZONTAL = 'horizontal',\r\n    VERTICAL = 'vertical',\r\n}\r\n\r\nexport enum PaypalButtonStyleSizeOption {\r\n    SMALL = 'small',\r\n    MEDIUM = 'medium',\r\n    LARGE = 'large',\r\n    RESPONSIVE = 'responsive',\r\n}\r\n\r\nexport enum PaypalButtonStyleColorOption {\r\n    GOLD = 'gold',\r\n    BLUE = 'blue',\r\n    SIlVER = 'silver',\r\n    BLACK = 'black',\r\n}\r\n\r\nexport enum PaypalButtonStyleLabelOption {\r\n    CHECKOUT = 'checkout',\r\n    PAY = 'pay',\r\n    BUYNOW = 'buynow',\r\n    PAYPAL = 'paypal',\r\n    CREDIT = 'credit',\r\n}\r\n\r\nexport enum PaypalButtonStyleShapeOption {\r\n    PILL = 'pill',\r\n    RECT = 'rect',\r\n}\r\n\r\nexport interface PaypalStyleOptions {\r\n    layout?: PaypalButtonStyleLayoutOption;\r\n    size?: PaypalButtonStyleSizeOption;\r\n    color?: PaypalButtonStyleColorOption;\r\n    label?: PaypalButtonStyleLabelOption;\r\n    shape?: PaypalButtonStyleShapeOption;\r\n    tagline?: boolean;\r\n    fundingicons?: boolean;\r\n    height?: number;\r\n}\r\n\r\nexport interface PaypalActions {\r\n    payment: PaypalPaymentActions;\r\n    request: PaypalRequestActions;\r\n}\r\n\r\nexport interface PaypalPaymentActions {\r\n    get(id: string): Promise<PaypalPaymentPayload>;\r\n}\r\n\r\nexport interface PaypalRequestActions {\r\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\r\n}\r\n\r\nexport interface PaypalTransaction {\r\n    amount?: PaypalAmount;\r\n    payee?: PaypalPayee;\r\n    description?: string;\r\n    note_to_payee?: string;\r\n    item_list?: PaypalItemList;\r\n}\r\n\r\nexport interface PaypalItemList {\r\n    items?: PaypalItem[];\r\n    shipping_address?: PaypalAddress;\r\n}\r\n\r\nexport interface PaypalItem {\r\n    sku?: string;\r\n    name?: string;\r\n    description?: string;\r\n    quantity: string;\r\n    price: string;\r\n    currency: string;\r\n    tax?: string;\r\n}\r\n\r\nexport interface PaypalAmount {\r\n    currency: string;\r\n    total: string;\r\n}\r\n\r\nexport interface PaypalPayer {\r\n    payer_info: object;\r\n}\r\n\r\nexport interface PaypalPayee {\r\n    email?: string;\r\n    merchant_id?: string;\r\n}\r\n\r\nexport interface PaypalAddress {\r\n    line1: string;\r\n    line2?: string;\r\n    city?: string;\r\n    country_code: string;\r\n    postal_code?: string;\r\n    state?: string;\r\n    phone?: string;\r\n    type?: string;\r\n}\r\n\r\nexport interface PaypalPaymentPayload {\r\n    payment: PaypalPaymentPayload;\r\n    payer: PaypalPayer;\r\n    transactions?: PaypalTransaction[];\r\n}\r\n\r\nexport interface PaypalAuthorizeData {\r\n    payerId: string;\r\n    paymentId?: string;\r\n    billingToken?: string;\r\n    // the PayPal side of things uses uppercase ID instead of camel case Id\r\n    payerID?: string;\r\n    paymentID?: string;\r\n}\r\n\r\nexport interface PaypalExpressCheckout {\r\n    initXO(): void;\r\n    startFlow(url: string): void;\r\n    closeFlow(): void;\r\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\r\n}\r\n\r\nexport interface PaypalExpressCheckoutOptions {\r\n    button: string;\r\n    environment: string;\r\n}\r\n\r\nexport interface PaypalHostWindow extends Window {\r\n    paypal?: PaypalSDK;\r\n}\r\n","import { FormPoster } from '@bigcommerce/form-poster';\r\n\r\nimport { Cart, CartRequestSender } from '../../../cart';\r\nimport { BuyNowCartCreationError } from '../../../cart/errors';\r\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    StandardError,\r\n} from '../../../common/error/errors';\r\nimport PaymentMethod from '../../../payment/payment-method';\r\nimport {\r\n    BraintreeError,\r\n    BraintreePaypalCheckout,\r\n    BraintreePaypalSdkCreatorConfig,\r\n    BraintreeSDKCreator,\r\n    BraintreeTokenizePayload,\r\n    mapToBraintreeShippingAddressOverride,\r\n} from '../../../payment/strategies/braintree';\r\nimport {\r\n    PaypalAuthorizeData,\r\n    PaypalButtonStyleLabelOption,\r\n    PaypalHostWindow,\r\n} from '../../../payment/strategies/paypal';\r\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\r\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\r\n\r\nimport { BraintreePaypalCreditButtonInitializeOptions } from './braintree-paypal-credit-button-options';\r\nimport getValidButtonStyle from './get-valid-button-style';\r\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\r\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\r\n\r\ntype BuyNowInitializeOptions = Pick<\r\n    BraintreePaypalCreditButtonInitializeOptions,\r\n    'buyNowInitializeOptions'\r\n>;\r\n\r\nexport default class BraintreePaypalCreditButtonStrategy implements CheckoutButtonStrategy {\r\n    private _buyNowCart?: Cart;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _checkoutActionCreator: CheckoutActionCreator,\r\n        private _cartRequestSender: CartRequestSender,\r\n        private _braintreeSDKCreator: BraintreeSDKCreator,\r\n        private _formPoster: FormPoster,\r\n        private _window: PaypalHostWindow,\r\n    ) {}\r\n\r\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\r\n        const { braintreepaypalcredit, containerId, methodId } = options;\r\n\r\n        if (!methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        if (!containerId) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (!braintreepaypalcredit) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        let state: InternalCheckoutSelectors;\r\n        let paymentMethod: PaymentMethod;\r\n        let currencyCode: string;\r\n\r\n        if (braintreepaypalcredit.buyNowInitializeOptions) {\r\n            state = this._store.getState();\r\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\r\n\r\n            if (!braintreepaypalcredit.currencyCode) {\r\n                throw new InvalidArgumentError(\r\n                    `Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.`,\r\n                );\r\n            }\r\n\r\n            currencyCode = braintreepaypalcredit.currencyCode;\r\n        } else {\r\n            state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\r\n            paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\r\n            currencyCode = state.cart.getCartOrThrow().currency.code;\r\n        }\r\n\r\n        if (!paymentMethod.clientToken) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const paypalCheckoutOptions: Partial<BraintreePaypalSdkCreatorConfig> = {\r\n            currency: currencyCode,\r\n            intent: paymentMethod.initializationData?.intent,\r\n            isCreditEnabled: paymentMethod.initializationData?.isCreditEnabled,\r\n        };\r\n\r\n        const paypalCheckoutCallback = (braintreePaypalCheckout: BraintreePaypalCheckout) =>\r\n            this._renderPayPalButton(\r\n                braintreePaypalCheckout,\r\n                braintreepaypalcredit,\r\n                containerId,\r\n                methodId,\r\n                Boolean(paymentMethod.config.testMode),\r\n            );\r\n        const paypalCheckoutErrorCallback = (error: BraintreeError) =>\r\n            this._handleError(error, containerId, braintreepaypalcredit.onError);\r\n\r\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\r\n        await this._braintreeSDKCreator.getPaypalCheckout(\r\n            paypalCheckoutOptions,\r\n            paypalCheckoutCallback,\r\n            paypalCheckoutErrorCallback,\r\n        );\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        this._braintreeSDKCreator.teardown();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _renderPayPalButton(\r\n        braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\r\n        containerId: string,\r\n        methodId: string,\r\n        testMode: boolean,\r\n    ): void {\r\n        const { style, shouldProcessPayment, onAuthorizeError } = braintreepaypalcredit;\r\n        const { paypal } = this._window;\r\n\r\n        let hasRenderedSmartButton = false;\r\n\r\n        if (paypal) {\r\n            const fundingSources = [paypal.FUNDING.PAYLATER, paypal.FUNDING.CREDIT];\r\n            const commonButtonStyle = style ? getValidButtonStyle(style) : {};\r\n\r\n            fundingSources.forEach((fundingSource) => {\r\n                const buttonStyle =\r\n                    fundingSource === paypal.FUNDING.CREDIT\r\n                        ? { label: PaypalButtonStyleLabelOption.CREDIT, ...commonButtonStyle }\r\n                        : commonButtonStyle;\r\n\r\n                if (!hasRenderedSmartButton) {\r\n                    const paypalButtonRender = paypal.Buttons({\r\n                        env: testMode ? 'sandbox' : 'production',\r\n                        commit: false,\r\n                        fundingSource,\r\n                        style: buttonStyle,\r\n                        createOrder: () =>\r\n                            this._setupPayment(\r\n                                braintreePaypalCheckout,\r\n                                braintreepaypalcredit,\r\n                                methodId,\r\n                            ),\r\n                        onApprove: (authorizeData: PaypalAuthorizeData) =>\r\n                            this._tokenizePayment(\r\n                                authorizeData,\r\n                                braintreePaypalCheckout,\r\n                                methodId,\r\n                                shouldProcessPayment,\r\n                                onAuthorizeError,\r\n                            ),\r\n                    });\r\n\r\n                    if (paypalButtonRender.isEligible()) {\r\n                        paypalButtonRender.render(`#${containerId}`);\r\n                        hasRenderedSmartButton = true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!paypal || !hasRenderedSmartButton) {\r\n            this._removeElement(containerId);\r\n        }\r\n    }\r\n\r\n    private async _setupPayment(\r\n        braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        braintreepaypalcredit: BraintreePaypalCreditButtonInitializeOptions,\r\n        methodId: string,\r\n    ): Promise<string> {\r\n        const { onPaymentError, shippingAddress, buyNowInitializeOptions } = braintreepaypalcredit;\r\n        let state: InternalCheckoutSelectors;\r\n\r\n        try {\r\n            this._buyNowCart = await this._createBuyNowCart({ buyNowInitializeOptions });\r\n\r\n            if (this._buyNowCart) {\r\n                state = this._store.getState();\r\n            } else {\r\n                state = await this._store.dispatch(\r\n                    this._checkoutActionCreator.loadDefaultCheckout(),\r\n                );\r\n            }\r\n\r\n            const customer = state.customer.getCustomer();\r\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\r\n\r\n            const amount = this._buyNowCart\r\n                ? this._buyNowCart.cartAmount\r\n                : state.checkout.getCheckoutOrThrow().outstandingBalance;\r\n            const currencyCode =\r\n                braintreepaypalcredit.currencyCode ??\r\n                state.config.getStoreConfigOrThrow().currency.code;\r\n\r\n            const address = shippingAddress || customer?.addresses[0];\r\n            const shippingAddressOverride = address\r\n                ? mapToBraintreeShippingAddressOverride(address)\r\n                : undefined;\r\n\r\n            return await braintreePaypalCheckout.createPayment({\r\n                flow: 'checkout',\r\n                enableShippingAddress: true,\r\n                shippingAddressEditable: false,\r\n                shippingAddressOverride,\r\n                amount,\r\n                currency: currencyCode,\r\n                offerCredit: true,\r\n                intent: paymentMethod.initializationData?.intent,\r\n            });\r\n        } catch (error) {\r\n            if (onPaymentError) {\r\n                onPaymentError(error);\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async _createBuyNowCart({ buyNowInitializeOptions }: BuyNowInitializeOptions) {\r\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\r\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\r\n\r\n            if (!cartRequestBody) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n            }\r\n\r\n            try {\r\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\r\n                    cartRequestBody,\r\n                );\r\n\r\n                return buyNowCart;\r\n            } catch (error) {\r\n                throw new BuyNowCartCreationError();\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _tokenizePayment(\r\n        authorizeData: PaypalAuthorizeData,\r\n        braintreePaypalCheckout: BraintreePaypalCheckout,\r\n        methodId: string,\r\n        shouldProcessPayment?: boolean,\r\n        onError?: (error: BraintreeError | StandardError) => void,\r\n    ): Promise<BraintreeTokenizePayload> {\r\n        try {\r\n            const { deviceData } = await this._braintreeSDKCreator.getDataCollector({\r\n                paypal: true,\r\n            });\r\n            const tokenizePayload = await braintreePaypalCheckout.tokenizePayment(authorizeData);\r\n            const { details, nonce } = tokenizePayload;\r\n            const buyNowCartId = this._buyNowCart?.id;\r\n\r\n            this._formPoster.postForm('/checkout.php', {\r\n                payment_type: 'paypal',\r\n                provider: methodId,\r\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\r\n                nonce,\r\n                device_data: deviceData,\r\n                billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\r\n                shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\r\n                ...(buyNowCartId && { cart_id: buyNowCartId }),\r\n            });\r\n\r\n            return tokenizePayload;\r\n        } catch (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private _handleError(\r\n        error: BraintreeError,\r\n        containerId: string,\r\n        onErrorCallback?: (error: BraintreeError) => void,\r\n    ): void {\r\n        this._removeElement(containerId);\r\n\r\n        if (onErrorCallback) {\r\n            onErrorCallback(error);\r\n        }\r\n    }\r\n\r\n    private _removeElement(elementId?: string): void {\r\n        const element = elementId && document.getElementById(elementId);\r\n\r\n        if (element) {\r\n            element.remove();\r\n        }\r\n    }\r\n}\r\n","import { FormPoster } from '@bigcommerce/form-poster';\r\nimport { noop } from 'lodash';\r\n\r\nimport { BuyNowCartRequestBody, CartRequestSender } from '../../../cart';\r\nimport { BuyNowCartCreationError } from '../../../cart/errors';\r\nimport { CheckoutStore } from '../../../checkout';\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    UnsupportedBrowserError,\r\n} from '../../../common/error/errors';\r\nimport { PaymentMethodActionCreator } from '../../../payment';\r\nimport {\r\n    BraintreeError,\r\n    BraintreeSDKCreator,\r\n    BraintreeTokenizePayload,\r\n    BraintreeVenmoCheckout,\r\n} from '../../../payment/strategies/braintree';\r\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\r\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\r\nimport { CheckoutButtonMethodType } from '../index';\r\n\r\nimport mapToLegacyBillingAddress from './map-to-legacy-billing-address';\r\nimport mapToLegacyShippingAddress from './map-to-legacy-shipping-address';\r\n\r\nconst venmoButtonStyle = {\r\n    backgroundColor: '#3D95CE',\r\n    backgroundPosition: '50% 50%',\r\n    backgroundSize: '80px auto',\r\n    backgroundImage: 'url(\"/app/assets/img/payment-providers/venmo-logo-white.svg\")',\r\n    backgroundRepeat: 'no-repeat',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer',\r\n    transition: '0.2s ease',\r\n    minHeight: '40px',\r\n    minWidth: '150px',\r\n    height: '100%',\r\n    width: '100%',\r\n};\r\n\r\nconst venmoButtonStyleHover = {\r\n    backgroundColor: '#0a7fc2',\r\n};\r\n\r\ninterface BuyNowInitializeOptions {\r\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody | void;\r\n}\r\n\r\nexport default class BraintreeVenmoButtonStrategy implements CheckoutButtonStrategy {\r\n    private _onError = noop;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\r\n        private _cartRequestSender: CartRequestSender,\r\n        private _braintreeSDKCreator: BraintreeSDKCreator,\r\n        private _formPoster: FormPoster,\r\n    ) {}\r\n\r\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\r\n        const { braintreevenmo, containerId, methodId } = options;\r\n\r\n        if (!methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        const state = await this._store.dispatch(\r\n            this._paymentMethodActionCreator.loadPaymentMethod(methodId),\r\n        );\r\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\r\n\r\n        if (!paymentMethod.clientToken) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        if (!containerId) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        this._onError = braintreevenmo?.onError || this._handleError;\r\n\r\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\r\n        await this._braintreeSDKCreator.getVenmoCheckout(\r\n            (braintreeVenmoCheckout) =>\r\n                this._handleInitializationVenmoSuccess(\r\n                    braintreeVenmoCheckout,\r\n                    containerId,\r\n                    braintreevenmo?.buyNowInitializeOptions,\r\n                ),\r\n            (error) => this._handleInitializationVenmoError(error, containerId),\r\n        );\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        this._braintreeSDKCreator.teardown();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _handleError(error: BraintreeError) {\r\n        throw new Error(error.message);\r\n    }\r\n\r\n    private _handleInitializationVenmoSuccess(\r\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\r\n        parentContainerId: string,\r\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\r\n    ): void {\r\n        return this._renderVenmoButton(\r\n            braintreeVenmoCheckout,\r\n            parentContainerId,\r\n            buyNowInitializeOptions,\r\n        );\r\n    }\r\n\r\n    private _handleInitializationVenmoError(\r\n        error: BraintreeError | UnsupportedBrowserError,\r\n        containerId: string,\r\n    ): void {\r\n        this._removeVenmoContainer(containerId);\r\n\r\n        return this._onError(error);\r\n    }\r\n\r\n    private _removeVenmoContainer(containerId: string): void {\r\n        const buttonContainer = document.getElementById(containerId);\r\n\r\n        if (buttonContainer) {\r\n            buttonContainer.remove();\r\n        }\r\n    }\r\n\r\n    private _renderVenmoButton(\r\n        braintreeVenmoCheckout: BraintreeVenmoCheckout,\r\n        containerId: string,\r\n        buyNowInitializeOptions?: BuyNowInitializeOptions,\r\n    ): void {\r\n        const venmoButton = document.getElementById(containerId);\r\n\r\n        if (!venmoButton) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to create wallet button without valid container ID.',\r\n            );\r\n        }\r\n\r\n        venmoButton.setAttribute('aria-label', 'Venmo');\r\n        Object.assign(venmoButton.style, venmoButtonStyle);\r\n\r\n        venmoButton.addEventListener('click', async () => {\r\n            venmoButton.setAttribute('disabled', 'true');\r\n\r\n            const buyBowCart = await this._createBuyNowCart(buyNowInitializeOptions);\r\n\r\n            if (braintreeVenmoCheckout.tokenize) {\r\n                braintreeVenmoCheckout.tokenize(\r\n                    async (error: BraintreeError, payload: BraintreeTokenizePayload) => {\r\n                        venmoButton.removeAttribute('disabled');\r\n\r\n                        if (error) {\r\n                            return this._onError(error);\r\n                        }\r\n\r\n                        await this._handlePostForm(payload, buyBowCart?.id);\r\n                    },\r\n                );\r\n            }\r\n        });\r\n\r\n        venmoButton.addEventListener('mouseenter', () => {\r\n            venmoButton.style.backgroundColor = venmoButtonStyleHover.backgroundColor;\r\n        });\r\n\r\n        venmoButton.addEventListener('mouseleave', () => {\r\n            venmoButton.style.backgroundColor = venmoButtonStyle.backgroundColor;\r\n        });\r\n    }\r\n\r\n    private async _createBuyNowCart(buyNowInitializeOptions?: BuyNowInitializeOptions) {\r\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\r\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\r\n\r\n            if (!cartRequestBody) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n            }\r\n\r\n            try {\r\n                const { body: buyNowCart } = await this._cartRequestSender.createBuyNowCart(\r\n                    cartRequestBody,\r\n                );\r\n\r\n                return buyNowCart;\r\n            } catch (error) {\r\n                throw new BuyNowCartCreationError();\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _handlePostForm(\r\n        payload: BraintreeTokenizePayload,\r\n        buyNowCartId?: string,\r\n    ): Promise<void> {\r\n        const { deviceData } = await this._braintreeSDKCreator.getDataCollector();\r\n        const { nonce, details } = payload;\r\n\r\n        this._formPoster.postForm('/checkout.php', {\r\n            nonce,\r\n            provider: CheckoutButtonMethodType.BRAINTREE_VENMO,\r\n            payment_type: 'paypal',\r\n            device_data: deviceData,\r\n            action: 'set_external_checkout',\r\n            billing_address: JSON.stringify(mapToLegacyBillingAddress(details)),\r\n            shipping_address: JSON.stringify(mapToLegacyShippingAddress(details)),\r\n            ...(buyNowCartId && { cart_id: buyNowCartId }),\r\n        });\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\n/**\r\n * This error should be thrown when a method is unable to proceed because the\r\n * caller has not provided all the arguments according to their requirements,\r\n * i.e.: if an argument is missing or it is not the expected data type.\r\n */\r\nexport default class InvalidArgumentError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(message || 'Invalid arguments have been provided.');\r\n\r\n        this.name = 'InvalidArgumentError';\r\n        this.type = 'invalid_argument';\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\nexport enum NotInitializedErrorType {\r\n    CheckoutButtonNotInitialized,\r\n    CustomerNotInitialized,\r\n    PaymentNotInitialized,\r\n    ShippingNotInitialized,\r\n    SpamProtectionNotInitialized,\r\n}\r\n\r\n/**\r\n * Throw this error if a method requires a certain initialization call to be\r\n * made first. Some objects can be constructed but they cannot be used until a\r\n * separate initialization call is made.\r\n */\r\nexport default class NotInitializedError extends StandardError {\r\n    constructor(public subtype: NotInitializedErrorType) {\r\n        super(getErrorMessage(subtype));\r\n\r\n        this.name = 'NotInitializedError';\r\n        this.type = 'not_initialized';\r\n    }\r\n}\r\n\r\nfunction getErrorMessage(type: NotInitializedErrorType): string {\r\n    switch (type) {\r\n        case NotInitializedErrorType.CustomerNotInitialized:\r\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\r\n\r\n        case NotInitializedErrorType.PaymentNotInitialized:\r\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\r\n\r\n        case NotInitializedErrorType.ShippingNotInitialized:\r\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\r\n\r\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\r\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\r\n\r\n        default:\r\n            return 'Unable to proceed because the required component has not been initialized.';\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\nexport enum MissingDataErrorType {\r\n    MissingBillingAddress,\r\n    MissingCart,\r\n    MissingCheckout,\r\n    MissingConsignments,\r\n    MissingCustomer,\r\n    MissingCheckoutConfig,\r\n    MissingOrder,\r\n    MissingOrderConfig,\r\n    MissingOrderId,\r\n    MissingPayment,\r\n    MissingPaymentId,\r\n    MissingPaymentInstrument,\r\n    MissingPaymentMethod,\r\n    MissingPaymentRedirectUrl,\r\n    MissingPaymentStatus,\r\n    MissingPaymentToken,\r\n    MissingShippingAddress,\r\n}\r\n\r\n/**\r\n * Throw this error when data that is expected to exist is missing. Usually it\r\n * is due to the fact that certain data has not been retrieved from or saved to\r\n * the server yet. And such data is required to perform certain actions.\r\n */\r\nexport default class MissingDataError extends StandardError {\r\n    constructor(public subtype: MissingDataErrorType) {\r\n        super(getErrorMessage(subtype));\r\n\r\n        this.name = 'MissingDataError';\r\n        this.type = 'missing_data';\r\n    }\r\n}\r\n\r\nfunction getErrorMessage(type: MissingDataErrorType): string {\r\n    switch (type) {\r\n        case MissingDataErrorType.MissingBillingAddress:\r\n            return 'Unable to proceed because billing address data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingCart:\r\n            return 'Unable to proceed because cart data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingConsignments:\r\n            return 'Unable to proceed because consignments data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingCheckout:\r\n            return 'Unable to proceed because checkout data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingCustomer:\r\n            return 'Unable to proceed because customer data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingCheckoutConfig:\r\n        case MissingDataErrorType.MissingOrderConfig:\r\n            return 'Unable to proceed because configuration data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingOrder:\r\n            return 'Unable to proceed because order data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingOrderId:\r\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\r\n\r\n        case MissingDataErrorType.MissingPayment:\r\n            return 'Unable to proceed because payment data is unavailable.';\r\n\r\n        case MissingDataErrorType.MissingPaymentToken:\r\n            return 'Unable to proceed because the token required to submit a payment is missing.';\r\n\r\n        case MissingDataErrorType.MissingPaymentMethod:\r\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\r\n\r\n        case MissingDataErrorType.MissingShippingAddress:\r\n            return 'Unable to proceed because shipping address data is unavailable.';\r\n\r\n        default:\r\n            return 'Unable to proceed because the required data is unavailable.';\r\n    }\r\n}\r\n","import { FormPoster } from '@bigcommerce/form-poster';\r\n\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    NotInitializedError,\r\n    NotInitializedErrorType,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { CheckoutButtonMethodType } from '../';\r\nimport { Cart, CartRequestSender } from '../../../cart';\r\nimport { BuyNowCartCreationError } from '../../../cart/errors';\r\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\r\nimport { SDK_VERSION_HEADERS } from '../../../common/http-request';\r\nimport { bindDecorator as bind } from '../../../common/utility';\r\nimport {\r\n    CallbackIntentsType,\r\n    CallbackTriggerType,\r\n    EnvironmentType,\r\n    GooglePayPaymentOptions,\r\n    GooglePayPaymentProcessor,\r\n    IntermediatePaymentData,\r\n    NewTransactionInfo,\r\n    TotalPriceStatusType,\r\n} from '../../../payment/strategies/googlepay';\r\nimport { GooglePayBuyNowInitializeOptions } from './googlepay-button-types';\r\nimport { getShippableItemsCount } from '../../../shipping';\r\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\r\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\r\n\r\nimport { GooglePayButtonInitializeOptions } from './googlepay-button-options';\r\n\r\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\r\n    private _methodId?: string;\r\n    private _walletButton?: HTMLElement;\r\n    private _buyNowCart?: Cart;\r\n    private _isBuyNowFlow?: boolean;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _formPoster: FormPoster,\r\n        private _checkoutActionCreator: CheckoutActionCreator,\r\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\r\n        private _cartRequestSender: CartRequestSender,\r\n    ) {}\r\n\r\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\r\n        const { containerId, methodId, currencyCode } = options;\r\n\r\n        const googlePayOptions = this._getGooglePayOptions(options);\r\n        const { buyNowInitializeOptions } = googlePayOptions;\r\n\r\n        if (!containerId || !methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to proceed because \"containerId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        const state = this._store.getState();\r\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\r\n        const { testMode } = paymentMethod?.config || {};\r\n\r\n        this._methodId = methodId;\r\n\r\n        this._isBuyNowFlow = !!buyNowInitializeOptions;\r\n\r\n        if (this._isBuyNowFlow) {\r\n            if (!currencyCode) {\r\n                throw new InvalidArgumentError(\r\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\r\n                );\r\n            }\r\n\r\n            const { buyNowInitializeOptions } = googlePayOptions;\r\n            this._googlePayPaymentProcessor.updateBuyNowFlowFlag(this._isBuyNowFlow);\r\n\r\n            await this._googlePayPaymentProcessor.initialize(\r\n                this._getMethodId(),\r\n                this._getGooglePayClientOptions(currencyCode, testMode, buyNowInitializeOptions),\r\n            );\r\n        } else {\r\n            await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\r\n            await this._googlePayPaymentProcessor.initialize(this._getMethodId());\r\n        }\r\n\r\n        this._walletButton = this._createSignInButton(containerId, googlePayOptions, currencyCode);\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        if (this._walletButton && this._walletButton.parentNode) {\r\n            this._walletButton.parentNode.removeChild(this._walletButton);\r\n            this._walletButton = undefined;\r\n        }\r\n\r\n        return this._googlePayPaymentProcessor.deinitialize();\r\n    }\r\n\r\n    private _getGooglePayClientOptions(\r\n        currencyCode: string,\r\n        testMode?: boolean,\r\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\r\n    ): GooglePayPaymentOptions {\r\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\r\n\r\n        return {\r\n            environment,\r\n            paymentDataCallbacks: {\r\n                onPaymentDataChanged: async ({\r\n                    callbackTrigger,\r\n                }: IntermediatePaymentData): Promise<NewTransactionInfo | void> => {\r\n                    if (callbackTrigger !== CallbackTriggerType.INITIALIZE) {\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        this._buyNowCart = await this._createBuyNowCart(buyNowInitializeOptions);\r\n\r\n                        if (this._buyNowCart) {\r\n                            const { id, cartAmount } = this._buyNowCart;\r\n\r\n                            await this._store.dispatch(\r\n                                this._checkoutActionCreator.loadCheckout(id),\r\n                            );\r\n\r\n                            return {\r\n                                newTransactionInfo: {\r\n                                    currencyCode,\r\n                                    totalPrice: String(cartAmount),\r\n                                    totalPriceStatus: TotalPriceStatusType.FINAL,\r\n                                },\r\n                            };\r\n                        }\r\n                    } catch (error) {\r\n                        throw new BuyNowCartCreationError(error);\r\n                    }\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    private _createSignInButton(\r\n        containerId: string,\r\n        buttonOptions: GooglePayButtonInitializeOptions,\r\n        currencyCode?: string,\r\n    ): HTMLElement {\r\n        const container = document.getElementById(containerId);\r\n        const { buttonType, buttonColor } = buttonOptions;\r\n\r\n        if (!container) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to create sign-in button without valid container ID.',\r\n            );\r\n        }\r\n\r\n        const onClick = (event: Event) => this._handleWalletButtonClick(event, currencyCode);\r\n\r\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(\r\n            onClick,\r\n            buttonType,\r\n            buttonColor,\r\n        );\r\n\r\n        container.appendChild(googlePayButton);\r\n\r\n        return googlePayButton;\r\n    }\r\n\r\n    private _getMethodId(): string {\r\n        if (!this._methodId) {\r\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\r\n        }\r\n\r\n        return this._methodId;\r\n    }\r\n\r\n    private _getGooglePayOptions(\r\n        options: CheckoutButtonInitializeOptions,\r\n    ): GooglePayButtonInitializeOptions {\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV2 &&\r\n            options.googlepayadyenv2\r\n        ) {\r\n            return options.googlepayadyenv2;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ADYENV3 &&\r\n            options.googlepayadyenv3\r\n        ) {\r\n            return options.googlepayadyenv3;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET &&\r\n            options.googlepayauthorizenet\r\n        ) {\r\n            return options.googlepayauthorizenet;\r\n        }\r\n\r\n        if (options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BNZ && options.googlepaybnz) {\r\n            return options.googlepaybnz;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE &&\r\n            options.googlepaybraintree\r\n        ) {\r\n            return options.googlepaybraintree;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM &&\r\n            options.googlepaycheckoutcom\r\n        ) {\r\n            return options.googlepaycheckoutcom;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2 &&\r\n            options.googlepaycybersourcev2\r\n        ) {\r\n            return options.googlepaycybersourcev2;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_ORBITAL &&\r\n            options.googlepayorbital\r\n        ) {\r\n            return options.googlepayorbital;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPE &&\r\n            options.googlepaystripe\r\n        ) {\r\n            return options.googlepaystripe;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE &&\r\n            options.googlepaystripeupe\r\n        ) {\r\n            return options.googlepaystripeupe;\r\n        }\r\n\r\n        if (\r\n            options.methodId === CheckoutButtonMethodType.GOOGLEPAY_WORLDPAYACCESS &&\r\n            options.googlepayworldpayaccess\r\n        ) {\r\n            return options.googlepayworldpayaccess;\r\n        }\r\n\r\n        throw new InvalidArgumentError();\r\n    }\r\n\r\n    private async _createBuyNowCart(\r\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\r\n    ): Promise<Cart | undefined> {\r\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\r\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\r\n\r\n            if (!cartRequestBody) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n            }\r\n\r\n            try {\r\n                const { body: cart } = await this._cartRequestSender.createBuyNowCart(\r\n                    cartRequestBody,\r\n                );\r\n\r\n                return cart;\r\n            } catch (error) {\r\n                throw new BuyNowCartCreationError();\r\n            }\r\n        }\r\n    }\r\n\r\n    @bind\r\n    private async _handleWalletButtonClick(event: Event, currencyCode?: string): Promise<void> {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            if (this._isBuyNowFlow && currencyCode) {\r\n                this._googlePayPaymentProcessor.updatePaymentDataRequest({\r\n                    transactionInfo: {\r\n                        currencyCode,\r\n                        totalPrice: '0',\r\n                        totalPriceStatus: TotalPriceStatusType.ESTIMATED,\r\n                    },\r\n                    callbackIntents: [CallbackIntentsType.OFFER],\r\n                });\r\n            }\r\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\r\n\r\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\r\n\r\n            const cart = this._store.getState().cart.getCartOrThrow();\r\n            const hasPhysicalItems = getShippableItemsCount(cart) > 0;\r\n\r\n            if (hasPhysicalItems && paymentData.shippingAddress) {\r\n                await this._googlePayPaymentProcessor.updateShippingAddress(\r\n                    paymentData.shippingAddress,\r\n                );\r\n            }\r\n\r\n            await this._onPaymentSelectComplete();\r\n        } catch (error) {\r\n            if (error && error.message !== 'CANCELED') {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onPaymentSelectComplete(): void {\r\n        const buyNowCartId = this._buyNowCart?.id;\r\n\r\n        this._formPoster.postForm('/checkout.php', {\r\n            headers: {\r\n                Accept: 'text/html',\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n                ...SDK_VERSION_HEADERS,\r\n            },\r\n            ...(buyNowCartId && {\r\n                action: 'set_external_checkout',\r\n                provider: this._methodId,\r\n                cart_id: buyNowCartId,\r\n            }),\r\n        });\r\n    }\r\n}\r\n","export const supportedLocales: { [language: string]: string[] } = {\r\n    es: ['es_es', 'es_mx', 'es_pe', 'es_co', 'es_ar', 'es_cl'],\r\n    en: [\r\n        'en_us',\r\n        'en_gb',\r\n        'en_ca',\r\n        'en_es',\r\n        'en_fr',\r\n        'en_ie',\r\n        'en_sg',\r\n        'en_au',\r\n        'en_nz',\r\n        'en_my',\r\n        'en_hk',\r\n        'en_th',\r\n        'en_ae',\r\n        'en_sa',\r\n        'en_qa',\r\n        'en_kw',\r\n        'en_za',\r\n    ],\r\n    pt: ['pt_br'],\r\n    zu: ['zu_za'],\r\n    ar: ['ar_sa', 'ar_ae', 'ar_qa', 'ar_kw'],\r\n    zh: ['zh_sg', 'zh_hk'],\r\n    ms: ['ms_my'],\r\n    uk: ['uk_ua'],\r\n    sv: ['sv_se'],\r\n    hr: ['hr_hr'],\r\n    pl: ['pl_pl'],\r\n    nl: ['nl_be'],\r\n    it: ['it_it'],\r\n    de: ['de_de'],\r\n    fr: ['fr_fr', 'fr_ca'],\r\n};\r\n","import { supportedLocales } from './masterpass-supported-locales';\r\n\r\nexport default function formatLocale(localeLanguage: string): string {\r\n    const [language, country] = localeLanguage.replace('-', '_').toLowerCase().split('_');\r\n    const formattedLocale = `${language}_${country}`;\r\n    const countryLocales = supportedLocales[language];\r\n\r\n    if (!countryLocales) {\r\n        return 'en_us';\r\n    }\r\n\r\n    return countryLocales.indexOf(formattedLocale) > -1 ? formattedLocale : countryLocales[0];\r\n}\r\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    NotInitializedError,\r\n    NotInitializedErrorType,\r\n} from '../../../common/error/errors';\r\nimport { bindDecorator as bind } from '../../../common/utility';\r\nimport {\r\n    formatLocale,\r\n    getCallbackUrl,\r\n    Masterpass,\r\n    MasterpassCheckoutOptions,\r\n    MasterpassScriptLoader,\r\n} from '../../../payment/strategies/masterpass';\r\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\r\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\r\n\r\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\r\n    private _masterpassClient?: Masterpass;\r\n    private _methodId?: string;\r\n    private _signInButton?: HTMLElement;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _checkoutActionCreator: CheckoutActionCreator,\r\n        private _masterpassScriptLoader: MasterpassScriptLoader,\r\n        private _locale: string,\r\n    ) {}\r\n\r\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\r\n        const { containerId, methodId } = options;\r\n\r\n        if (!containerId || !methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to proceed because \"containerId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        this._methodId = methodId;\r\n\r\n        return this._store\r\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\r\n            .then((state) => {\r\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\r\n\r\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n                }\r\n\r\n                const masterpassScriptLoaderParams = {\r\n                    useMasterpassSrc: paymentMethod.initializationData.isMasterpassSrcEnabled,\r\n                    language: formatLocale(this._locale),\r\n                    testMode: paymentMethod.config.testMode,\r\n                    checkoutId: paymentMethod.initializationData.checkoutId,\r\n                };\r\n\r\n                return this._masterpassScriptLoader.load(masterpassScriptLoaderParams);\r\n            })\r\n            .then((masterpass) => {\r\n                this._masterpassClient = masterpass;\r\n                this._signInButton = this._createSignInButton(containerId);\r\n            });\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        if (this._signInButton && this._signInButton.parentNode) {\r\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\r\n            this._signInButton.parentNode.removeChild(this._signInButton);\r\n            this._signInButton = undefined;\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _createSignInButton(containerId: string): HTMLElement {\r\n        const buttonContainer = document.getElementById(containerId);\r\n        const state = this._store.getState();\r\n        const paymentMethod = this._methodId\r\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\r\n            : null;\r\n        const storeConfig = state.config.getStoreConfig();\r\n\r\n        if (!buttonContainer) {\r\n            throw new Error('Need a container to place the button');\r\n        }\r\n\r\n        if (!paymentMethod) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        if (!storeConfig) {\r\n            throw new InvalidArgumentError('Unable to retrieve store configuration');\r\n        }\r\n\r\n        const button = document.createElement('input');\r\n\r\n        button.type = 'image';\r\n\r\n        if (paymentMethod.initializationData.isMasterpassSrcEnabled) {\r\n            const subdomain = paymentMethod.config.testMode ? 'sandbox.' : '';\r\n            const { checkoutId } = paymentMethod.initializationData;\r\n\r\n            const params = [\r\n                `locale=${formatLocale(this._locale)}`,\r\n                `paymentmethod=master,visa,amex,discover`,\r\n                `checkoutid=${checkoutId}`,\r\n            ];\r\n\r\n            button.src = [\r\n                `https://${subdomain}src.mastercard.com/assets/img/btn/src_chk_btn_126x030px.svg`,\r\n                params.join('&'),\r\n            ].join('?');\r\n        } else {\r\n            button.src =\r\n                'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\r\n        }\r\n\r\n        buttonContainer.appendChild(button);\r\n\r\n        button.addEventListener('click', this._handleWalletButtonClick);\r\n\r\n        return button;\r\n    }\r\n\r\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\r\n        const state = this._store.getState();\r\n        const checkout = state.checkout.getCheckout();\r\n        const paymentMethod = this._methodId\r\n            ? state.paymentMethods.getPaymentMethod(this._methodId)\r\n            : null;\r\n\r\n        if (!checkout) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\r\n        }\r\n\r\n        if (!paymentMethod) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        return {\r\n            checkoutId: paymentMethod.initializationData.checkoutId,\r\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\r\n            amount: checkout.cart.cartAmount.toString(),\r\n            currency: checkout.cart.currency.code,\r\n            cartId: checkout.cart.id,\r\n            callbackUrl: getCallbackUrl('cart'),\r\n        };\r\n    }\r\n\r\n    @bind\r\n    private _handleWalletButtonClick(): void {\r\n        if (!this._masterpassClient) {\r\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\r\n        }\r\n\r\n        this._masterpassClient.checkout(this._createMasterpassPayload());\r\n    }\r\n}\r\n","export default function getCallbackUrl(origin: string): string {\r\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\r\n}\r\n","import { FormPoster } from '@bigcommerce/form-poster';\r\nimport { pick } from 'lodash';\r\n\r\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\r\nimport {\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    NotInitializedError,\r\n    NotInitializedErrorType,\r\n    StandardError,\r\n} from '../../../common/error/errors';\r\nimport { INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../../../common/http-request';\r\nimport { PaymentMethod } from '../../../payment';\r\nimport {\r\n    PaypalActions,\r\n    PaypalAuthorizeData,\r\n    PaypalButtonStyleShapeOption,\r\n    PaypalButtonStyleSizeOption,\r\n    PaypalClientToken,\r\n    PaypalScriptLoader,\r\n} from '../../../payment/strategies/paypal';\r\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\r\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\r\n\r\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\r\n    private _paymentMethod?: PaymentMethod;\r\n\r\n    constructor(\r\n        private _store: CheckoutStore,\r\n        private _checkoutActionCreator: CheckoutActionCreator,\r\n        private _paypalScriptLoader: PaypalScriptLoader,\r\n        private _formPoster: FormPoster,\r\n        private _host: string = '',\r\n    ) {}\r\n\r\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\r\n        const paypalOptions = options.paypal;\r\n        const state = this._store.getState();\r\n        const paymentMethod = (this._paymentMethod = state.paymentMethods.getPaymentMethod(\r\n            options.methodId,\r\n        ));\r\n\r\n        if (!paypalOptions) {\r\n            throw new InvalidArgumentError();\r\n        }\r\n\r\n        if (!paymentMethod) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        return this._paypalScriptLoader\r\n            .loadPaypal(paymentMethod.config.merchantId)\r\n            .then((paypal) => {\r\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\r\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n                }\r\n\r\n                const merchantId = paymentMethod.config.merchantId;\r\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\r\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\r\n\r\n                const fundingCreditOption = paypal.FUNDING.CREDIT || 'credit';\r\n                const allowedSources = paypalOptions.allowCredit ? [fundingCreditOption] : [];\r\n                const disallowedSources = !paypalOptions.allowCredit ? [fundingCreditOption] : [];\r\n\r\n                return paypal.Button.render(\r\n                    {\r\n                        env,\r\n                        client: clientToken,\r\n                        commit: paypalOptions.shouldProcessPayment,\r\n                        funding: {\r\n                            allowed: allowedSources,\r\n                            disallowed: disallowedSources,\r\n                        },\r\n                        style: {\r\n                            shape: PaypalButtonStyleShapeOption.RECT,\r\n                            ...pick(\r\n                                paypalOptions.style,\r\n                                'layout',\r\n                                'color',\r\n                                'label',\r\n                                'shape',\r\n                                'tagline',\r\n                                'fundingicons',\r\n                            ),\r\n                            size:\r\n                                paymentMethod.id === 'paypalexpress' &&\r\n                                paypalOptions.style?.size === 'small'\r\n                                    ? PaypalButtonStyleSizeOption.RESPONSIVE\r\n                                    : paypalOptions.style?.size,\r\n                        },\r\n                        payment: (_, actions) =>\r\n                            this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\r\n                        onAuthorize: (data, actions) =>\r\n                            this._tokenizePayment(\r\n                                data,\r\n                                actions,\r\n                                paypalOptions.shouldProcessPayment,\r\n                                paypalOptions.onAuthorizeError,\r\n                            ),\r\n                    },\r\n                    options.containerId,\r\n                );\r\n            });\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        this._paymentMethod = undefined;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _setupPayment(\r\n        merchantId: string,\r\n        actions?: PaypalActions,\r\n        onError?: (error: StandardError) => void,\r\n    ): Promise<string> {\r\n        if (!actions) {\r\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\r\n        }\r\n\r\n        return this._store\r\n            .dispatch(this._checkoutActionCreator.loadDefaultCheckout())\r\n            .then((state) => {\r\n                const cart = state.cart.getCart();\r\n                const cartId = cart ? cart.id : '';\r\n\r\n                return actions.request.post(\r\n                    `${this._host}/api/storefront/payment/paypalexpress`,\r\n                    { merchantId, cartId },\r\n                    {\r\n                        headers: {\r\n                            'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n                            ...SDK_VERSION_HEADERS,\r\n                        },\r\n                    },\r\n                );\r\n            })\r\n            .then((res) => res.id)\r\n            .catch((error) => {\r\n                if (onError) {\r\n                    onError(error);\r\n                }\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    private _tokenizePayment(\r\n        data: PaypalAuthorizeData,\r\n        actions?: PaypalActions,\r\n        shouldProcessPayment?: boolean,\r\n        _onError?: (error: StandardError) => void, // FIXME: This parameter seems to be unused\r\n    ): Promise<void> {\r\n        if (!this._paymentMethod) {\r\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\r\n        }\r\n\r\n        if (!actions) {\r\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\r\n        }\r\n\r\n        if (!data.paymentID || !data.payerID) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\r\n        }\r\n\r\n        const methodId = this._paymentMethod.id;\r\n\r\n        return actions.payment.get(data.paymentID).then((payload) => {\r\n            this._formPoster.postForm('/checkout.php', {\r\n                payment_type: 'paypal',\r\n                provider: methodId,\r\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\r\n                paymentId: data.paymentID,\r\n                payerId: data.payerID,\r\n                payerInfo: JSON.stringify(payload.payer.payer_info),\r\n            });\r\n        });\r\n    }\r\n}\r\n","export default function getEnvironment(): string {\r\n    try {\r\n        return process.env.NODE_ENV || 'development';\r\n    } catch (e) {\r\n        return 'development';\r\n    }\r\n}\r\n","import Logger from './logger';\r\n\r\nexport default class ConsoleLogger implements Logger {\r\n    constructor(private _console?: Console) {}\r\n\r\n    log(...messages: any[]): void {\r\n        this._logToConsole('log', ...messages);\r\n    }\r\n\r\n    info(...messages: any[]): void {\r\n        this._logToConsole('info', ...messages);\r\n    }\r\n\r\n    warn(...messages: any[]): void {\r\n        this._logToConsole('warn', ...messages);\r\n    }\r\n\r\n    error(...messages: any[]): void {\r\n        this._logToConsole('error', ...messages);\r\n    }\r\n\r\n    debug(...messages: any[]): void {\r\n        this._logToConsole('debug', ...messages);\r\n    }\r\n\r\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\r\n        if (!this._console || !this._console[type]) {\r\n            return;\r\n        }\r\n\r\n        this._console[type].call(this._console, ...messages);\r\n    }\r\n}\r\n","import Logger from './logger';\r\n\r\nexport default class NoopLogger implements Logger {\r\n    log(): void {}\r\n\r\n    info(): void {}\r\n\r\n    warn(): void {}\r\n\r\n    error(): void {}\r\n\r\n    debug(): void {}\r\n}\r\n","import { getEnvironment } from '../utility';\r\n\r\nimport createLogger from './create-logger';\r\nimport Logger from './logger';\r\n\r\nconst logger = createLogger(getEnvironment() !== 'test');\r\n\r\nexport default function getDefaultLogger(): Logger {\r\n    return logger;\r\n}\r\n","import ConsoleLogger from './console-logger';\r\nimport Logger from './logger';\r\nimport NoopLogger from './noop-logger';\r\n\r\nexport default function createLogger(isEnabled = true): Logger {\r\n    if (!isEnabled) {\r\n        return new NoopLogger();\r\n    }\r\n\r\n    return new ConsoleLogger(console);\r\n}\r\n","import { getDefaultLogger } from '../log';\r\nimport { getEnvironment } from '../utility';\r\n\r\nimport Factory from './factory';\r\nimport Registry from './registry';\r\n\r\nexport default class ResolveIdRegistry<TType, TToken extends { [key: string]: unknown }> {\r\n    private _registry: Registry<TType>;\r\n\r\n    constructor(private _useFallback = false) {\r\n        this._registry = new Registry({\r\n            tokenResolver: this._resolveToken.bind(this),\r\n            useFallback: this._useFallback,\r\n        });\r\n    }\r\n\r\n    get(resolveId: TToken): TType {\r\n        return this._registry.get(this._encodeToken(resolveId));\r\n    }\r\n\r\n    register(resolveId: TToken, factory: Factory<TType>): void {\r\n        this._registry.register(this._encodeToken(resolveId), factory);\r\n    }\r\n\r\n    private _encodeToken(resolveId: TToken): string {\r\n        return btoa(JSON.stringify(resolveId));\r\n    }\r\n\r\n    private _decodeToken(token: string): TToken {\r\n        return JSON.parse(atob(token));\r\n    }\r\n\r\n    private _resolveToken(token: string, registeredTokens: string[]): string | undefined {\r\n        const query = this._decodeToken(token);\r\n\r\n        const results: Array<{ token: string; matches: number; default: boolean }> = [];\r\n\r\n        registeredTokens.forEach((registeredToken) => {\r\n            const resolverId = this._decodeToken(registeredToken);\r\n\r\n            const result = { token: registeredToken, matches: 0, default: false };\r\n\r\n            for (const [key, value] of Object.entries(resolverId)) {\r\n                if (key in query && query[key] !== value) {\r\n                    result.matches = 0;\r\n                    break;\r\n                }\r\n\r\n                if (key in query && query[key] === value) {\r\n                    result.matches++;\r\n                }\r\n\r\n                if (key === 'default' && value === true) {\r\n                    result.default = true;\r\n                }\r\n            }\r\n\r\n            results.push(result);\r\n        });\r\n\r\n        const matchedResults = results\r\n            .sort((a, b) => b.matches - a.matches)\r\n            .filter((result) => result.matches > 0);\r\n\r\n        if (matchedResults.length > 1 && matchedResults[0].matches === matchedResults[1].matches) {\r\n            if (getEnvironment() === 'development') {\r\n                getDefaultLogger().warn(\r\n                    'The provided query matches at least two strategies with the same specificity. This warning can be resolved by making their resolve ID more specific.',\r\n                );\r\n            }\r\n        }\r\n\r\n        const matched = matchedResults[0];\r\n\r\n        if (matched && matched.token) {\r\n            return matched.token;\r\n        }\r\n\r\n        if (this._useFallback) {\r\n            const defaultToken = results.find((result) => result.default)?.token;\r\n\r\n            if (defaultToken) {\r\n                return defaultToken;\r\n            }\r\n        }\r\n\r\n        throw new Error('Unable to resolve to a registered token with the provided token.');\r\n    }\r\n}\r\n","import ResolvableModule from './resolvable-module';\r\n\r\nexport default function toResolvableModule<TModule, TIdentifier>(\r\n    module: TModule,\r\n    resolveIds: TIdentifier[],\r\n): ResolvableModule<TModule, TIdentifier> {\r\n    return Object.assign(module, { resolveIds });\r\n}\r\n","import StandardError from './standard-error';\r\n\r\n/**\r\n * This error should be thrown when the payment flow is cancelled. It could be\r\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\r\n * button which dismisses the payment modal.\r\n */\r\nexport default class PaymentMethodCancelledError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(message || 'Payment process was cancelled.');\r\n\r\n        this.name = 'PaymentMethodCancelledError';\r\n        this.type = 'payment_cancelled';\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\n/**\r\n * This error should be thrown when a shopper tries to sign in as a guest but\r\n * they are already signed in as a registered customer.\r\n */\r\nexport default class BuyNowCartCreationError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\r\n        );\r\n\r\n        this.name = 'BuyNowCartCreationError';\r\n        this.type = 'buy_now_cart_creation_error';\r\n    }\r\n}\r\n","interface ApplePayWindow extends Window {\r\n    ApplePaySession: ApplePaySession;\r\n}\r\n\r\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\r\n    return 'ApplePaySession' in window;\r\n}\r\n\r\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\r\n    if (!isApplePayWindow(window)) {\r\n        throw new Error('Apple pay is not supported');\r\n    }\r\n}\r\n\r\nexport default class ApplePaySessionFactory {\r\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\r\n        assertApplePayWindow(window);\r\n\r\n        return new ApplePaySession(1, request);\r\n    }\r\n}\r\n","import { RequestSender } from '@bigcommerce/request-sender';\r\nimport { noop } from 'lodash';\r\n\r\nimport {\r\n    AddressRequestBody,\r\n    BuyNowCartCreationError,\r\n    Cart,\r\n    Checkout,\r\n    CheckoutButtonInitializeOptions,\r\n    CheckoutButtonStrategy,\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    Payment,\r\n    PaymentIntegrationService,\r\n    PaymentMethod,\r\n    PaymentMethodCancelledError,\r\n    ShippingOption,\r\n    StoreConfig,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport ApplePayButtonInitializeOptions, {\r\n    WithApplePayButtonInitializeOptions,\r\n} from './apple-pay-button-initialize-options';\r\nimport ApplePaySessionFactory, { assertApplePayWindow } from './apple-pay-session-factory';\r\n\r\nconst validationEndpoint = (bigPayEndpoint: string) =>\r\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\r\n\r\nenum DefaultLabels {\r\n    Subtotal = 'Subtotal',\r\n    Shipping = 'Shipping',\r\n}\r\n\r\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\r\n    return options instanceof Array;\r\n}\r\n\r\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\r\n    private _paymentMethod?: PaymentMethod;\r\n    private _applePayButton?: HTMLElement;\r\n    private _requiresShipping?: boolean;\r\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\r\n    private _onAuthorizeCallback = noop;\r\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\r\n    private _shippingLabel: string = DefaultLabels.Shipping;\r\n\r\n    constructor(\r\n        private _requestSender: RequestSender,\r\n        private _paymentIntegrationService: PaymentIntegrationService,\r\n        private _sessionFactory: ApplePaySessionFactory,\r\n    ) {}\r\n\r\n    async initialize(\r\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\r\n    ): Promise<void> {\r\n        const { methodId, containerId, applepay } = options;\r\n\r\n        assertApplePayWindow(window);\r\n\r\n        if (!methodId || !applepay) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const { buttonClassName, onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } =\r\n            applepay;\r\n\r\n        this._requiresShipping = requiresShipping;\r\n\r\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\r\n\r\n        this._onAuthorizeCallback = onPaymentAuthorize;\r\n\r\n        if (!buyNowInitializeOptions) {\r\n            await this._paymentIntegrationService.loadDefaultCheckout();\r\n        }\r\n\r\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\r\n\r\n        const state = this._paymentIntegrationService.getState();\r\n\r\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\r\n\r\n        await this._paymentIntegrationService.verifyCheckoutSpamProtection();\r\n\r\n        this._applePayButton = this._createButton(containerId, buttonClassName);\r\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _createButton(\r\n        containerId: string,\r\n        buttonClassName = 'apple-pay-checkout-button',\r\n    ): HTMLElement {\r\n        const container = document.getElementById(containerId);\r\n\r\n        if (!container) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to create wallet button without valid container ID.',\r\n            );\r\n        }\r\n\r\n        document.body.classList.add('apple-pay-supported');\r\n\r\n        const button = document.createElement('div');\r\n\r\n        button.setAttribute('class', buttonClassName);\r\n        button.setAttribute('role', 'button');\r\n        button.setAttribute('aria-label', 'Apple Pay button');\r\n        container.appendChild(button);\r\n\r\n        return button;\r\n    }\r\n\r\n    private async _handleWalletButtonClick(event: Event) {\r\n        event.preventDefault();\r\n\r\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        if (\r\n            this._buyNowInitializeOptions &&\r\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\r\n        ) {\r\n            const {\r\n                countryCode,\r\n                currencyCode,\r\n                merchantCapabilities,\r\n                supportedNetworks,\r\n                storeName,\r\n            } = this._paymentMethod.initializationData;\r\n\r\n            const request = this._getRequestWithEmptyTotal(\r\n                countryCode,\r\n                currencyCode,\r\n                supportedNetworks,\r\n                merchantCapabilities,\r\n            );\r\n\r\n            if (this._requiresShipping) {\r\n                request.requiredShippingContactFields?.push('postalAddress');\r\n            }\r\n\r\n            const applePaySession = this._sessionFactory.create(request);\r\n\r\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\r\n\r\n            applePaySession.begin();\r\n        } else {\r\n            const state = this._paymentIntegrationService.getState();\r\n            const cart = state.getCartOrThrow();\r\n            const config = state.getStoreConfigOrThrow();\r\n            const checkout = state.getCheckoutOrThrow();\r\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\r\n            const applePaySession = this._sessionFactory.create(request);\r\n\r\n            this._handleApplePayEvents(\r\n                applePaySession,\r\n                this._paymentMethod,\r\n                config.storeProfile.storeName,\r\n            );\r\n\r\n            applePaySession.begin();\r\n        }\r\n    }\r\n\r\n    private _getRequestWithEmptyTotal(\r\n        countryCode: string,\r\n        currencyCode: string,\r\n        supportedNetworks: string[],\r\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\r\n    ): ApplePayJS.ApplePayPaymentRequest {\r\n        return {\r\n            countryCode,\r\n            currencyCode,\r\n            supportedNetworks,\r\n            merchantCapabilities,\r\n            total: { label: '', amount: '0', type: 'pending' },\r\n            requiredBillingContactFields: ['postalAddress'],\r\n            requiredShippingContactFields: ['email', 'phone'],\r\n        };\r\n    }\r\n\r\n    private _getBaseRequest(\r\n        cart: Cart,\r\n        checkout: Checkout,\r\n        config: StoreConfig,\r\n        paymentMethod: PaymentMethod,\r\n    ): ApplePayJS.ApplePayPaymentRequest {\r\n        const {\r\n            storeProfile: { storeCountryCode, storeName },\r\n        } = config;\r\n        const {\r\n            currency: { code, decimalPlaces },\r\n        } = cart;\r\n\r\n        const {\r\n            initializationData: { merchantCapabilities, supportedNetworks },\r\n        } = paymentMethod;\r\n\r\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\r\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\r\n            ? {\r\n                  label: storeName,\r\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\r\n                  type: 'pending',\r\n              }\r\n            : {\r\n                  label: storeName,\r\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\r\n                  type: 'final',\r\n              };\r\n\r\n        const request: ApplePayJS.ApplePayPaymentRequest = {\r\n            requiredBillingContactFields: ['postalAddress'],\r\n            requiredShippingContactFields: ['email', 'phone'],\r\n            countryCode: storeCountryCode,\r\n            currencyCode: code,\r\n            merchantCapabilities,\r\n            supportedNetworks,\r\n            lineItems: [],\r\n            total,\r\n        };\r\n\r\n        if (requiresShipping) {\r\n            request.requiredShippingContactFields?.push('postalAddress');\r\n        } else {\r\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\r\n                {\r\n                    label: this._subTotalLabel,\r\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\r\n                },\r\n            ];\r\n\r\n            checkout.taxes.forEach((tax) =>\r\n                lineItems.push({\r\n                    label: tax.name,\r\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\r\n                }),\r\n            );\r\n\r\n            request.lineItems = lineItems;\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    private _handleApplePayEvents(\r\n        applePaySession: ApplePaySession,\r\n        paymentMethod: PaymentMethod,\r\n        storeName: string,\r\n    ) {\r\n        applePaySession.onvalidatemerchant = async (event) => {\r\n            try {\r\n                const { body: merchantSession } = await this._onValidateMerchant(\r\n                    paymentMethod,\r\n                    event,\r\n                );\r\n\r\n                applePaySession.completeMerchantValidation(merchantSession);\r\n            } catch (error) {\r\n                throw new Error('Merchant validation failed');\r\n            }\r\n        };\r\n\r\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\r\n            applePaySession.onpaymentmethodselected = async () => {\r\n                await this._createBuyNowCart();\r\n                this._handlePaymentMethodSelected(applePaySession);\r\n            };\r\n        }\r\n\r\n        applePaySession.onshippingcontactselected = async (event) => {\r\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\r\n                await this._createBuyNowCart();\r\n            }\r\n\r\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\r\n        };\r\n\r\n        applePaySession.onshippingmethodselected = async (event) => {\r\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\r\n        };\r\n\r\n        applePaySession.oncancel = async () => {\r\n            try {\r\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\r\n\r\n                await this._requestSender.get(url);\r\n\r\n                return await this._paymentIntegrationService.loadCheckout();\r\n            } catch (error) {\r\n                throw new PaymentMethodCancelledError();\r\n            }\r\n        };\r\n\r\n        applePaySession.onpaymentauthorized = async (event) =>\r\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\r\n    }\r\n\r\n    private async _createBuyNowCart() {\r\n        try {\r\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\r\n\r\n            if (!cartRequestBody) {\r\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n            }\r\n\r\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\r\n                cartRequestBody,\r\n            );\r\n\r\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\r\n        } catch (error) {\r\n            throw new BuyNowCartCreationError();\r\n        }\r\n    }\r\n\r\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\r\n        const state = this._paymentIntegrationService.getState();\r\n        const cart = state.getCartOrThrow();\r\n        const config = state.getStoreConfigOrThrow();\r\n        const checkout = state.getCheckoutOrThrow();\r\n\r\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\r\n\r\n        delete request.total.type;\r\n\r\n        applePaySession.completePaymentMethodSelection({\r\n            newTotal: request.total,\r\n            newLineItems: request.lineItems,\r\n        });\r\n    }\r\n\r\n    private async _handleShippingContactSelected(\r\n        applePaySession: ApplePaySession,\r\n        storeName: string,\r\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\r\n    ) {\r\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\r\n\r\n        try {\r\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\r\n        } catch (error) {\r\n            applePaySession.abort();\r\n\r\n            throw new Error('Shipping address update failed');\r\n        }\r\n\r\n        let state = this._paymentIntegrationService.getState();\r\n        const {\r\n            currency: { decimalPlaces },\r\n        } = state.getCartOrThrow();\r\n        let checkout = state.getCheckoutOrThrow();\r\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\r\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\r\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\r\n        const unselectedOptions = availableOptions?.filter(\r\n            (option) => option.id !== selectionShippingOptionId,\r\n        );\r\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\r\n            ? [\r\n                  {\r\n                      label: selectedOption.description,\r\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\r\n                      detail: selectedOption.additionalDescription,\r\n                      identifier: selectedOption.id,\r\n                  },\r\n              ]\r\n            : [];\r\n\r\n        if (unselectedOptions) {\r\n            [\r\n                ...unselectedOptions.filter((option) => option.isRecommended),\r\n                ...unselectedOptions.filter((option) => !option.isRecommended),\r\n            ].forEach((option) =>\r\n                shippingOptions.push({\r\n                    label: option.description,\r\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\r\n                    detail: option.additionalDescription,\r\n                    identifier: option.id,\r\n                }),\r\n            );\r\n        }\r\n\r\n        if (!isShippingOptions(availableOptions)) {\r\n            throw new Error('Shipping options not available.');\r\n        }\r\n\r\n        if (availableOptions.length === 0) {\r\n            applePaySession.completeShippingContactSelection(\r\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\r\n                [],\r\n                {\r\n                    type: 'pending',\r\n                    label: storeName,\r\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\r\n                },\r\n                [],\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\r\n\r\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\r\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\r\n\r\n        try {\r\n            await this._updateShippingOption(selectedOptionId);\r\n        } catch (error) {\r\n            throw new Error('Shipping options update failed');\r\n        }\r\n\r\n        state = this._paymentIntegrationService.getState();\r\n        checkout = state.getCheckoutOrThrow();\r\n\r\n        applePaySession.completeShippingContactSelection({\r\n            newShippingMethods: shippingOptions,\r\n            newTotal: {\r\n                type: 'final',\r\n                label: storeName,\r\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\r\n            },\r\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\r\n        });\r\n    }\r\n\r\n    private async _handleShippingMethodSelected(\r\n        applePaySession: ApplePaySession,\r\n        storeName: string,\r\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\r\n    ) {\r\n        const {\r\n            shippingMethod: { identifier: optionId },\r\n        } = event;\r\n\r\n        try {\r\n            await this._updateShippingOption(optionId);\r\n        } catch (error) {\r\n            applePaySession.abort();\r\n\r\n            throw new Error('Shipping option selection update failed.');\r\n        }\r\n\r\n        const state = this._paymentIntegrationService.getState();\r\n        const {\r\n            currency: { decimalPlaces },\r\n        } = state.getCartOrThrow();\r\n        const checkout = state.getCheckoutOrThrow();\r\n\r\n        applePaySession.completeShippingMethodSelection({\r\n            newTotal: {\r\n                type: 'final',\r\n                label: storeName,\r\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\r\n            },\r\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\r\n        });\r\n    }\r\n\r\n    private _getUpdatedLineItems(\r\n        checkout: Checkout,\r\n        decimalPlaces: number,\r\n    ): ApplePayJS.ApplePayLineItem[] {\r\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\r\n            {\r\n                label: this._subTotalLabel,\r\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\r\n            },\r\n        ];\r\n\r\n        checkout.taxes.forEach((tax) =>\r\n            lineItems.push({\r\n                label: tax.name,\r\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\r\n            }),\r\n        );\r\n        lineItems.push({\r\n            label: this._shippingLabel,\r\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\r\n        });\r\n\r\n        return lineItems;\r\n    }\r\n\r\n    private async _updateShippingOption(optionId: string) {\r\n        return this._paymentIntegrationService.selectShippingOption(optionId);\r\n    }\r\n\r\n    private async _onValidateMerchant(\r\n        paymentData: PaymentMethod,\r\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\r\n    ) {\r\n        const body = [\r\n            `validationUrl=${event.validationURL}`,\r\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\r\n            `displayName=${paymentData.initializationData.storeName}`,\r\n            `domainName=${window.location.hostname}`,\r\n        ].join('&');\r\n\r\n        return this._requestSender.post(\r\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\r\n            {\r\n                credentials: false,\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                    'X-XSRF-TOKEN': null,\r\n                },\r\n                body,\r\n            },\r\n        );\r\n    }\r\n\r\n    private async _onPaymentAuthorized(\r\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\r\n        applePaySession: ApplePaySession,\r\n        paymentMethod: PaymentMethod,\r\n    ) {\r\n        const { token, billingContact, shippingContact } = event.payment;\r\n        const state = this._paymentIntegrationService.getState();\r\n        const cart = state.getCartOrThrow();\r\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\r\n\r\n        const payment: Payment = {\r\n            methodId: paymentMethod.id,\r\n            paymentData: {\r\n                formattedPayload: {\r\n                    apple_pay_token: {\r\n                        payment_data: token.paymentData,\r\n                        payment_method: token.paymentMethod,\r\n                        transaction_id: token.transactionIdentifier,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\r\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\r\n        const emailAddress = shippingContact?.emailAddress;\r\n        const phone = shippingContact?.phoneNumber || '';\r\n\r\n        try {\r\n            await this._paymentIntegrationService.updateBillingAddress({\r\n                ...transformedBillingAddress,\r\n                email: emailAddress,\r\n                phone,\r\n            });\r\n\r\n            if (requiresShipping) {\r\n                await this._paymentIntegrationService.updateShippingAddress(\r\n                    transformedShippingAddress,\r\n                );\r\n            }\r\n\r\n            await this._paymentIntegrationService.submitOrder({\r\n                useStoreCredit: false,\r\n            });\r\n\r\n            await this._paymentIntegrationService.submitPayment(payment);\r\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\r\n\r\n            return this._onAuthorizeCallback();\r\n        } catch (error) {\r\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\r\n\r\n            throw new Error('Payment cannot complete');\r\n        }\r\n    }\r\n\r\n    private _transformContactToAddress(\r\n        contact?: ApplePayJS.ApplePayPaymentContact,\r\n    ): AddressRequestBody {\r\n        return {\r\n            firstName: contact?.givenName || '',\r\n            lastName: contact?.familyName || '',\r\n            city: contact?.locality || '',\r\n            company: '',\r\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\r\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\r\n            postalCode: contact?.postalCode || '',\r\n            countryCode: contact?.countryCode || '',\r\n            phone: contact?.phoneNumber || '',\r\n            stateOrProvince: contact?.administrativeArea || '',\r\n            stateOrProvinceCode: contact?.administrativeArea || '',\r\n            customFields: [],\r\n        };\r\n    }\r\n}\r\n","import { createRequestSender } from '@bigcommerce/request-sender';\r\n\r\nimport {\r\n    CheckoutButtonStrategyFactory,\r\n    toResolvableModule,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\r\nimport ApplePaySessionFactory from './apple-pay-session-factory';\r\n\r\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\r\n    paymentIntegrationService,\r\n) => {\r\n    const { getHost } = paymentIntegrationService.getState();\r\n\r\n    return new ApplePayButtonStrategy(\r\n        createRequestSender({ host: getHost() }),\r\n        paymentIntegrationService,\r\n        new ApplePaySessionFactory(),\r\n    );\r\n};\r\n\r\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"query-string\");","import StandardError from './standard-error';\r\n\r\n/**\r\n * Throw this error if we try to call a method that is only a stub and has not\r\n * been fully implemented.\r\n */\r\nexport default class NotImplementedError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(message || 'Not implemented.');\r\n\r\n        this.name = 'NotImplementedError';\r\n        this.type = 'not_implemented';\r\n    }\r\n}\r\n","import {\r\n    BuyNowCartRequestBody,\r\n    NonceInstrument,\r\n    PaymentMethod,\r\n    WithAccountCreation,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nexport interface BoltHostWindow extends Window {\r\n    BoltCheckout?: BoltCheckout;\r\n    BoltConnect?: BoltConnect;\r\n    Bolt?(publicKey: string): BoltEmbedded;\r\n}\r\n\r\nexport interface BoltCheckout {\r\n    configure(cart: BoltCart, hints: Record<string, never>, callbacks?: BoltCallbacks): BoltClient;\r\n    hasBoltAccount(email: string): Promise<boolean>;\r\n    getTransactionReference(): Promise<string | undefined>;\r\n    openCheckout(email: string, callbacks?: BoltOpenCheckoutCallbacks): Promise<void>;\r\n    setClientCustomCallbacks(callbacks: BoltCallbacks): void;\r\n    setOrderId(orderId: number): Promise<void>;\r\n}\r\n\r\nexport interface BoltConnect {\r\n    setupProductPageCheckout?(): void;\r\n}\r\n\r\nexport interface BoltOpenCheckoutCallbacks {\r\n    close?(): void;\r\n}\r\n\r\nexport interface BoltEmbeddedOptions {\r\n    styles: { backgroundColor: string };\r\n    renderSeparateFields?: boolean;\r\n}\r\n\r\nexport interface BoltEmbedded {\r\n    create(name: string, options?: BoltEmbeddedOptions): BoltEmbededField;\r\n}\r\n\r\nexport interface BoltEmbededField {\r\n    mount(element: string): void;\r\n    unmount(): void;\r\n    tokenize(): Promise<BoltEmbeddedTokenize | Error>;\r\n}\r\n\r\nexport interface BoltDeveloperModeParams {\r\n    developerMode: BoltDeveloperMode;\r\n    developerDomain: string;\r\n}\r\n\r\nexport enum BoltDeveloperMode {\r\n    SandboxMode = 'bolt_sandbox',\r\n    StagingMode = 'bolt_staging',\r\n    DevelopmentMode = 'bolt_development',\r\n}\r\n\r\nexport interface BoltClient {\r\n    open(): void;\r\n}\r\n\r\nexport interface BoltCart {\r\n    orderToken: string;\r\n}\r\n\r\nexport interface BoltCallbacks {\r\n    check?(): boolean;\r\n    onCheckoutStart?(): void;\r\n    onPaymentSubmit?(): void;\r\n    success(transaction: BoltTransaction, callback: () => void): void;\r\n    close?(): void;\r\n}\r\n\r\nexport interface BoltTransaction {\r\n    id: string;\r\n    type: string;\r\n    processor: string;\r\n    date: number;\r\n    reference: string;\r\n    status: string;\r\n    authorization: BoltAuthorization;\r\n}\r\n\r\nexport interface BoltAuthorization {\r\n    status: string;\r\n    reason: string;\r\n}\r\n\r\nexport interface BoltEmbeddedTokenize {\r\n    bin: string;\r\n    expiration: string;\r\n    last4: string;\r\n    postal_code?: string;\r\n    token: string;\r\n    token_type: string;\r\n}\r\n\r\nexport interface BoltPaymentMethod extends PaymentMethod {\r\n    initializationData?: BoltInitializationData;\r\n}\r\n\r\nexport interface BoltInitializationData {\r\n    publishableKey: string;\r\n    developerConfig: BoltDeveloperModeParams;\r\n    embeddedOneClickEnabled: boolean;\r\n}\r\n\r\nexport type BoltPaymentData = WithAccountCreation & NonceInstrument;\r\n\r\nexport interface BoltBuyNowInitializeOptions {\r\n    storefrontApiToken?: string;\r\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\r\n}\r\n\r\nexport enum StyleButtonSize {\r\n    Small = 'small',\r\n    Medium = 'medium',\r\n    Large = 'large',\r\n}\r\n\r\nexport enum StyleButtonShape {\r\n    Pill = 'pill',\r\n    Rect = 'rect',\r\n}\r\n\r\nexport interface BoltButtonStyleOptions {\r\n    shape?: StyleButtonShape;\r\n    size?: StyleButtonSize;\r\n}\r\n","import { stringifyUrl } from 'query-string';\r\n\r\nimport {\r\n    CheckoutButtonInitializeOptions,\r\n    CheckoutButtonStrategy,\r\n    InvalidArgumentError,\r\n    NotImplementedError,\r\n    PaymentIntegrationService,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport {\r\n    BoltButtonStyleOptions,\r\n    BoltHostWindow,\r\n    BoltPaymentMethod,\r\n    StyleButtonShape,\r\n    StyleButtonSize,\r\n} from './bolt';\r\nimport { WithBoltButtonInitializeOptions } from './bolt-button-initialize-options';\r\nimport BoltScriptLoader from './bolt-script-loader';\r\n\r\nexport default class BoltButtonStrategy implements CheckoutButtonStrategy {\r\n    constructor(\r\n        private paymentIntegrationService: PaymentIntegrationService,\r\n        private boltScriptLoader: BoltScriptLoader,\r\n        public boltHostWindow: BoltHostWindow = window,\r\n    ) {}\r\n\r\n    async initialize(\r\n        options: CheckoutButtonInitializeOptions & WithBoltButtonInitializeOptions,\r\n    ): Promise<void> {\r\n        const { bolt, containerId, methodId } = options;\r\n        const { buyNowInitializeOptions, style } = bolt || {};\r\n\r\n        if (!methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        if (!containerId) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (!bolt) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.bolt\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        const isBuyNowFlow = Boolean(buyNowInitializeOptions);\r\n\r\n        if (!isBuyNowFlow) {\r\n            throw new NotImplementedError('Only buy now flow is implemented for Bolt button');\r\n        }\r\n\r\n        if (\r\n            !buyNowInitializeOptions?.storefrontApiToken ||\r\n            typeof buyNowInitializeOptions.storefrontApiToken !== 'string'\r\n        ) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.storefrontApiToken\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        const state = this.paymentIntegrationService.getState();\r\n        const paymentMethod: BoltPaymentMethod = state.getPaymentMethodOrThrow(methodId);\r\n        const { initializationData, config } = paymentMethod;\r\n        const { publishableKey, developerConfig } = initializationData || {};\r\n\r\n        await this.boltScriptLoader.loadBoltClient(\r\n            publishableKey,\r\n            config.testMode,\r\n            developerConfig,\r\n            'BigCommerce',\r\n            buyNowInitializeOptions.storefrontApiToken,\r\n        );\r\n\r\n        this.renderButton(containerId, paymentMethod, style);\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private renderButton(\r\n        containerId: string,\r\n        paymentMethod: BoltPaymentMethod,\r\n        style?: BoltButtonStyleOptions,\r\n    ): void {\r\n        if (typeof this.boltHostWindow.BoltConnect?.setupProductPageCheckout !== 'function') {\r\n            return;\r\n        }\r\n\r\n        this.addButtonContainer(containerId, paymentMethod, style);\r\n        this.boltHostWindow.BoltConnect.setupProductPageCheckout();\r\n    }\r\n\r\n    private addButtonContainer(\r\n        containerId: string,\r\n        paymentMethod: BoltPaymentMethod,\r\n        style?: BoltButtonStyleOptions,\r\n    ): void {\r\n        const container = document.getElementById(containerId);\r\n\r\n        if (!container) {\r\n            return;\r\n        }\r\n\r\n        const boltButtonContainer = document.createElement('div');\r\n        const boltButtonObject = document.createElement('object');\r\n\r\n        boltButtonContainer.setAttribute('id', 'product-page-checkout-wrapper');\r\n        boltButtonContainer.setAttribute('class', 'bolt-button-wrapper');\r\n        boltButtonContainer.setAttribute('style', 'display:none');\r\n        boltButtonContainer.setAttribute('data-tid', 'product-page-checkout-wrapper');\r\n\r\n        boltButtonObject.setAttribute('data', this.getBoltObjectData(paymentMethod, style));\r\n        boltButtonObject.setAttribute('class', 'bolt-product-checkout-button');\r\n\r\n        boltButtonContainer.append(boltButtonObject);\r\n        container.innerHTML = '';\r\n        container.append(boltButtonContainer);\r\n    }\r\n\r\n    private getBoltObjectData(\r\n        paymentMethod: BoltPaymentMethod,\r\n        style?: BoltButtonStyleOptions,\r\n    ): string {\r\n        const { initializationData, config } = paymentMethod;\r\n        const { publishableKey, developerConfig } = initializationData || {};\r\n\r\n        const domainUrl = this.boltScriptLoader.getDomainURL(!!config.testMode, developerConfig);\r\n        const buttonHeight = this.getButtonHeight(style?.size);\r\n        const buttonBorderRadius = this.getButtonBorderRadius(style?.shape, buttonHeight);\r\n\r\n        return stringifyUrl({\r\n            url: `https://${domainUrl}/v1/checkout_button`,\r\n            query: {\r\n                publishable_key: publishableKey,\r\n                variant: 'ppc',\r\n                height: buttonHeight,\r\n                border_radius: buttonBorderRadius,\r\n            },\r\n        });\r\n    }\r\n\r\n    private getButtonHeight(buttonSize?: StyleButtonSize): number | undefined {\r\n        if (!buttonSize) {\r\n            return;\r\n        }\r\n\r\n        switch (buttonSize) {\r\n            case StyleButtonSize.Small:\r\n                return 25;\r\n\r\n            case StyleButtonSize.Large:\r\n                return 45;\r\n\r\n            case StyleButtonSize.Medium:\r\n            default:\r\n                return 40;\r\n        }\r\n    }\r\n\r\n    private getButtonBorderRadius(\r\n        buttonShape?: StyleButtonShape,\r\n        buttonHeight?: number,\r\n    ): number | undefined {\r\n        if (!buttonShape) {\r\n            return;\r\n        }\r\n\r\n        switch (buttonShape) {\r\n            case StyleButtonShape.Pill:\r\n                return buttonHeight ? Math.round(buttonHeight / 2) : undefined;\r\n\r\n            case StyleButtonShape.Rect:\r\n            default:\r\n                return 4;\r\n        }\r\n    }\r\n}\r\n","import StandardError from './standard-error';\r\n\r\n/**\r\n * This error should be thrown when the client library of a payment method fails\r\n * to load, or for some reason, it is inaccessible.\r\n */\r\nexport default class PaymentMethodClientUnavailableError extends StandardError {\r\n    constructor(message?: string) {\r\n        super(\r\n            message ||\r\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\r\n        );\r\n\r\n        this.name = 'PaymentMethodClientUnavailableError';\r\n        this.type = 'payment_method_client_unavailable';\r\n    }\r\n}\r\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport {\r\n    InvalidArgumentError,\r\n    PaymentMethodClientUnavailableError,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport {\r\n    BoltCheckout,\r\n    BoltDeveloperMode,\r\n    BoltDeveloperModeParams,\r\n    BoltEmbedded,\r\n    BoltHostWindow,\r\n} from './bolt';\r\n\r\nexport default class BoltScriptLoader {\r\n    constructor(\r\n        private scriptLoader: ScriptLoader,\r\n        public boltHostWindow: BoltHostWindow = window,\r\n    ) {}\r\n\r\n    async loadBoltClient(\r\n        publishableKey?: string,\r\n        testMode?: boolean,\r\n        developerModeParams?: BoltDeveloperModeParams,\r\n        cartId?: string,\r\n        storefrontApiToken?: string,\r\n    ): Promise<BoltCheckout> {\r\n        if (this.boltHostWindow.BoltCheckout) {\r\n            return this.boltHostWindow.BoltCheckout;\r\n        }\r\n\r\n        if (!publishableKey) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"publishableKey\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        await this.scriptLoader.loadScript(\r\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/connect-bigcommerce.js`,\r\n            this.getScriptOptions('bolt-connect', publishableKey, cartId, storefrontApiToken),\r\n        );\r\n        await this.scriptLoader.loadScript(\r\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/track.js`,\r\n            this.getScriptOptions('bolt-track', publishableKey),\r\n        );\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n        if (!this.boltHostWindow.BoltCheckout) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this.boltHostWindow.BoltCheckout;\r\n    }\r\n\r\n    async loadBoltEmbedded(\r\n        publishableKey: string,\r\n        testMode?: boolean,\r\n        developerModeParams?: BoltDeveloperModeParams,\r\n    ): Promise<BoltEmbedded> {\r\n        const options: LoadScriptOptions = {\r\n            async: true,\r\n            attributes: {\r\n                id: 'bolt-embedded',\r\n            },\r\n        };\r\n\r\n        await this.scriptLoader.loadScript(\r\n            `//${this.getDomainURL(!!testMode, developerModeParams)}/embed.js`,\r\n            options,\r\n        );\r\n\r\n        if (!this.boltHostWindow.Bolt) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this.boltHostWindow.Bolt(publishableKey);\r\n    }\r\n\r\n    getDomainURL(testMode: boolean, developerModeParams?: BoltDeveloperModeParams): string {\r\n        if (!testMode) {\r\n            return 'connect.bolt.com';\r\n        }\r\n\r\n        if (developerModeParams) {\r\n            switch (developerModeParams.developerMode) {\r\n                case BoltDeveloperMode.StagingMode:\r\n                    return 'connect-staging.bolt.com';\r\n\r\n                case BoltDeveloperMode.DevelopmentMode:\r\n                    return `connect.${developerModeParams.developerDomain}`;\r\n            }\r\n        }\r\n\r\n        return 'connect-sandbox.bolt.com';\r\n    }\r\n\r\n    private getScriptOptions(\r\n        id: string,\r\n        publishableKey: string,\r\n        cartId?: string,\r\n        storefrontApiToken?: string,\r\n    ): LoadScriptOptions {\r\n        return {\r\n            async: true,\r\n            attributes: {\r\n                id,\r\n                'data-publishable-key': publishableKey,\r\n                ...(cartId && { 'data-shopping-cart-id': cartId }),\r\n                ...(storefrontApiToken && { 'data-storefront-api-token': storefrontApiToken }),\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { getScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport {\r\n    CheckoutButtonStrategyFactory,\r\n    toResolvableModule,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport BoltButtonStrategy from './bolt-button-strategy';\r\nimport BoltScriptLoader from './bolt-script-loader';\r\n\r\nconst createBoltButtonStrategy: CheckoutButtonStrategyFactory<BoltButtonStrategy> = (\r\n    paymentIntegrationService,\r\n) => {\r\n    return new BoltButtonStrategy(\r\n        paymentIntegrationService,\r\n        new BoltScriptLoader(getScriptLoader()),\r\n    );\r\n};\r\n\r\nexport default toResolvableModule(createBoltButtonStrategy, [{ id: 'bolt' }]);\r\n","export enum CartSource {\r\n    BuyNow = 'BUY_NOW',\r\n}\r\n","import {\r\n    BuyNowCartRequestBody,\r\n    HostedInstrument,\r\n    ShippingOption,\r\n    VaultedInstrument,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\n/**\r\n *\r\n * PayPal Commerce Funding sources\r\n *\r\n */\r\nexport type FundingType = string[];\r\nexport type EnableFundingType = FundingType | string;\r\n\r\nexport interface PayPalCommerceSDKFunding {\r\n    CARD: string;\r\n    PAYPAL: string;\r\n    CREDIT: string;\r\n    PAYLATER: string;\r\n    OXXO: string;\r\n    SEPA: string;\r\n    VENMO: string;\r\n}\r\n\r\n/**\r\n *\r\n * PayPal Commerce SDK\r\n *\r\n */\r\nexport interface PayPalSDK {\r\n    FUNDING: PayPalCommerceSDKFunding;\r\n    HostedFields: {\r\n        isEligible(): boolean;\r\n        render(data: PayPalCommerceHostedFieldsRenderOptions): Promise<PayPalCommerceHostedFields>;\r\n    };\r\n    Buttons(options: PayPalCommerceButtonsOptions): PayPalCommerceButtons;\r\n    PaymentFields(options: PayPalCommercePaymentFieldsOptions): PayPalCommercePaymentFields;\r\n    Messages(options: PayPalCommerceMessagesOptions): PayPalCommerceMessages;\r\n}\r\n\r\nexport interface PayPalCommerceScriptParams {\r\n    'client-id'?: string;\r\n    'merchant-id'?: string;\r\n    'buyer-country'?: string;\r\n    'disable-funding'?: FundingType;\r\n    'enable-funding'?: EnableFundingType;\r\n    'data-client-token'?: string;\r\n    'data-partner-attribution-id'?: string;\r\n    currency?: string;\r\n    commit?: boolean;\r\n    intent?: PayPalCommerceIntent;\r\n    components?: ComponentsScriptType;\r\n}\r\n\r\nexport enum PayPalCommerceIntent {\r\n    AUTHORIZE = 'authorize',\r\n    CAPTURE = 'capture',\r\n}\r\n\r\nexport type ComponentsScriptType = Array<\r\n    'buttons' | 'funding-eligibility' | 'hosted-fields' | 'messages' | 'payment-fields'\r\n>;\r\n\r\nexport interface PayPalCommerceHostWindow extends Window {\r\n    paypal?: PayPalSDK;\r\n    paypalLoadScript?(options: PayPalCommerceScriptParams): Promise<{ paypal: PayPalSDK }>;\r\n}\r\n\r\n/**\r\n *\r\n * PayPal Commerce Initialization Data\r\n *\r\n */\r\nexport interface PayPalCommerceInitializationData {\r\n    attributionId?: string;\r\n    availableAlternativePaymentMethods: FundingType;\r\n    buttonStyle?: PayPalButtonStyleOptions;\r\n    buyerCountry?: string;\r\n    clientId: string;\r\n    clientToken?: string;\r\n    enabledAlternativePaymentMethods: FundingType;\r\n    isDeveloperModeApplicable?: boolean;\r\n    intent?: PayPalCommerceIntent;\r\n    isHostedCheckoutEnabled?: boolean;\r\n    isPayPalCreditAvailable?: boolean;\r\n    isVenmoEnabled?: boolean;\r\n    merchantId?: string;\r\n    orderId?: string;\r\n    shouldRenderFields?: boolean;\r\n}\r\n\r\n/**\r\n *\r\n * PayPal Commerce BuyNow\r\n *\r\n */\r\nexport interface PayPalBuyNowInitializeOptions {\r\n    getBuyNowCartRequestBody(): BuyNowCartRequestBody;\r\n}\r\n\r\n/**\r\n *\r\n * PayPal Commerce Hosted Fields\r\n *\r\n */\r\nexport interface PayPalCommerceHostedFieldsRenderOptions {\r\n    fields?: {\r\n        number?: PayPalCommerceHostedFieldOption;\r\n        cvv?: PayPalCommerceHostedFieldOption;\r\n        expirationDate?: PayPalCommerceHostedFieldOption;\r\n    };\r\n    paymentsSDK?: boolean;\r\n    styles?: {\r\n        input?: { [key: string]: string };\r\n        '.invalid'?: { [key: string]: string };\r\n        '.valid'?: { [key: string]: string };\r\n        ':focus'?: { [key: string]: string };\r\n    };\r\n    createOrder(): Promise<string>;\r\n}\r\n\r\nexport interface PayPalCommerceHostedFieldOption {\r\n    selector: string;\r\n    placeholder?: string;\r\n}\r\n\r\nexport interface PayPalCommerceHostedFields {\r\n    submit(\r\n        options?: PayPalCommerceHostedFieldsSubmitOptions,\r\n    ): Promise<PayPalCommerceHostedFieldsApprove>;\r\n    getState(): PayPalCommerceHostedFieldsState;\r\n    on(eventName: string, callback: (event: PayPalCommerceHostedFieldsState) => void): void;\r\n}\r\n\r\nexport interface PayPalCommerceHostedFieldsSubmitOptions {\r\n    contingencies?: Array<'3D_SECURE'>;\r\n    cardholderName?: string;\r\n}\r\n\r\nexport interface PayPalCommerceHostedFieldsApprove {\r\n    orderId: string;\r\n    liabilityShift?: 'POSSIBLE' | 'NO' | 'UNKNOWN';\r\n}\r\n\r\nexport interface PayPalCommerceHostedFieldsState {\r\n    cards: PayPalCommerceHostedFieldsCard[];\r\n    emittedBy: string;\r\n    fields: {\r\n        number?: PayPalCommerceHostedFieldsFieldData;\r\n        expirationDate?: PayPalCommerceHostedFieldsFieldData;\r\n        expirationMonth?: PayPalCommerceHostedFieldsFieldData;\r\n        expirationYear?: PayPalCommerceHostedFieldsFieldData;\r\n        cvv?: PayPalCommerceHostedFieldsFieldData;\r\n        postalCode?: PayPalCommerceHostedFieldsFieldData;\r\n    };\r\n}\r\n\r\nexport interface PayPalCommerceHostedFieldsCard {\r\n    type: string;\r\n    niceType: string;\r\n    code: {\r\n        name: string;\r\n        size: number;\r\n    };\r\n}\r\n\r\nexport interface PayPalCommerceHostedFieldsFieldData {\r\n    container: HTMLElement;\r\n    isFocused: boolean;\r\n    isEmpty: boolean;\r\n    isPotentiallyValid: boolean;\r\n    isValid: boolean;\r\n}\r\n\r\n/**\r\n *\r\n * PayPal Commerce Buttons\r\n *\r\n */\r\nexport interface PayPalCommerceButtons {\r\n    render(id: string): void;\r\n    close(): void;\r\n    isEligible(): boolean;\r\n}\r\n\r\nexport interface PayPalCommerceButtonsOptions {\r\n    experience?: string;\r\n    style?: PayPalButtonStyleOptions;\r\n    fundingSource: string;\r\n    createOrder(): Promise<string>;\r\n    onApprove(\r\n        data: ApproveCallbackPayload,\r\n        actions: ApproveCallbackActions,\r\n    ): Promise<boolean | void> | void;\r\n    onComplete?(data: CompleteCallbackDataPayload): Promise<void>;\r\n    onClick?(data: ClickCallbackPayload, actions: ClickCallbackActions): Promise<void>;\r\n    onError?(error: Error): void;\r\n    onCancel?(): void;\r\n    onShippingAddressChange?(data: ShippingAddressChangeCallbackPayload): Promise<void>;\r\n    onShippingOptionsChange?(data: ShippingOptionChangeCallbackPayload): Promise<void>;\r\n}\r\n\r\nexport interface ClickCallbackPayload {\r\n    fundingSource: string;\r\n}\r\n\r\nexport interface ClickCallbackActions {\r\n    reject(): void;\r\n    resolve(): void;\r\n}\r\n\r\nexport interface ShippingAddressChangeCallbackPayload {\r\n    orderId: string;\r\n    shippingAddress: PayPalAddress;\r\n}\r\n\r\nexport interface PayPalAddress {\r\n    city: string;\r\n    country_code: string;\r\n    postal_code: string;\r\n    state: string;\r\n}\r\n\r\nexport interface ShippingOptionChangeCallbackPayload {\r\n    orderId: string;\r\n    selectedShippingOption: PayPalSelectedShippingOption;\r\n}\r\n\r\nexport interface PayPalSelectedShippingOption {\r\n    amount: {\r\n        currency_code: string;\r\n        value: string;\r\n    };\r\n    id: string;\r\n    label: string;\r\n    selected: boolean;\r\n    type: string;\r\n}\r\n\r\nexport interface ApproveCallbackPayload {\r\n    orderID?: string;\r\n}\r\n\r\nexport interface ApproveCallbackActions {\r\n    order: {\r\n        get: () => Promise<PayPalOrderDetails>;\r\n    };\r\n}\r\n\r\nexport interface PayPalOrderDetails {\r\n    payer: {\r\n        name: {\r\n            given_name: string;\r\n            surname: string;\r\n        };\r\n        email_address: string;\r\n        address: PayPalOrderAddress;\r\n    };\r\n    purchase_units: Array<{\r\n        shipping: {\r\n            address: PayPalOrderAddress;\r\n        };\r\n    }>;\r\n}\r\n\r\nexport interface PayPalOrderAddress {\r\n    address_line_1: string;\r\n    admin_area_2: string;\r\n    admin_area_1?: string;\r\n    postal_code: string;\r\n    country_code: string;\r\n}\r\n\r\nexport interface CompleteCallbackDataPayload {\r\n    intent: string;\r\n    orderID: string;\r\n}\r\n\r\nexport enum StyleButtonLabel {\r\n    paypal = 'paypal',\r\n    checkout = 'checkout',\r\n    buynow = 'buynow',\r\n    pay = 'pay',\r\n    installment = 'installment',\r\n}\r\n\r\nexport enum StyleButtonColor {\r\n    gold = 'gold',\r\n    blue = 'blue',\r\n    silver = 'silver',\r\n    black = 'black',\r\n    white = 'white',\r\n}\r\n\r\nexport enum StyleButtonShape {\r\n    pill = 'pill',\r\n    rect = 'rect',\r\n}\r\n\r\nexport interface PayPalButtonStyleOptions {\r\n    color?: StyleButtonColor;\r\n    shape?: StyleButtonShape;\r\n    height?: number;\r\n    label?: StyleButtonLabel;\r\n}\r\n\r\n/**\r\n *\r\n * PayPal Commerce Payment fields\r\n *\r\n */\r\nexport interface PayPalCommercePaymentFields {\r\n    render(id: string): void;\r\n}\r\n\r\nexport interface PayPalCommercePaymentFieldsOptions {\r\n    style?: PayPalCommerceFieldsStyleOptions;\r\n    fundingSource: string;\r\n    fields: {\r\n        name?: {\r\n            value?: string;\r\n        };\r\n        email?: {\r\n            value?: string;\r\n        };\r\n    };\r\n}\r\n\r\nexport interface PayPalCommerceFieldsStyleOptions {\r\n    variables?: {\r\n        fontFamily?: string;\r\n        fontSizeBase?: string;\r\n        fontSizeSm?: string;\r\n        fontSizeM?: string;\r\n        fontSizeLg?: string;\r\n        textColor?: string;\r\n        colorTextPlaceholder?: string;\r\n        colorBackground?: string;\r\n        colorInfo?: string;\r\n        colorDanger?: string;\r\n        borderRadius?: string;\r\n        borderColor?: string;\r\n        borderWidth?: string;\r\n        borderFocusColor?: string;\r\n        spacingUnit?: string;\r\n    };\r\n    rules?: {\r\n        [key: string]: any;\r\n    };\r\n}\r\n\r\n/**\r\n *\r\n * PayPalCommerce Messages\r\n *\r\n */\r\nexport interface PayPalCommerceMessages {\r\n    render(id: string): void;\r\n}\r\n\r\nexport interface PayPalCommerceMessagesOptions {\r\n    amount: number;\r\n    placement: string;\r\n    style?: PayPalCommerceMessagesStyleOptions;\r\n    fundingSource?: string;\r\n}\r\n\r\nexport interface PayPalCommerceMessagesStyleOptions {\r\n    layout?: string;\r\n}\r\n\r\n/**\r\n *\r\n * Other\r\n *\r\n */\r\nexport enum NonInstantAlternativePaymentMethods {\r\n    OXXO = 'oxxo',\r\n}\r\n\r\nexport interface PayPalOrderData {\r\n    orderId: string;\r\n    approveUrl: string;\r\n}\r\n\r\nexport interface PayPalUpdateOrderRequestBody {\r\n    availableShippingOptions?: ShippingOption[];\r\n    cartId: string;\r\n    selectedShippingOption?: ShippingOption;\r\n}\r\n\r\nexport interface PayPalUpdateOrderResponse {\r\n    statusCode: number;\r\n}\r\n\r\nexport interface PayPalCreateOrderRequestBody extends HostedInstrument, VaultedInstrument {\r\n    cartId: string;\r\n}\r\n\r\nexport enum PayPalOrderStatus {\r\n    Approved = 'APPROVED',\r\n    Created = 'CREATED',\r\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\r\n}\r\n\r\nexport interface PayPalOrderStatusData {\r\n    status: PayPalOrderStatus;\r\n}\r\n","import { FormPoster } from '@bigcommerce/form-poster';\r\nimport { isNil, omitBy } from 'lodash';\r\n\r\nimport {\r\n    BillingAddressRequestBody,\r\n    BuyNowCartCreationError,\r\n    Cart,\r\n    CartSource,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    PaymentIntegrationService,\r\n    PaymentMethodClientUnavailableError,\r\n    RequestError,\r\n    ShippingOption,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport PayPalCommerceRequestSender from './paypal-commerce-request-sender';\r\nimport PayPalCommerceScriptLoader from './paypal-commerce-script-loader';\r\nimport {\r\n    PayPalButtonStyleOptions,\r\n    PayPalBuyNowInitializeOptions,\r\n    PayPalCommerceInitializationData,\r\n    PayPalCreateOrderRequestBody,\r\n    PayPalOrderDetails,\r\n    PayPalOrderStatus,\r\n    PayPalSDK,\r\n    StyleButtonColor,\r\n    StyleButtonLabel,\r\n    StyleButtonShape,\r\n} from './paypal-commerce-types';\r\n\r\nexport default class PayPalCommerceIntegrationService {\r\n    private paypalSdk?: PayPalSDK;\r\n\r\n    constructor(\r\n        private formPoster: FormPoster,\r\n        private paymentIntegrationService: PaymentIntegrationService,\r\n        private paypalCommerceRequestSender: PayPalCommerceRequestSender,\r\n        private paypalCommerceScriptLoader: PayPalCommerceScriptLoader,\r\n    ) {}\r\n\r\n    /**\r\n     *\r\n     * PayPalSDK methods\r\n     *\r\n     */\r\n    async loadPayPalSdk(\r\n        methodId: string,\r\n        providedCurrencyCode?: string,\r\n        initializesOnCheckoutPage?: boolean,\r\n    ): Promise<PayPalSDK> {\r\n        const state = this.paymentIntegrationService.getState();\r\n        const currencyCode = providedCurrencyCode || state.getCartOrThrow().currency.code;\r\n        const paymentMethod =\r\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\r\n\r\n        this.paypalSdk = await this.paypalCommerceScriptLoader.getPayPalSDK(\r\n            paymentMethod,\r\n            currencyCode,\r\n            initializesOnCheckoutPage,\r\n        );\r\n\r\n        return this.paypalSdk;\r\n    }\r\n\r\n    getPayPalSdkOrThrow(): PayPalSDK {\r\n        if (!this.paypalSdk) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this.paypalSdk;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Buy Now cart creation methods\r\n     *\r\n     */\r\n    async createBuyNowCartOrThrow(\r\n        buyNowInitializeOptions: PayPalBuyNowInitializeOptions,\r\n    ): Promise<Cart> {\r\n        const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\r\n\r\n        if (!cartRequestBody) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\r\n        }\r\n\r\n        try {\r\n            return await this.paymentIntegrationService.createBuyNowCart(cartRequestBody);\r\n        } catch (error) {\r\n            throw new BuyNowCartCreationError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Order methods\r\n     *\r\n     */\r\n    async createOrder(\r\n        providerId: string,\r\n        requestBody?: Partial<PayPalCreateOrderRequestBody>,\r\n    ): Promise<string> {\r\n        const cartId = this.paymentIntegrationService.getState().getCartOrThrow().id;\r\n\r\n        const { orderId } = await this.paypalCommerceRequestSender.createOrder(providerId, {\r\n            cartId,\r\n            ...requestBody,\r\n        });\r\n\r\n        return orderId;\r\n    }\r\n\r\n    async updateOrder(): Promise<void> {\r\n        const state = this.paymentIntegrationService.getState();\r\n        const cart = state.getCartOrThrow();\r\n        const consignment = state.getConsignmentsOrThrow()[0];\r\n\r\n        try {\r\n            await this.paypalCommerceRequestSender.updateOrder({\r\n                availableShippingOptions: consignment.availableShippingOptions,\r\n                cartId: cart.id,\r\n                selectedShippingOption: consignment.selectedShippingOption,\r\n            });\r\n        } catch (_error) {\r\n            throw new RequestError();\r\n        }\r\n    }\r\n\r\n    async getOrderStatus(): Promise<PayPalOrderStatus> {\r\n        try {\r\n            const { status } = await this.paypalCommerceRequestSender.getOrderStatus();\r\n\r\n            return status;\r\n        } catch (_error) {\r\n            throw new RequestError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Payment submitting and tokenizing methods\r\n     *\r\n     */\r\n    tokenizePayment(methodId: string, orderId?: string): void {\r\n        const cart = this.paymentIntegrationService.getState().getCartOrThrow();\r\n\r\n        if (!orderId) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\r\n        }\r\n\r\n        return this.formPoster.postForm('/checkout.php', {\r\n            payment_type: 'paypal',\r\n            action: 'set_external_checkout',\r\n            provider: methodId,\r\n            order_id: orderId,\r\n            ...(cart.source === CartSource.BuyNow && { cart_id: cart.id }),\r\n        });\r\n    }\r\n\r\n    async submitPayment(methodId: string, orderId: string): Promise<void> {\r\n        const paymentData = {\r\n            formattedPayload: {\r\n                vault_payment_instrument: null,\r\n                set_as_default_stored_instrument: null,\r\n                device_info: null,\r\n                method_id: methodId,\r\n                paypal_account: {\r\n                    order_id: orderId,\r\n                },\r\n            },\r\n        };\r\n\r\n        await this.paymentIntegrationService.submitPayment({ methodId, paymentData });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Shipping options methods\r\n     *\r\n     */\r\n    getShippingOptionOrThrow(selectedShippingOptionId?: string): ShippingOption {\r\n        const state = this.paymentIntegrationService.getState();\r\n        const consignment = state.getConsignmentsOrThrow()[0];\r\n\r\n        const availableShippingOptions = consignment.availableShippingOptions || [];\r\n\r\n        const recommendedShippingOption = availableShippingOptions.find(\r\n            (option) => option.isRecommended,\r\n        );\r\n\r\n        const selectedShippingOption = selectedShippingOptionId\r\n            ? availableShippingOptions.find((option) => option.id === selectedShippingOptionId)\r\n            : availableShippingOptions.find(\r\n                  (option) => option.id === consignment.selectedShippingOption?.id,\r\n              );\r\n\r\n        const shippingOptionToSelect =\r\n            selectedShippingOption || recommendedShippingOption || availableShippingOptions[0];\r\n\r\n        if (!shippingOptionToSelect) {\r\n            throw new Error(\"Your order can't be shipped to this address\");\r\n        }\r\n\r\n        return shippingOptionToSelect;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Address transforming methods\r\n     *\r\n     */\r\n    getAddress(address?: Partial<BillingAddressRequestBody>): BillingAddressRequestBody {\r\n        return {\r\n            firstName: address?.firstName || '',\r\n            lastName: address?.lastName || '',\r\n            email: address?.email || '',\r\n            phone: '',\r\n            company: '',\r\n            address1: address?.address1 || '',\r\n            address2: '',\r\n            city: address?.city || '',\r\n            countryCode: address?.countryCode || '',\r\n            postalCode: address?.postalCode || '',\r\n            stateOrProvince: '',\r\n            stateOrProvinceCode: address?.stateOrProvinceCode || '',\r\n            customFields: [],\r\n        };\r\n    }\r\n\r\n    getBillingAddressFromOrderDetails({ payer }: PayPalOrderDetails): BillingAddressRequestBody {\r\n        return this.getAddress({\r\n            firstName: payer.name.given_name,\r\n            lastName: payer.name.surname,\r\n            email: payer.email_address,\r\n            address1: payer.address.address_line_1,\r\n            city: payer.address.admin_area_2,\r\n            countryCode: payer.address.country_code,\r\n            postalCode: payer.address.postal_code,\r\n            stateOrProvinceCode: payer.address.admin_area_1,\r\n        });\r\n    }\r\n\r\n    getShippingAddressFromOrderDetails(\r\n        orderDetails: PayPalOrderDetails,\r\n    ): BillingAddressRequestBody {\r\n        const { payer, purchase_units } = orderDetails;\r\n        const shippingAddress = purchase_units[0]?.shipping?.address || {};\r\n\r\n        return this.getAddress({\r\n            firstName: payer.name.given_name,\r\n            lastName: payer.name.surname,\r\n            email: payer.email_address,\r\n            address1: shippingAddress.address_line_1,\r\n            city: shippingAddress.admin_area_2,\r\n            countryCode: shippingAddress.country_code,\r\n            postalCode: shippingAddress.postal_code,\r\n            stateOrProvinceCode: shippingAddress.admin_area_1,\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Buttons style methods\r\n     *\r\n     */\r\n    getValidButtonStyle(style?: PayPalButtonStyleOptions): PayPalButtonStyleOptions {\r\n        const { color, height, label, shape } = style || {};\r\n\r\n        const validStyles = {\r\n            color: color && StyleButtonColor[color] ? color : undefined,\r\n            height: this.getValidHeight(height),\r\n            label: label && StyleButtonLabel[label] ? label : undefined,\r\n            shape: shape && StyleButtonShape[shape] ? shape : undefined,\r\n        };\r\n\r\n        return omitBy(validStyles, isNil);\r\n    }\r\n\r\n    getValidHeight(height?: number): number {\r\n        const defaultHeight = 40;\r\n        const minHeight = 25;\r\n        const maxHeight = 55;\r\n\r\n        if (!height || typeof height !== 'number') {\r\n            return defaultHeight;\r\n        }\r\n\r\n        if (height > maxHeight) {\r\n            return maxHeight;\r\n        }\r\n\r\n        if (height < minHeight) {\r\n            return minHeight;\r\n        }\r\n\r\n        return height;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Utils methods\r\n     *\r\n     */\r\n    removeElement(elementId?: string): void {\r\n        const element = elementId && document.getElementById(elementId);\r\n\r\n        if (element) {\r\n            element.remove();\r\n        }\r\n    }\r\n}\r\n","export const INTERNAL_USE_ONLY =\r\n    'This API endpoint is for internal use only and may change in the future';\r\n","enum ContentType {\r\n    Json = 'application/json',\r\n    JsonV1 = 'application/vnd.bc.v1+json',\r\n}\r\n\r\nexport default ContentType;\r\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\r\n","import { RequestSender } from '@bigcommerce/request-sender';\r\n\r\nimport {\r\n    ContentType,\r\n    INTERNAL_USE_ONLY,\r\n    SDK_VERSION_HEADERS,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport {\r\n    PayPalCreateOrderRequestBody,\r\n    PayPalOrderData,\r\n    PayPalOrderStatusData,\r\n    PayPalUpdateOrderRequestBody,\r\n    PayPalUpdateOrderResponse,\r\n} from './paypal-commerce-types';\r\n\r\nexport default class PayPalCommerceRequestSender {\r\n    constructor(private requestSender: RequestSender) {}\r\n\r\n    async createOrder(\r\n        providerId: string,\r\n        requestBody: Partial<PayPalCreateOrderRequestBody>,\r\n    ): Promise<PayPalOrderData> {\r\n        const url = `/api/storefront/payment/${providerId}`;\r\n        const body = requestBody;\r\n        const headers = {\r\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n            'Content-Type': ContentType.Json,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        const res = await this.requestSender.post<PayPalOrderData>(url, { headers, body });\r\n\r\n        return res.body;\r\n    }\r\n\r\n    async updateOrder(\r\n        requestBody: PayPalUpdateOrderRequestBody,\r\n    ): Promise<PayPalUpdateOrderResponse> {\r\n        const url = `/api/storefront/initialization/paypalcommerce`;\r\n        const body = requestBody;\r\n        const headers = {\r\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n            'Content-Type': ContentType.Json,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        const res = await this.requestSender.put<PayPalUpdateOrderResponse>(url, { headers, body });\r\n\r\n        return res.body;\r\n    }\r\n\r\n    async getOrderStatus(): Promise<PayPalOrderStatusData> {\r\n        const url = '/api/storefront/initialization/paypalcommerce';\r\n        const headers = {\r\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n            'Content-Type': ContentType.Json,\r\n            ...SDK_VERSION_HEADERS,\r\n        };\r\n\r\n        const res = await this.requestSender.get<PayPalOrderStatusData>(url, { headers });\r\n\r\n        return res.body;\r\n    }\r\n}\r\n","import { ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport {\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    PaymentMethod,\r\n    PaymentMethodClientUnavailableError,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport {\r\n    FundingType,\r\n    PayPalCommerceHostWindow,\r\n    PayPalCommerceInitializationData,\r\n    PayPalCommerceScriptParams,\r\n    PayPalSDK,\r\n} from './paypal-commerce-types';\r\n\r\nconst PAYPAL_SDK_VERSION = '5.0.5';\r\n\r\nexport default class PayPalCommerceScriptLoader {\r\n    private window: PayPalCommerceHostWindow;\r\n    private paypalSdk?: PayPalSDK;\r\n\r\n    constructor(private scriptLoader: ScriptLoader) {\r\n        this.window = window;\r\n    }\r\n\r\n    async getPayPalSDK(\r\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\r\n        currencyCode: string,\r\n        initializesOnCheckoutPage?: boolean,\r\n    ): Promise<PayPalSDK> {\r\n        if (!this.paypalSdk) {\r\n            this.paypalSdk = await this.loadPayPalSDK(\r\n                this.getPayPalSdkScriptConfigOrThrow(\r\n                    paymentMethod,\r\n                    currencyCode,\r\n                    initializesOnCheckoutPage,\r\n                ),\r\n            );\r\n        }\r\n\r\n        return this.paypalSdk;\r\n    }\r\n\r\n    private async loadPayPalSDK(\r\n        paypalSdkScriptConfig: PayPalCommerceScriptParams,\r\n    ): Promise<PayPalSDK> {\r\n        if (!this.window.paypalLoadScript) {\r\n            const scriptSrc = `https://unpkg.com/@paypal/paypal-js@${PAYPAL_SDK_VERSION}/dist/iife/paypal-js.min.js`;\r\n\r\n            await this.scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\r\n\r\n            if (!this.window.paypalLoadScript) {\r\n                throw new PaymentMethodClientUnavailableError();\r\n            }\r\n        }\r\n\r\n        await this.window.paypalLoadScript(paypalSdkScriptConfig);\r\n\r\n        if (!this.window.paypal) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this.window.paypal;\r\n    }\r\n\r\n    private getPayPalSdkScriptConfigOrThrow(\r\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\r\n        currencyCode: string,\r\n        initializesOnCheckoutPage = true,\r\n    ): PayPalCommerceScriptParams {\r\n        const { id, clientToken, initializationData } = paymentMethod;\r\n\r\n        if (!initializationData?.clientId) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const {\r\n            intent,\r\n            clientId,\r\n            merchantId,\r\n            buyerCountry,\r\n            attributionId,\r\n            isVenmoEnabled,\r\n            isHostedCheckoutEnabled,\r\n            isPayPalCreditAvailable,\r\n            isDeveloperModeApplicable,\r\n            availableAlternativePaymentMethods = [],\r\n            enabledAlternativePaymentMethods = [],\r\n        } = initializationData;\r\n\r\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\r\n\r\n        const shouldEnableCard = id === 'paypalcommercecreditcards';\r\n        const enableCardFunding = shouldEnableCard ? ['card'] : [];\r\n        const disableCardFunding = !shouldEnableCard ? ['card'] : [];\r\n\r\n        const enableCreditFunding = isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\r\n        const disableCreditFunding = !isPayPalCreditAvailable ? ['credit', 'paylater'] : [];\r\n\r\n        const shouldEnableAPMs = initializesOnCheckoutPage || !commit;\r\n        const enableVenmoFunding = shouldEnableAPMs && isVenmoEnabled ? ['venmo'] : [];\r\n        const disableVenmoFunding = !shouldEnableAPMs || !isVenmoEnabled ? ['venmo'] : [];\r\n        const enableAPMsFunding = shouldEnableAPMs ? enabledAlternativePaymentMethods : [];\r\n        const disableAPMsFunding = shouldEnableAPMs\r\n            ? availableAlternativePaymentMethods.filter(\r\n                  (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\r\n              )\r\n            : availableAlternativePaymentMethods;\r\n\r\n        const disableFunding: FundingType = [\r\n            ...disableCardFunding,\r\n            ...disableCreditFunding,\r\n            ...disableVenmoFunding,\r\n            ...disableAPMsFunding,\r\n        ];\r\n        const enableFunding: FundingType = [\r\n            ...enableCardFunding,\r\n            ...enableCreditFunding,\r\n            ...enableVenmoFunding,\r\n            ...enableAPMsFunding,\r\n        ];\r\n\r\n        return {\r\n            'client-id': clientId,\r\n            'data-partner-attribution-id': attributionId,\r\n            'data-client-token': clientToken,\r\n            'merchant-id': merchantId,\r\n            'enable-funding': enableFunding.length > 0 ? enableFunding : undefined,\r\n            'disable-funding': disableFunding.length > 0 ? disableFunding : undefined,\r\n            commit,\r\n            components: ['buttons', 'hosted-fields', 'messages', 'payment-fields'],\r\n            currency: currencyCode,\r\n            intent,\r\n            ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\r\n        };\r\n    }\r\n}\r\n","import { createFormPoster } from '@bigcommerce/form-poster';\r\nimport { createRequestSender } from '@bigcommerce/request-sender';\r\nimport { getScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport {\r\n    PayPalCommerceIntegrationService,\r\n    PayPalCommerceRequestSender,\r\n    PayPalCommerceScriptLoader,\r\n} from './index';\r\n\r\nconst createPayPalCommerceIntegrationService = (\r\n    paymentIntegrationService: PaymentIntegrationService,\r\n) => {\r\n    const { getHost } = paymentIntegrationService.getState();\r\n\r\n    return new PayPalCommerceIntegrationService(\r\n        createFormPoster(),\r\n        paymentIntegrationService,\r\n        new PayPalCommerceRequestSender(createRequestSender({ host: getHost() })),\r\n        new PayPalCommerceScriptLoader(getScriptLoader()),\r\n    );\r\n};\r\n\r\nexport default createPayPalCommerceIntegrationService;\r\n","import {\r\n    CheckoutButtonInitializeOptions,\r\n    CheckoutButtonStrategy,\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    PaymentIntegrationService,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\r\nimport {\r\n    ApproveCallbackActions,\r\n    ApproveCallbackPayload,\r\n    PayPalBuyNowInitializeOptions,\r\n    PayPalCommerceButtonsOptions,\r\n    PayPalCommerceInitializationData,\r\n    ShippingAddressChangeCallbackPayload,\r\n    ShippingOptionChangeCallbackPayload,\r\n} from '../paypal-commerce-types';\r\n\r\nimport PayPalCommerceButtonInitializeOptions, {\r\n    WithPayPalCommerceButtonInitializeOptions,\r\n} from './paypal-commerce-button-initialize-options';\r\n\r\nexport default class PayPalCommerceButtonStrategy implements CheckoutButtonStrategy {\r\n    constructor(\r\n        private paymentIntegrationService: PaymentIntegrationService,\r\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\r\n    ) {}\r\n\r\n    async initialize(\r\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceButtonInitializeOptions,\r\n    ): Promise<void> {\r\n        const { paypalcommerce, containerId, methodId } = options;\r\n\r\n        const isBuyNowFlow = Boolean(paypalcommerce?.buyNowInitializeOptions);\r\n\r\n        if (!methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        if (!containerId) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (!paypalcommerce) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (isBuyNowFlow && !paypalcommerce.currencyCode) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (\r\n            isBuyNowFlow &&\r\n            typeof paypalcommerce.buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\r\n        ) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\r\n            );\r\n        }\r\n\r\n        if (!isBuyNowFlow) {\r\n            // Info: default checkout should not be loaded for BuyNow flow,\r\n            // since there is no checkout session available for that.\r\n            await this.paymentIntegrationService.loadDefaultCheckout();\r\n        }\r\n\r\n        // Info: we are using provided currency code for buy now cart,\r\n        // because checkout session is not available before buy now cart creation,\r\n        // hence application will throw an error on getCartOrThrow method call\r\n        const currencyCode = isBuyNowFlow\r\n            ? paypalcommerce.currencyCode\r\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\r\n\r\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\r\n\r\n        this.renderButton(containerId, methodId, paypalcommerce);\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private renderButton(\r\n        containerId: string,\r\n        methodId: string,\r\n        paypalcommerce: PayPalCommerceButtonInitializeOptions,\r\n    ): void {\r\n        const { buyNowInitializeOptions, style, onComplete } = paypalcommerce;\r\n\r\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\r\n        const state = this.paymentIntegrationService.getState();\r\n        const paymentMethod =\r\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\r\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\r\n\r\n        const defaultCallbacks = {\r\n            createOrder: () => this.paypalCommerceIntegrationService.createOrder('paypalcommerce'),\r\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\r\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\r\n        };\r\n\r\n        const buyNowFlowCallbacks = {\r\n            onClick: () => this.handleClick(buyNowInitializeOptions),\r\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\r\n        };\r\n\r\n        const hostedCheckoutCallbacks = {\r\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\r\n                this.onShippingAddressChange(data),\r\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\r\n                this.onShippingOptionsChange(data),\r\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\r\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\r\n        };\r\n\r\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\r\n            fundingSource: paypalSdk.FUNDING.PAYPAL,\r\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\r\n            ...defaultCallbacks,\r\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\r\n            ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\r\n        };\r\n\r\n        const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\r\n\r\n        if (paypalButton.isEligible()) {\r\n            paypalButton.render(`#${containerId}`);\r\n        } else {\r\n            this.paypalCommerceIntegrationService.removeElement(containerId);\r\n        }\r\n    }\r\n\r\n    private async handleClick(\r\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\r\n    ): Promise<void> {\r\n        if (buyNowInitializeOptions) {\r\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\r\n                buyNowInitializeOptions,\r\n            );\r\n\r\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\r\n        }\r\n    }\r\n\r\n    private async onHostedCheckoutApprove(\r\n        data: ApproveCallbackPayload,\r\n        actions: ApproveCallbackActions,\r\n        methodId: string,\r\n        onComplete?: () => void,\r\n    ): Promise<boolean> {\r\n        if (!data.orderID) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\r\n        }\r\n\r\n        const state = this.paymentIntegrationService.getState();\r\n        const cart = state.getCartOrThrow();\r\n        const orderDetails = await actions.order.get();\r\n\r\n        try {\r\n            const billingAddress =\r\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\r\n                    orderDetails,\r\n                );\r\n\r\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\r\n\r\n            if (cart.lineItems.physicalItems.length > 0) {\r\n                const shippingAddress =\r\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\r\n                        orderDetails,\r\n                    );\r\n\r\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\r\n                await this.paypalCommerceIntegrationService.updateOrder();\r\n            }\r\n\r\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\r\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\r\n\r\n            if (onComplete && typeof onComplete === 'function') {\r\n                onComplete();\r\n            }\r\n\r\n            return true; // FIXME: Do we really need to return true here?\r\n        } catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n\r\n    private async onShippingAddressChange(\r\n        data: ShippingAddressChangeCallbackPayload,\r\n    ): Promise<void> {\r\n        const address = this.paypalCommerceIntegrationService.getAddress({\r\n            city: data.shippingAddress.city,\r\n            countryCode: data.shippingAddress.country_code,\r\n            postalCode: data.shippingAddress.postal_code,\r\n            stateOrProvinceCode: data.shippingAddress.state,\r\n        });\r\n\r\n        try {\r\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\r\n            // on this stage we don't have access to valid customer's address accept shipping data\r\n            await this.paymentIntegrationService.updateBillingAddress(address);\r\n            await this.paymentIntegrationService.updateShippingAddress(address);\r\n\r\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\r\n\r\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\r\n            await this.paypalCommerceIntegrationService.updateOrder();\r\n        } catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n\r\n    private async onShippingOptionsChange(\r\n        data: ShippingOptionChangeCallbackPayload,\r\n    ): Promise<void> {\r\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\r\n            data.selectedShippingOption.id,\r\n        );\r\n\r\n        try {\r\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\r\n            await this.paypalCommerceIntegrationService.updateOrder();\r\n        } catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    CheckoutButtonStrategyFactory,\r\n    toResolvableModule,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\r\n\r\nimport PayPalCommerceButtonStrategy from './paypal-commerce-button-strategy';\r\n\r\nconst createPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\r\n    PayPalCommerceButtonStrategy\r\n> = (paymentIntegrationService) =>\r\n    new PayPalCommerceButtonStrategy(\r\n        paymentIntegrationService,\r\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\r\n    );\r\n\r\nexport default toResolvableModule(createPayPalCommerceButtonStrategy, [{ id: 'paypalcommerce' }]);\r\n","import {\r\n    CheckoutButtonInitializeOptions,\r\n    CheckoutButtonStrategy,\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    PaymentIntegrationService,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\r\nimport {\r\n    ApproveCallbackActions,\r\n    ApproveCallbackPayload,\r\n    PayPalBuyNowInitializeOptions,\r\n    PayPalCommerceButtonsOptions,\r\n    PayPalCommerceInitializationData,\r\n    ShippingAddressChangeCallbackPayload,\r\n    ShippingOptionChangeCallbackPayload,\r\n} from '../paypal-commerce-types';\r\n\r\nimport PayPalCommerceCreditButtonInitializeOptions, {\r\n    WithPayPalCommerceCreditButtonInitializeOptions,\r\n} from './paypal-commerce-credit-button-initialize-options';\r\n\r\nexport default class PayPalCommerceCreditButtonStrategy implements CheckoutButtonStrategy {\r\n    constructor(\r\n        private paymentIntegrationService: PaymentIntegrationService,\r\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\r\n    ) {}\r\n\r\n    async initialize(\r\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceCreditButtonInitializeOptions,\r\n    ): Promise<void> {\r\n        const { paypalcommercecredit, containerId, methodId } = options;\r\n        const {\r\n            buyNowInitializeOptions,\r\n            currencyCode: providedCurrencyCode,\r\n            messagingContainerId,\r\n        } = paypalcommercecredit || {};\r\n\r\n        const isBuyNowFlow = !!buyNowInitializeOptions;\r\n\r\n        if (!methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        if (!containerId) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (!paypalcommercecredit) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (isBuyNowFlow && !providedCurrencyCode) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (\r\n            isBuyNowFlow &&\r\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\r\n        ) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\r\n            );\r\n        }\r\n\r\n        if (!isBuyNowFlow) {\r\n            // Info: default checkout should not be loaded for BuyNow flow,\r\n            // since there is no checkout session available for that.\r\n            await this.paymentIntegrationService.loadDefaultCheckout();\r\n        }\r\n\r\n        // Info: we are using provided currency code for buy now cart,\r\n        // because checkout session is not available before buy now cart creation,\r\n        // hence application will throw an error on getCartOrThrow method call\r\n        const currencyCode = isBuyNowFlow\r\n            ? providedCurrencyCode\r\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\r\n\r\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\r\n\r\n        this.renderButton(containerId, methodId, paypalcommercecredit);\r\n        this.renderMessages(messagingContainerId);\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private renderButton(\r\n        containerId: string,\r\n        methodId: string,\r\n        paypalcommercecredit: PayPalCommerceCreditButtonInitializeOptions,\r\n    ): void {\r\n        const { buyNowInitializeOptions, style, onComplete } = paypalcommercecredit;\r\n\r\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\r\n        const state = this.paymentIntegrationService.getState();\r\n        const paymentMethod =\r\n            state.getPaymentMethodOrThrow<PayPalCommerceInitializationData>(methodId);\r\n        const { isHostedCheckoutEnabled } = paymentMethod.initializationData || {};\r\n\r\n        const defaultCallbacks = {\r\n            createOrder: () =>\r\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercecredit'),\r\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\r\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\r\n        };\r\n\r\n        const buyNowFlowCallbacks = {\r\n            onClick: () => this.handleClick(buyNowInitializeOptions),\r\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\r\n        };\r\n\r\n        const hostedCheckoutCallbacks = {\r\n            onShippingAddressChange: (data: ShippingAddressChangeCallbackPayload) =>\r\n                this.onShippingAddressChange(data),\r\n            onShippingOptionsChange: (data: ShippingOptionChangeCallbackPayload) =>\r\n                this.onShippingOptionsChange(data),\r\n            onApprove: (data: ApproveCallbackPayload, actions: ApproveCallbackActions) =>\r\n                this.onHostedCheckoutApprove(data, actions, methodId, onComplete),\r\n        };\r\n\r\n        const fundingSources = [paypalSdk.FUNDING.PAYLATER, paypalSdk.FUNDING.CREDIT];\r\n        let hasRenderedSmartButton = false;\r\n\r\n        fundingSources.forEach((fundingSource) => {\r\n            if (!hasRenderedSmartButton) {\r\n                const buttonRenderOptions: PayPalCommerceButtonsOptions = {\r\n                    fundingSource,\r\n                    style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\r\n                    ...defaultCallbacks,\r\n                    ...(buyNowInitializeOptions && buyNowFlowCallbacks),\r\n                    ...(isHostedCheckoutEnabled && hostedCheckoutCallbacks),\r\n                };\r\n\r\n                const paypalButton = paypalSdk.Buttons(buttonRenderOptions);\r\n\r\n                if (paypalButton.isEligible()) {\r\n                    paypalButton.render(`#${containerId}`);\r\n                    hasRenderedSmartButton = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!hasRenderedSmartButton) {\r\n            this.paypalCommerceIntegrationService.removeElement(containerId);\r\n        }\r\n    }\r\n\r\n    private async handleClick(\r\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\r\n    ): Promise<void> {\r\n        if (buyNowInitializeOptions) {\r\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\r\n                buyNowInitializeOptions,\r\n            );\r\n\r\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\r\n        }\r\n    }\r\n\r\n    private async onHostedCheckoutApprove(\r\n        data: ApproveCallbackPayload,\r\n        actions: ApproveCallbackActions,\r\n        methodId: string,\r\n        onComplete?: () => void,\r\n    ): Promise<boolean> {\r\n        if (!data.orderID) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingOrderId);\r\n        }\r\n\r\n        const state = this.paymentIntegrationService.getState();\r\n        const cart = state.getCartOrThrow();\r\n        const orderDetails = await actions.order.get();\r\n\r\n        try {\r\n            const billingAddress =\r\n                this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(\r\n                    orderDetails,\r\n                );\r\n\r\n            await this.paymentIntegrationService.updateBillingAddress(billingAddress);\r\n\r\n            if (cart.lineItems.physicalItems.length > 0) {\r\n                const shippingAddress =\r\n                    this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(\r\n                        orderDetails,\r\n                    );\r\n\r\n                await this.paymentIntegrationService.updateShippingAddress(shippingAddress);\r\n                await this.paypalCommerceIntegrationService.updateOrder();\r\n            }\r\n\r\n            await this.paymentIntegrationService.submitOrder({}, { params: { methodId } });\r\n            await this.paypalCommerceIntegrationService.submitPayment(methodId, data.orderID);\r\n\r\n            if (onComplete && typeof onComplete === 'function') {\r\n                onComplete();\r\n            }\r\n\r\n            return true; // FIXME: Do we really need to return true here?\r\n        } catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n\r\n    private async onShippingAddressChange(\r\n        data: ShippingAddressChangeCallbackPayload,\r\n    ): Promise<void> {\r\n        const address = this.paypalCommerceIntegrationService.getAddress({\r\n            city: data.shippingAddress.city,\r\n            countryCode: data.shippingAddress.country_code,\r\n            postalCode: data.shippingAddress.postal_code,\r\n            stateOrProvinceCode: data.shippingAddress.state,\r\n        });\r\n\r\n        try {\r\n            // Info: we use the same address to fill billing and shipping addresses to have valid quota on BE for order updating process\r\n            // on this stage we don't have access to valid customer's address accept shipping data\r\n            await this.paymentIntegrationService.updateBillingAddress(address);\r\n            await this.paymentIntegrationService.updateShippingAddress(address);\r\n\r\n            const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow();\r\n\r\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\r\n            await this.paypalCommerceIntegrationService.updateOrder();\r\n        } catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n\r\n    private async onShippingOptionsChange(\r\n        data: ShippingOptionChangeCallbackPayload,\r\n    ): Promise<void> {\r\n        const shippingOption = this.paypalCommerceIntegrationService.getShippingOptionOrThrow(\r\n            data.selectedShippingOption.id,\r\n        );\r\n\r\n        try {\r\n            await this.paymentIntegrationService.selectShippingOption(shippingOption.id);\r\n            await this.paypalCommerceIntegrationService.updateOrder();\r\n        } catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    }\r\n\r\n    private renderMessages(messagingContainerId?: string): void {\r\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\r\n\r\n        if (messagingContainerId && document.getElementById(messagingContainerId)) {\r\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\r\n\r\n            const paypalMessagesOptions = {\r\n                amount: cart.cartAmount,\r\n                placement: 'cart',\r\n                style: {\r\n                    layout: 'text',\r\n                },\r\n            };\r\n\r\n            const paypalMessages = paypalSdk.Messages(paypalMessagesOptions);\r\n\r\n            paypalMessages.render(`#${messagingContainerId}`);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    CheckoutButtonStrategyFactory,\r\n    toResolvableModule,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\r\n\r\nimport PayPalCommerceCreditButtonStrategy from './paypal-commerce-credit-button-strategy';\r\n\r\nconst createPayPalCommerceCreditButtonStrategy: CheckoutButtonStrategyFactory<\r\n    PayPalCommerceCreditButtonStrategy\r\n> = (paymentIntegrationService) =>\r\n    new PayPalCommerceCreditButtonStrategy(\r\n        paymentIntegrationService,\r\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\r\n    );\r\n\r\nexport default toResolvableModule(createPayPalCommerceCreditButtonStrategy, [\r\n    { id: 'paypalcommercecredit' },\r\n]);\r\n","import {\r\n    CheckoutButtonInitializeOptions,\r\n    CheckoutButtonStrategy,\r\n    InvalidArgumentError,\r\n    PaymentIntegrationService,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\r\nimport {\r\n    ApproveCallbackPayload,\r\n    PayPalButtonStyleOptions,\r\n    PayPalBuyNowInitializeOptions,\r\n    PayPalCommerceButtonsOptions,\r\n    StyleButtonColor,\r\n} from '../paypal-commerce-types';\r\n\r\nimport PayPalCommerceVenmoButtonInitializeOptions, {\r\n    WithPayPalCommerceVenmoButtonInitializeOptions,\r\n} from './paypal-commerce-venmo-button-initialize-options';\r\n\r\nexport default class PayPalCommerceVenmoButtonStrategy implements CheckoutButtonStrategy {\r\n    constructor(\r\n        private paymentIntegrationService: PaymentIntegrationService,\r\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\r\n    ) {}\r\n\r\n    async initialize(\r\n        options: CheckoutButtonInitializeOptions & WithPayPalCommerceVenmoButtonInitializeOptions,\r\n    ): Promise<void> {\r\n        const { paypalcommercevenmo, containerId, methodId } = options;\r\n        const { buyNowInitializeOptions, currencyCode: providedCurrencyCode } =\r\n            paypalcommercevenmo || {};\r\n\r\n        const isBuyNowFlow = !!buyNowInitializeOptions;\r\n\r\n        if (!methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        if (!containerId) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (!paypalcommercevenmo) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (isBuyNowFlow && !providedCurrencyCode) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (\r\n            isBuyNowFlow &&\r\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\r\n        ) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\r\n            );\r\n        }\r\n\r\n        if (!isBuyNowFlow) {\r\n            // Info: default checkout should not be loaded for BuyNow flow,\r\n            // since there is no checkout session available for that.\r\n            await this.paymentIntegrationService.loadDefaultCheckout();\r\n        }\r\n\r\n        // Info: we are using provided currency code for buy now cart,\r\n        // because checkout session is not available before buy now cart creation,\r\n        // hence application will throw an error on getCartOrThrow method call\r\n        const currencyCode = isBuyNowFlow\r\n            ? providedCurrencyCode\r\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\r\n\r\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\r\n\r\n        this.renderButton(containerId, methodId, paypalcommercevenmo);\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private renderButton(\r\n        containerId: string,\r\n        methodId: string,\r\n        paypalcommercevenmo: PayPalCommerceVenmoButtonInitializeOptions,\r\n    ): void {\r\n        const { buyNowInitializeOptions, style } = paypalcommercevenmo;\r\n\r\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\r\n        const fundingSource = paypalSdk.FUNDING.VENMO;\r\n\r\n        const defaultCallbacks = {\r\n            createOrder: () =>\r\n                this.paypalCommerceIntegrationService.createOrder('paypalcommercevenmo'),\r\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\r\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\r\n        };\r\n\r\n        const buyNowFlowCallbacks = {\r\n            onClick: () => this.handleClick(buyNowInitializeOptions),\r\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\r\n        };\r\n\r\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\r\n            fundingSource,\r\n            style: this.getValidVenmoButtonStyles(style),\r\n            ...defaultCallbacks,\r\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\r\n        };\r\n\r\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\r\n\r\n        if (paypalButtonRender.isEligible()) {\r\n            paypalButtonRender.render(`#${containerId}`);\r\n        } else {\r\n            this.paypalCommerceIntegrationService.removeElement(containerId);\r\n        }\r\n    }\r\n\r\n    private getValidVenmoButtonStyles(style: PayPalButtonStyleOptions | undefined) {\r\n        const validButtonStyle = this.paypalCommerceIntegrationService.getValidButtonStyle(style);\r\n\r\n        if (validButtonStyle.color === StyleButtonColor.gold) {\r\n            return {\r\n                ...validButtonStyle,\r\n                color: undefined,\r\n            };\r\n        }\r\n\r\n        return validButtonStyle;\r\n    }\r\n\r\n    private async handleClick(\r\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\r\n    ): Promise<void> {\r\n        if (buyNowInitializeOptions) {\r\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\r\n                buyNowInitializeOptions,\r\n            );\r\n\r\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    CheckoutButtonStrategyFactory,\r\n    toResolvableModule,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\r\n\r\nimport PayPalCommerceVenmoButtonStrategy from './paypal-commerce-venmo-button-strategy';\r\n\r\nconst createPayPalCommerceVenmoButtonStrategy: CheckoutButtonStrategyFactory<\r\n    PayPalCommerceVenmoButtonStrategy\r\n> = (paymentIntegrationService) =>\r\n    new PayPalCommerceVenmoButtonStrategy(\r\n        paymentIntegrationService,\r\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\r\n    );\r\n\r\nexport default toResolvableModule(createPayPalCommerceVenmoButtonStrategy, [\r\n    { id: 'paypalcommercevenmo' },\r\n]);\r\n","import {\r\n    CheckoutButtonInitializeOptions,\r\n    CheckoutButtonStrategy,\r\n    InvalidArgumentError,\r\n    PaymentIntegrationService,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport PayPalCommerceIntegrationService from '../paypal-commerce-integration-service';\r\nimport {\r\n    ApproveCallbackPayload,\r\n    PayPalBuyNowInitializeOptions,\r\n    PayPalCommerceButtonsOptions,\r\n} from '../paypal-commerce-types';\r\n\r\nimport PayPalCommerceAlternativeMethodsButtonOptions, {\r\n    WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\r\n} from './paypal-commerce-alternative-methods-button-initialize-options';\r\n\r\nexport default class PayPalCommerceAlternativeMethodsButtonStrategy\r\n    implements CheckoutButtonStrategy\r\n{\r\n    constructor(\r\n        private paymentIntegrationService: PaymentIntegrationService,\r\n        private paypalCommerceIntegrationService: PayPalCommerceIntegrationService,\r\n    ) {}\r\n\r\n    async initialize(\r\n        options: CheckoutButtonInitializeOptions &\r\n            WithPayPalCommerceAlternativeMethodsButtonInitializeOptions,\r\n    ): Promise<void> {\r\n        const { paypalcommercealternativemethods, containerId, methodId } = options;\r\n        const {\r\n            apm,\r\n            buyNowInitializeOptions,\r\n            currencyCode: providedCurrencyCode,\r\n        } = paypalcommercealternativemethods || {};\r\n\r\n        const isBuyNowFlow = !!buyNowInitializeOptions;\r\n\r\n        if (!methodId) {\r\n            throw new InvalidArgumentError(\r\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\r\n            );\r\n        }\r\n\r\n        if (!containerId) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.containerId\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (!paypalcommercealternativemethods) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (!apm) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (isBuyNowFlow && !providedCurrencyCode) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.`,\r\n            );\r\n        }\r\n\r\n        if (\r\n            isBuyNowFlow &&\r\n            typeof buyNowInitializeOptions?.getBuyNowCartRequestBody !== 'function'\r\n        ) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.`,\r\n            );\r\n        }\r\n\r\n        if (!isBuyNowFlow) {\r\n            // Info: default checkout should not be loaded for BuyNow flow,\r\n            // since there is no checkout session available for that.\r\n            await this.paymentIntegrationService.loadDefaultCheckout();\r\n        }\r\n\r\n        // Info: we are using provided currency code for buy now cart,\r\n        // because checkout session is not available before buy now cart creation,\r\n        // hence application will throw an error on getCartOrThrow method call\r\n        const currencyCode = isBuyNowFlow\r\n            ? providedCurrencyCode\r\n            : this.paymentIntegrationService.getState().getCartOrThrow().currency.code;\r\n\r\n        await this.paypalCommerceIntegrationService.loadPayPalSdk(methodId, currencyCode, false);\r\n\r\n        this.renderButton(containerId, methodId, paypalcommercealternativemethods);\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private renderButton(\r\n        containerId: string,\r\n        methodId: string,\r\n        paypalcommercealternativemethods: PayPalCommerceAlternativeMethodsButtonOptions,\r\n    ): void {\r\n        const { apm, buyNowInitializeOptions, style } = paypalcommercealternativemethods;\r\n\r\n        const paypalSdk = this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();\r\n        const isAvailableFundingSource = Object.values(paypalSdk.FUNDING).includes(apm);\r\n\r\n        if (!isAvailableFundingSource) {\r\n            throw new InvalidArgumentError(\r\n                `Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.`,\r\n            );\r\n        }\r\n\r\n        const defaultCallbacks = {\r\n            createOrder: () =>\r\n                this.paypalCommerceIntegrationService.createOrder(\r\n                    'paypalcommercealternativemethod',\r\n                ),\r\n            onApprove: ({ orderID }: ApproveCallbackPayload) =>\r\n                this.paypalCommerceIntegrationService.tokenizePayment(methodId, orderID),\r\n        };\r\n\r\n        const buyNowFlowCallbacks = {\r\n            onClick: () => this.handleClick(buyNowInitializeOptions),\r\n            onCancel: () => this.paymentIntegrationService.loadDefaultCheckout(),\r\n        };\r\n\r\n        const buttonRenderOptions: PayPalCommerceButtonsOptions = {\r\n            fundingSource: apm,\r\n            style: this.paypalCommerceIntegrationService.getValidButtonStyle(style),\r\n            ...defaultCallbacks,\r\n            ...(buyNowInitializeOptions && buyNowFlowCallbacks),\r\n        };\r\n\r\n        const paypalButtonRender = paypalSdk.Buttons(buttonRenderOptions);\r\n\r\n        if (paypalButtonRender.isEligible()) {\r\n            paypalButtonRender.render(`#${containerId}`);\r\n        } else {\r\n            this.paypalCommerceIntegrationService.removeElement(containerId);\r\n        }\r\n    }\r\n\r\n    private async handleClick(\r\n        buyNowInitializeOptions?: PayPalBuyNowInitializeOptions,\r\n    ): Promise<void> {\r\n        if (buyNowInitializeOptions) {\r\n            const buyNowCart = await this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(\r\n                buyNowInitializeOptions,\r\n            );\r\n\r\n            await this.paymentIntegrationService.loadCheckout(buyNowCart.id);\r\n        }\r\n    }\r\n}\r\n","import {\r\n    CheckoutButtonStrategyFactory,\r\n    toResolvableModule,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport createPayPalCommerceIntegrationService from '../create-paypal-commerce-integration-service';\r\n\r\nimport PayPalCommerceAlternativeMethodsButtonStrategy from './paypal-commerce-alternative-methods-button-strategy';\r\n\r\nconst createPayPalCommerceAlternativeMethodsButtonStrategy: CheckoutButtonStrategyFactory<\r\n    PayPalCommerceAlternativeMethodsButtonStrategy\r\n> = (paymentIntegrationService) =>\r\n    new PayPalCommerceAlternativeMethodsButtonStrategy(\r\n        paymentIntegrationService,\r\n        createPayPalCommerceIntegrationService(paymentIntegrationService),\r\n    );\r\n\r\nexport default toResolvableModule(createPayPalCommerceAlternativeMethodsButtonStrategy, [\r\n    { id: 'paypalcommercealternativemethods' },\r\n]);\r\n","export interface PaypalFundingTypeList {\r\n    CARD?: string;\r\n    CREDIT?: string;\r\n    PAYPAL?: string;\r\n    PAYLATER?: string;\r\n}\r\n\r\nexport interface PaypalButton {\r\n    render(options: PaypalButtonOptions, container: string): void;\r\n}\r\n\r\nexport interface PaypalButtonRender {\r\n    render(container: string): void;\r\n    isEligible(): boolean;\r\n}\r\n\r\nexport interface MessagingRender {\r\n    render(container: string): void;\r\n}\r\n\r\nexport interface MessagingOptions {\r\n    amount: number;\r\n    placement: string;\r\n}\r\n\r\nexport interface PaypalButtonOptions {\r\n    env?: string;\r\n    commit?: boolean;\r\n    style?: PaypalStyleOptions;\r\n    funding?: PaypalFundingType;\r\n    fundingSource?: string;\r\n    client?: PaypalClientToken;\r\n    payment?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\r\n    onAuthorize?(data: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\r\n    createOrder?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\r\n    onApprove?(data?: PaypalAuthorizeData, actions?: PaypalActions): Promise<any>;\r\n}\r\n\r\nexport interface PaypalClientToken {\r\n    production?: string;\r\n    sandbox?: string;\r\n}\r\n\r\nexport interface PaypalFundingType {\r\n    allowed?: string[];\r\n    disallowed?: string[];\r\n}\r\n\r\nexport enum PaypalButtonStyleLayoutOption {\r\n    HORIZONTAL = 'horizontal',\r\n    VERTICAL = 'vertical',\r\n}\r\n\r\nexport enum PaypalButtonStyleSizeOption {\r\n    SMALL = 'small',\r\n    MEDIUM = 'medium',\r\n    LARGE = 'large',\r\n    RESPONSIVE = 'responsive',\r\n}\r\n\r\nexport enum PaypalButtonStyleColorOption {\r\n    GOLD = 'gold',\r\n    BLUE = 'blue',\r\n    SIlVER = 'silver',\r\n    BLACK = 'black',\r\n}\r\n\r\nexport enum PaypalButtonStyleLabelOption {\r\n    CHECKOUT = 'checkout',\r\n    PAY = 'pay',\r\n    BUYNOW = 'buynow',\r\n    PAYPAL = 'paypal',\r\n    CREDIT = 'credit',\r\n}\r\n\r\nexport enum PaypalButtonStyleShapeOption {\r\n    PILL = 'pill',\r\n    RECT = 'rect',\r\n}\r\n\r\nexport interface PaypalStyleOptions {\r\n    layout?: PaypalButtonStyleLayoutOption;\r\n    size?: PaypalButtonStyleSizeOption;\r\n    color?: PaypalButtonStyleColorOption;\r\n    label?: PaypalButtonStyleLabelOption;\r\n    shape?: PaypalButtonStyleShapeOption;\r\n    tagline?: boolean;\r\n    fundingicons?: boolean;\r\n    height?: number;\r\n}\r\n\r\nexport interface PaypalActions {\r\n    payment: PaypalPaymentActions;\r\n    request: PaypalRequestActions;\r\n}\r\n\r\nexport interface PaypalPaymentActions {\r\n    get(id: string): Promise<PaypalPaymentPayload>;\r\n}\r\n\r\nexport interface PaypalRequestActions {\r\n    post(url: string, payload?: object, options?: object): Promise<{ id: string }>;\r\n}\r\n\r\nexport interface PaypalTransaction {\r\n    amount?: PaypalAmount;\r\n    payee?: PaypalPayee;\r\n    description?: string;\r\n    note_to_payee?: string;\r\n    item_list?: PaypalItemList;\r\n}\r\n\r\nexport interface PaypalItemList {\r\n    items?: PaypalItem[];\r\n    shipping_address?: PaypalAddress;\r\n}\r\n\r\nexport interface PaypalItem {\r\n    sku?: string;\r\n    name?: string;\r\n    description?: string;\r\n    quantity: string;\r\n    price: string;\r\n    currency: string;\r\n    tax?: string;\r\n}\r\n\r\nexport interface PaypalAmount {\r\n    currency: string;\r\n    total: string;\r\n}\r\n\r\nexport interface PaypalPayer {\r\n    payer_info: object;\r\n}\r\n\r\nexport interface PaypalPayee {\r\n    email?: string;\r\n    merchant_id?: string;\r\n}\r\n\r\nexport interface PaypalAddress {\r\n    line1: string;\r\n    line2?: string;\r\n    city?: string;\r\n    country_code: string;\r\n    postal_code?: string;\r\n    state?: string;\r\n    phone?: string;\r\n    type?: string;\r\n}\r\n\r\nexport interface PaypalPaymentPayload {\r\n    payment: PaypalPaymentPayload;\r\n    payer: PaypalPayer;\r\n    transactions?: PaypalTransaction[];\r\n}\r\n\r\nexport interface PaypalAuthorizeData {\r\n    payerId: string;\r\n    paymentId?: string;\r\n    billingToken?: string;\r\n    // the PayPal side of things uses uppercase ID instead of camel case Id\r\n    payerID?: string;\r\n    paymentID?: string;\r\n}\r\n\r\nexport interface PaypalExpressCheckout {\r\n    initXO(): void;\r\n    startFlow(url: string): void;\r\n    closeFlow(): void;\r\n    setup(merchantId: string, options: PaypalExpressCheckoutOptions): void;\r\n}\r\n\r\nexport interface PaypalExpressCheckoutOptions {\r\n    button: string;\r\n    environment: string;\r\n}\r\n\r\nexport interface PaypalHostWindow extends Window {\r\n    paypal?: PaypalSDK;\r\n}\r\n\r\nexport interface PaypalSDK {\r\n    Button: PaypalButton;\r\n    checkout: PaypalExpressCheckout;\r\n    FUNDING: PaypalFundingTypeList;\r\n    Messages(options: MessagingOptions): MessagingRender;\r\n    Buttons(options: PaypalButtonOptions): PaypalButtonRender;\r\n}\r\n","import { FormPoster } from '@bigcommerce/form-poster';\r\n\r\nimport {\r\n    CheckoutButtonInitializeOptions,\r\n    CheckoutButtonStrategy,\r\n    INTERNAL_USE_ONLY,\r\n    InvalidArgumentError,\r\n    MissingDataError,\r\n    MissingDataErrorType,\r\n    NotInitializedError,\r\n    NotInitializedErrorType,\r\n    PaymentIntegrationService,\r\n    SDK_VERSION_HEADERS,\r\n    StandardError,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { WithPaypalExpressButtonInitializeOptions } from './paypal-express-button-initialize-options';\r\nimport PaypalScriptLoader from './paypal-express-script-loader';\r\nimport {\r\n    PaypalActions,\r\n    PaypalAuthorizeData,\r\n    PaypalButtonStyleShapeOption,\r\n    PaypalButtonStyleSizeOption,\r\n    PaypalClientToken,\r\n    PaypalSDK,\r\n    PaypalStyleOptions,\r\n} from './paypal-express-types';\r\n\r\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\r\n    constructor(\r\n        private paymentIntegrationService: PaymentIntegrationService,\r\n        private paypalExpressScriptLoader: PaypalScriptLoader,\r\n        private formPoster: FormPoster,\r\n    ) {}\r\n\r\n    async initialize(\r\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\r\n    ): Promise<void> {\r\n        const state = this.paymentIntegrationService.getState();\r\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\r\n\r\n        if (!options.paypal) {\r\n            throw new InvalidArgumentError();\r\n        }\r\n\r\n        if (!paymentMethod.config.merchantId) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const paypalSDK = await this.paypalExpressScriptLoader.loadPaypalSDK(\r\n            paymentMethod.config.merchantId,\r\n        );\r\n\r\n        this.renderButton(options, paypalSDK);\r\n    }\r\n\r\n    deinitialize(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private renderButton(\r\n        options: CheckoutButtonInitializeOptions & WithPaypalExpressButtonInitializeOptions,\r\n        paypalSDK: PaypalSDK,\r\n    ) {\r\n        const { containerId, methodId, paypal } = options;\r\n        const { allowCredit, clientId, onPaymentError, shouldProcessPayment, style } = paypal;\r\n\r\n        const state = this.paymentIntegrationService.getState();\r\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\r\n\r\n        if (!paymentMethod.config.merchantId) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\r\n        }\r\n\r\n        const merchantId = paymentMethod.config.merchantId;\r\n        const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\r\n        const clientToken: PaypalClientToken = { [env]: clientId };\r\n        const fundingCreditOption = paypalSDK.FUNDING.CREDIT || 'credit';\r\n        const allowedSources = allowCredit ? [fundingCreditOption] : [];\r\n        const disallowedSources = !allowCredit ? [fundingCreditOption] : [];\r\n\r\n        return paypalSDK.Button.render(\r\n            {\r\n                env,\r\n                client: clientToken,\r\n                commit: shouldProcessPayment,\r\n                funding: {\r\n                    allowed: allowedSources,\r\n                    disallowed: disallowedSources,\r\n                },\r\n                style: this.getStyle(style),\r\n                payment: (_, actions) => this.setupPayment(merchantId, actions, onPaymentError),\r\n                onAuthorize: (data, actions) =>\r\n                    this.tokenizePayment(data, methodId, actions, shouldProcessPayment),\r\n            },\r\n            containerId,\r\n        );\r\n    }\r\n\r\n    private getStyle(style?: Omit<PaypalStyleOptions, 'height'>): PaypalStyleOptions {\r\n        const { color, fundingicons, label, layout, shape, size, tagline } = style || {};\r\n\r\n        return {\r\n            color,\r\n            fundingicons,\r\n            label,\r\n            layout,\r\n            shape: shape || PaypalButtonStyleShapeOption.RECT,\r\n            size: size === 'small' ? PaypalButtonStyleSizeOption.RESPONSIVE : size,\r\n            tagline,\r\n        };\r\n    }\r\n\r\n    private async setupPayment(\r\n        merchantId: string,\r\n        actions?: PaypalActions,\r\n        onError?: (error: StandardError) => void,\r\n    ): Promise<string> {\r\n        if (!actions) {\r\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\r\n        }\r\n\r\n        try {\r\n            const state = await this.paymentIntegrationService.loadDefaultCheckout();\r\n            const { id: cartId } = state.getCartOrThrow();\r\n            const host = state.getHost() || '';\r\n\r\n            const paymentRequest = await actions.request.post(\r\n                `${host}/api/storefront/payment/paypalexpress`,\r\n                { merchantId, cartId },\r\n                {\r\n                    headers: {\r\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\r\n                        ...SDK_VERSION_HEADERS,\r\n                    },\r\n                },\r\n            );\r\n\r\n            return paymentRequest.id;\r\n        } catch (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    private async tokenizePayment(\r\n        data: PaypalAuthorizeData,\r\n        methodId: string,\r\n        actions?: PaypalActions,\r\n        shouldProcessPayment?: boolean,\r\n    ): Promise<void> {\r\n        if (!actions) {\r\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\r\n        }\r\n\r\n        if (!data.paymentID || !data.payerID) {\r\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\r\n        }\r\n\r\n        const state = this.paymentIntegrationService.getState();\r\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\r\n\r\n        const getPaymentData = await actions.payment.get(data.paymentID);\r\n\r\n        return this.formPoster.postForm('/checkout.php', {\r\n            payment_type: 'paypal',\r\n            provider: paymentMethod.id,\r\n            action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\r\n            paymentId: data.paymentID,\r\n            payerId: data.payerID,\r\n            payerInfo: JSON.stringify(getPaymentData.payer.payer_info),\r\n        });\r\n    }\r\n}\r\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { PaypalHostWindow, PaypalSDK } from './paypal-express-types';\r\n\r\nexport default class PaypalScriptLoader {\r\n    private window: PaypalHostWindow;\r\n\r\n    constructor(private scriptLoader: ScriptLoader) {\r\n        this.window = window;\r\n    }\r\n\r\n    async loadPaypalSDK(merchantId = ''): Promise<PaypalSDK> {\r\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\r\n        const options: LoadScriptOptions = {\r\n            async: true,\r\n            attributes: { 'data-merchant-id': merchantId },\r\n            ...(merchantId && {\r\n                attributes: { 'data-merchant-id': merchantId },\r\n            }),\r\n        };\r\n\r\n        await this.scriptLoader.loadScript(scriptSrc, options);\r\n\r\n        if (!this.window.paypal) {\r\n            throw new PaymentMethodClientUnavailableError();\r\n        }\r\n\r\n        return this.window.paypal;\r\n    }\r\n}\r\n","import { createFormPoster } from '@bigcommerce/form-poster';\r\nimport { getScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport {\r\n    CheckoutButtonStrategyFactory,\r\n    toResolvableModule,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { PaypalExpressButtonStrategy, PaypalExpressScriptLoader } from './index';\r\n\r\nconst createPaypalExpressButtonStrategy: CheckoutButtonStrategyFactory<\r\n    PaypalExpressButtonStrategy\r\n> = (paymentIntegrationService) => {\r\n    return new PaypalExpressButtonStrategy(\r\n        paymentIntegrationService,\r\n        new PaypalExpressScriptLoader(getScriptLoader()),\r\n        createFormPoster(),\r\n    );\r\n};\r\n\r\nexport default toResolvableModule(createPaypalExpressButtonStrategy, [{ id: 'paypalexpress' }]);\r\n","import { createFormPoster } from '@bigcommerce/form-poster';\r\nimport { createRequestSender } from '@bigcommerce/request-sender';\r\n\r\nimport { createCheckoutStore } from '../checkout';\r\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\r\nimport { createPaymentIntegrationService } from '../payment-integration';\r\n\r\nimport CheckoutButtonInitializer from './checkout-button-initializer';\r\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\r\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\r\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\r\nimport createCheckoutButtonRegistryV2 from './create-checkout-button-registry-v2';\r\n\r\n/**\r\n * Creates an instance of `CheckoutButtonInitializer`.\r\n *\r\n * @remarks\r\n * ```js\r\n * const initializer = createCheckoutButtonInitializer();\r\n *\r\n * initializer.initializeButton({\r\n *     methodId: 'braintreepaypal',\r\n *     braintreepaypal: {\r\n *         container: '#checkoutButton',\r\n *     },\r\n * });\r\n * ```\r\n *\r\n * @alpha\r\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\r\n * of development. Therefore the API is unstable and not ready for public\r\n * consumption.\r\n *\r\n * @param options - A set of construction options.\r\n * @returns an instance of `CheckoutButtonInitializer`.\r\n */\r\nexport default function createCheckoutButtonInitializer(\r\n    options?: CheckoutButtonInitializerOptions,\r\n): CheckoutButtonInitializer {\r\n    const { host, locale = 'en' } = options ?? {};\r\n    const store = createCheckoutStore();\r\n    const requestSender = createRequestSender({ host });\r\n    const formPoster = createFormPoster({ host });\r\n    const paymentIntegrationService = createPaymentIntegrationService(store);\r\n    const registryV2 = createCheckoutButtonRegistryV2(paymentIntegrationService);\r\n\r\n    return new CheckoutButtonInitializer(\r\n        store,\r\n        new CheckoutButtonStrategyActionCreator(\r\n            createCheckoutButtonRegistry(store, requestSender, formPoster, locale, host),\r\n            registryV2,\r\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\r\n        ),\r\n    );\r\n}\r\n","import {\r\n    CheckoutButtonStrategy,\r\n    CheckoutButtonStrategyFactory,\r\n    CheckoutButtonStrategyResolveId,\r\n    isResolvableModule,\r\n    PaymentIntegrationService,\r\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { ResolveIdRegistry } from '../common/registry';\r\nimport * as defaultCheckoutButtonStrategyFactories from '../generated/checkout-button-strategies';\r\n\r\nexport interface CheckoutButtonStrategyFactories {\r\n    [key: string]: CheckoutButtonStrategyFactory<CheckoutButtonStrategy>;\r\n}\r\n\r\nexport default function createCheckoutButtonStrategyRegistry(\r\n    paymentIntegrationService: PaymentIntegrationService,\r\n    checkoutButtonStrategyFactories: CheckoutButtonStrategyFactories = defaultCheckoutButtonStrategyFactories,\r\n): ResolveIdRegistry<CheckoutButtonStrategy, CheckoutButtonStrategyResolveId> {\r\n    const registry = new ResolveIdRegistry<\r\n        CheckoutButtonStrategy,\r\n        CheckoutButtonStrategyResolveId\r\n    >();\r\n\r\n    for (const [, createCheckoutButtonStrategy] of Object.entries(\r\n        checkoutButtonStrategyFactories,\r\n    )) {\r\n        if (\r\n            !isResolvableModule<\r\n                CheckoutButtonStrategyFactory<CheckoutButtonStrategy>,\r\n                CheckoutButtonStrategyResolveId\r\n            >(createCheckoutButtonStrategy)\r\n        ) {\r\n            continue;\r\n        }\r\n\r\n        for (const resolverId of createCheckoutButtonStrategy.resolveIds) {\r\n            registry.register(resolverId, () =>\r\n                createCheckoutButtonStrategy(paymentIntegrationService),\r\n            );\r\n        }\r\n    }\r\n\r\n    return registry;\r\n}\r\n","import ResolvableModule from './resolvable-module';\r\n\r\nexport default function isResolvableModule<TModule, TIdentifier>(\r\n    module: TModule,\r\n): module is ResolvableModule<TModule, TIdentifier> {\r\n    return 'resolveIds' in module;\r\n}\r\n","import { createRequestSender } from '@bigcommerce/request-sender';\r\nimport { createScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\r\n\r\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\r\nimport { CartRequestSender } from '../cart';\r\nimport {\r\n    CheckoutActionCreator,\r\n    CheckoutRequestSender,\r\n    CheckoutStore,\r\n    CheckoutValidator,\r\n} from '../checkout';\r\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\r\nimport { CustomerActionCreator, CustomerRequestSender } from '../customer';\r\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\r\nimport { HostedFormFactory } from '../hosted-form';\r\nimport { OrderActionCreator, OrderRequestSender } from '../order';\r\nimport {\r\n    createPaymentClient,\r\n    PaymentActionCreator,\r\n    PaymentMethodActionCreator,\r\n    PaymentMethodRequestSender,\r\n    PaymentRequestSender,\r\n    PaymentRequestTransformer,\r\n} from '../payment';\r\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../shipping';\r\nimport {\r\n    createSpamProtection,\r\n    PaymentHumanVerificationHandler,\r\n    SpamProtectionActionCreator,\r\n    SpamProtectionRequestSender,\r\n} from '../spam-protection';\r\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\r\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\r\n\r\nimport createPaymentIntegrationSelectors from './create-payment-integration-selectors';\r\nimport DefaultPaymentIntegrationService from './default-payment-integration-service';\r\nimport PaymentIntegrationStoreProjectionFactory from './payment-integration-store-projection-factory';\r\n\r\nexport default function createPaymentIntegrationService(\r\n    store: CheckoutStore,\r\n): PaymentIntegrationService {\r\n    const {\r\n        config: { getHost },\r\n    } = store.getState();\r\n\r\n    const requestSender = createRequestSender({ host: getHost() });\r\n\r\n    const storeProjectionFactory = new PaymentIntegrationStoreProjectionFactory(\r\n        createPaymentIntegrationSelectors,\r\n    );\r\n\r\n    const checkoutActionCreator = new CheckoutActionCreator(\r\n        new CheckoutRequestSender(requestSender),\r\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\r\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\r\n    );\r\n\r\n    const hostedFormFactory = new HostedFormFactory(store);\r\n\r\n    const orderActionCreator = new OrderActionCreator(\r\n        new OrderRequestSender(requestSender),\r\n        new CheckoutValidator(new CheckoutRequestSender(requestSender)),\r\n    );\r\n\r\n    const billingAddressActionCreator = new BillingAddressActionCreator(\r\n        new BillingAddressRequestSender(requestSender),\r\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender)),\r\n    );\r\n\r\n    const consignmentActionCreator = new ConsignmentActionCreator(\r\n        new ConsignmentRequestSender(requestSender),\r\n        new CheckoutRequestSender(requestSender),\r\n    );\r\n\r\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\r\n        new PaymentMethodRequestSender(requestSender),\r\n    );\r\n\r\n    const paymentActionCreator = new PaymentActionCreator(\r\n        new PaymentRequestSender(createPaymentClient(store)),\r\n        orderActionCreator,\r\n        new PaymentRequestTransformer(),\r\n        new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader())),\r\n    );\r\n\r\n    const customerActionCreator = new CustomerActionCreator(\r\n        new CustomerRequestSender(requestSender),\r\n        checkoutActionCreator,\r\n        new SpamProtectionActionCreator(\r\n            createSpamProtection(createScriptLoader()),\r\n            new SpamProtectionRequestSender(requestSender),\r\n        ),\r\n    );\r\n\r\n    const storeCreditActionCreator = new StoreCreditActionCreator(\r\n        new StoreCreditRequestSender(requestSender),\r\n    );\r\n\r\n    const spamProtection = createSpamProtection(createScriptLoader());\r\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\r\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(\r\n        spamProtection,\r\n        spamProtectionRequestSender,\r\n    );\r\n\r\n    const cartRequestSender = new CartRequestSender(requestSender);\r\n\r\n    return new DefaultPaymentIntegrationService(\r\n        store,\r\n        storeProjectionFactory,\r\n        checkoutActionCreator,\r\n        hostedFormFactory,\r\n        orderActionCreator,\r\n        billingAddressActionCreator,\r\n        consignmentActionCreator,\r\n        paymentMethodActionCreator,\r\n        paymentActionCreator,\r\n        customerActionCreator,\r\n        cartRequestSender,\r\n        storeCreditActionCreator,\r\n        spamProtectionActionCreator,\r\n    );\r\n}\r\n","// / <reference path=\"../payment/bigpay-client.d.ts\" />\r\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\r\n\r\nimport { CheckoutStore } from '../checkout';\r\n\r\nexport default function createPaymentClient(store: CheckoutStore) {\r\n    const paymentClient = createBigpayClient();\r\n\r\n    store.subscribe(\r\n        (state) => {\r\n            const config = state.config.getStoreConfig();\r\n\r\n            if (config) {\r\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\r\n            }\r\n        },\r\n        (state) => state.config.getStoreConfig(),\r\n    );\r\n\r\n    return paymentClient;\r\n}\r\n","import { FormPoster } from '@bigcommerce/form-poster';\r\nimport { RequestSender } from '@bigcommerce/request-sender';\r\nimport { getScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport { CartRequestSender } from '../cart';\r\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\r\nimport { Registry } from '../common/registry';\r\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\r\nimport { FormFieldsActionCreator, FormFieldsRequestSender } from '../form';\r\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\r\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\r\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\r\nimport {\r\n    createGooglePayPaymentProcessor,\r\n    GooglePayAdyenV2Initializer,\r\n    GooglePayAdyenV3Initializer,\r\n    GooglePayAuthorizeNetInitializer,\r\n    GooglePayBNZInitializer,\r\n    GooglePayBraintreeInitializer,\r\n    GooglePayCheckoutcomInitializer,\r\n    GooglePayCybersourceV2Initializer,\r\n    GooglePayOrbitalInitializer,\r\n    GooglePayStripeInitializer,\r\n    GooglePayStripeUPEInitializer,\r\n    GooglePayWorldpayAccessInitializer,\r\n} from '../payment/strategies/googlepay';\r\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\r\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\r\n\r\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\r\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\r\nimport AmazonPayV2RequestSender from './strategies/amazon-pay-v2/amazon-pay-v2-request-sender';\r\nimport {\r\n    BraintreePaypalButtonStrategy,\r\n    BraintreePaypalCreditButtonStrategy,\r\n    BraintreeVenmoButtonStrategy,\r\n} from './strategies/braintree';\r\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\r\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\r\nimport { PaypalButtonStrategy } from './strategies/paypal';\r\n\r\nexport default function createCheckoutButtonRegistry(\r\n    store: CheckoutStore,\r\n    requestSender: RequestSender,\r\n    formPoster: FormPoster,\r\n    locale: string,\r\n    host?: string,\r\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\r\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\r\n    const scriptLoader = getScriptLoader();\r\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\r\n    const checkoutActionCreator = new CheckoutActionCreator(\r\n        checkoutRequestSender,\r\n        new ConfigActionCreator(new ConfigRequestSender(requestSender)),\r\n        new FormFieldsActionCreator(new FormFieldsRequestSender(requestSender)),\r\n    );\r\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(\r\n        new PaymentMethodRequestSender(requestSender),\r\n    );\r\n\r\n    const braintreeSdkCreator = new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader));\r\n    const cartRequestSender = new CartRequestSender(requestSender);\r\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.AMAZON_PAY_V2,\r\n        () =>\r\n            new AmazonPayV2ButtonStrategy(\r\n                store,\r\n                checkoutActionCreator,\r\n                createAmazonPayV2PaymentProcessor(),\r\n                cartRequestSender,\r\n                amazonPayV2RequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL,\r\n        () =>\r\n            new BraintreePaypalButtonStrategy(\r\n                store,\r\n                checkoutActionCreator,\r\n                cartRequestSender,\r\n                braintreeSdkCreator,\r\n                formPoster,\r\n                window,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT,\r\n        () =>\r\n            new BraintreePaypalCreditButtonStrategy(\r\n                store,\r\n                checkoutActionCreator,\r\n                cartRequestSender,\r\n                braintreeSdkCreator,\r\n                formPoster,\r\n                window,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.BRAINTREE_VENMO,\r\n        () =>\r\n            new BraintreeVenmoButtonStrategy(\r\n                store,\r\n                paymentMethodActionCreator,\r\n                cartRequestSender,\r\n                braintreeSdkCreator,\r\n                formPoster,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV2,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV2Initializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_ADYENV3,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayAdyenV3Initializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayAuthorizeNetInitializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_BNZ,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayBNZInitializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(\r\n                    store,\r\n                    new GooglePayBraintreeInitializer(braintreeSdkCreator),\r\n                ),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(\r\n                    store,\r\n                    new GooglePayCheckoutcomInitializer(requestSender),\r\n                ),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_CYBERSOURCEV2,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayCybersourceV2Initializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_ORBITAL,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayOrbitalInitializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPE,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayStripeInitializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_STRIPEUPE,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayStripeUPEInitializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.MASTERPASS,\r\n        () =>\r\n            new MasterpassButtonStrategy(\r\n                store,\r\n                checkoutActionCreator,\r\n                new MasterpassScriptLoader(scriptLoader),\r\n                locale,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.PAYPALEXPRESS,\r\n        () =>\r\n            new PaypalButtonStrategy(\r\n                store,\r\n                checkoutActionCreator,\r\n                new PaypalScriptLoader(scriptLoader),\r\n                formPoster,\r\n                host,\r\n            ),\r\n    );\r\n\r\n    registry.register(\r\n        CheckoutButtonMethodType.GOOGLEPAY_WORLDPAYACCESS,\r\n        () =>\r\n            new GooglePayButtonStrategy(\r\n                store,\r\n                formPoster,\r\n                checkoutActionCreator,\r\n                createGooglePayPaymentProcessor(store, new GooglePayWorldpayAccessInitializer()),\r\n                cartRequestSender,\r\n            ),\r\n    );\r\n\r\n    return registry;\r\n}\r\n","import { getScriptLoader } from '@bigcommerce/script-loader';\r\n\r\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\r\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\r\n\r\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\r\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\r\n}\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","message","object","name","type","setPrototypeOf","__proto__","Error","captureStackTrace","stack","DEFAULT_RESPONSE","body","headers","status","response","errors","joinErrors","reduce","result","error","join","mapFromPaymentErrorResponse","Array","isArray","_factoryMethods","this","register","detail","title","length","map","code","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","default","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","CheckoutActionType","ErrorActionType","SubscriptionsActionType","BillingAddressActionType","omitDeep","predicate","isPlainObject","transform","omitBy","clearErrorReducer","state","action","ClearError","isClearErrorAction","payload","isEqual","objectA","objectB","options","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","replace","currentValue","newValue","undefined","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","data","dataReducer","composeReducers","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadCheckoutSucceeded","billingAddress","LoadCheckoutRequested","LoadCheckoutFailed","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","b","id","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","CouponActionType","GiftCertificateActionType","ConsignmentActionType","CheckoutButtonActionType","cartReducer","CreateConsignmentsSucceeded","DeleteConsignmentSucceeded","UpdateConsignmentSucceeded","UpdateShippingOptionSucceeded","LoadShippingOptionsSucceeded","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","cart","ConfigActionType","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","meta","methodId","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","OrderActionType","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","LoadOrderSucceeded","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","CustomerActionType","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","CustomerStrategyActionType","customerReducer","customer","CreateCustomerAddressSucceeded","StripeLinkAuthenticated","CreateCustomerRequested","CreateCustomerSucceeded","CreateCustomerFailed","CreateCustomerAddressRequested","CreateCustomerAddressFailed","ExtensionActionType","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeErrors","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","ExecutePaymentMethodCheckoutRequested","ExecutePaymentMethodCheckoutSucceeded","executePaymentMethodCheckoutError","executePaymentMethodCheckoutMethodId","ExecutePaymentMethodCheckoutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isExecutingPaymentMethodCheckout","isWidgetInteracting","FormFieldsActionType","extensionReducer","LoadExtensionsSucceeded","LoadExtensionsRequested","LoadExtensionsFailed","CountryActionType","formFieldsReducer","LoadFormFieldsSucceeded","LoadFormFieldsFailed","LoadFormFieldsRequested","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","omit","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","PaymentActionType","PaymentMethodActionType","orderBillingAddressReducer","paymentReducer","SubmitPaymentSucceeded","PaymentStrategyActionType","paymentMethodReducer","LoadPaymentMethodSucceeded","array","item","defaultPredicate","pick","findIndex","pickBy","push","existingItem","mergeOrPush","gateway","LoadPaymentMethodsSucceeded","methodA","methodB","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","loadMethodId","loadMethodError","LoadPaymentMethodFailed","isLoadingMethod","InstrumentActionType","paymentStrategyReducer","gatewayId","initializeError","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","RemoteCheckoutActionType","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","PickupOptionActionType","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignments","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","objectFlatten","parent","flattened","forEach","keyString","assign","objectWithSortedKeys","sort","previous","current","ShippingCountryActionType","pickupOptionReducer","LoadPickupOptionsSucceeded","sortedflattenedMeta","consignmentId","searchArea","btoa","JSON","stringify","LoadPickupOptionsRequested","LoadPickupOptionsFailed","ShippingStrategyActionType","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","SignInEmailActionType","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","StoreCreditActionType","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","SpamProtectionActionType","subscriptionsReducer","checkoutReducer","UpdateCheckoutSucceeded","VerifyCheckoutSucceeded","orderId","UpdateCheckoutRequested","UpdateCheckoutFailed","MissingDataErrorType","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCustomer","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","creator","combiner","args","pop","combinerArgs","memoize","guard","errorFactory","createFreezeProxy","target","trap","proxy","create","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","charAt","deepFreeze","createProxy","ACKNOWLEDGE","FINALIZE","provider","method","barclays","braintree","braintreepaypal","braintreeach","authorizenet","elavon","checkoutcom","sagepay","stripe","cybersource","cybersourcev2","bnz","converge","bluesnapv2","orbital","paymetric","bolt","digitalriver","moneris","cba_mpgs","worldpayaccess","normalize","address","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getState","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getCustomerOrThrow","getCreateAccountError","isCreatingCustomerAccount","getCreateAddressError","isCreatingCustomerAddress","getCheckout","getShippingAddress","getShippingAddressOrThrow","getShippingAddresses","getShippingAddressesOrThrow","getOrderBillingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentIdOrThrow","getPaymentStatus","getPaymentStatusOrThrow","getPaymentToken","getPaymentTokenOrThrow","getPaymentRedirectUrl","getPaymentRedirectUrlOrThrow","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","getCart","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","some","find","values","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","context","getStoreConfig","_","formState","formFields","storeConfig","getStoreConfigOrThrow","getContextConfig","getExternalSource","externalSource","getHost","host","getLocale","locale","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","countries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","isCreating","createAddressError","isCreatingAddress","createCustomerStrategySelector","getSignInError","getSignOutError","getExecutePaymentMethodCheckoutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","instrument","bigpayToken","card","isMatch","getCardInstrumentOrThrow","MissingPaymentInstrument","getInstruments","flatMap","supportedProvider","getInstrumentsMeta","getDeleteError","createInstrumentSelectorFactory","createFormSelector","getShippingAddressFields","selectedCountry","shippingAddress","field","processField","getBillingAddressFields","getCustomerAccountFields","customerAccount","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","query","createPaymentStrategySelectorFactory","createPickupOptionSelector","getPickupOptions","pickupOptions","sortedFlattenedParams","createPickupOptionSelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","shippingConsignment","consignment","selectedPickupOption","shippingConsignments","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","getConsignments","getConsignmentsOrThrow","getConsignmentById","getConsignmentByAddress","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","concat","lineItemIds","lineItems","physicalItems","indexOf","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","checkout","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","payments","currentPayment","paymentId","createOrderSelectorFactory","createOrderBillingAddressSelector","createPaymentSelector","providerId","internalPayment","MissingPaymentId","step","MissingPaymentStatus","redirectUrl","MissingPaymentRedirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","createExtensionSelector","getExtensions","getExtensionByRegion","region","e","createExtensionSelectorFactory","checkoutButton","customerStrategies","extensions","form","orderBillingAddress","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","config","shouldWarnMutation","createCheckoutStore","initialState","factory","requestErrorFactory","actionTransformer","action$","from","pipe","catchError","every","createInternalCheckoutSelectors","createDataStore","stateTransformer","cachableActionDecorator","descriptor","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","instanceMethods","set","Observable","shareReplay","store","_requestSender","loadPaymentMethods","observer","next","createAction","params","cartId","then","deviceSessionId","sessionHash","methods","filteredMethods","_filterApplePay","complete","catch","createErrorAction","loadPaymentMethod","window","isApplePayWindow","ContentType","INTERNAL_USE_ONLY","SDK_VERSION_HEADERS","timeout","Accept","JsonV1","url","throwErrorAction","of","throwError","_subscriptionActionCreator","continueAsGuest","credentials","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","merge","defer","_createOrUpdateBillingAddress","_updateCustomerConsent","updateAddress","email","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","empty","updateSubscriptions","checkoutId","createAddress","DEFAULT_PARAMS","include","post","put","createBuyNowCart","_checkoutRequestSender","_configActionCreator","_formFieldsActionCreator","loadCheckout","loadConfig","loadFormFields","loadDefaultCheckout","updateCheckout","loadCurrentCheckout","joinIncludes","includes","uniq","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","difference","mergeIncludes","cartA","cartB","_normalize","cartAmount","currency","digitalItems","slice","itemA","itemB","productId","variantId","localeCompare","extendedSalePrice","quantity","amount","recipient","giftWrapping","updated","validate","comparator","_compareCoupons","_compareGiftCertificates","_getComparableCheckout","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_configRequestSender","isSpamProtectionExecuteSucceededAction","succeededAction","_customerRequestSender","_checkoutActionCreator","_spamProtectionActionCreator","createCustomer","isStorefrontSpamProtectionEnabled","checkoutSettings","createAccount","switchMap","execute","customerAddress","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","delete","_formFieldsRequestSender","loadFields","promise","cancellable","Promise","reject","cancel","race","_mutationObserver","ensurePresence","targets","mutationsList","mutation","removedNodes","node","contains","observe","document","childList","subtree","output","disconnect","_window","callback","MutationObserver","parseUrl","test","anchor","createElement","href","port","hostname","hash","origin","protocol","pathname","search","isIframeEvent","targetOrigin","_targetWindow","_targetOrigin","event","targetWindow","fromEvent","successType","errorType","take","toPromise","postMessage","setTarget","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","bind","sourceOrigin","_sourceOrigins","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","_googleRecaptcha","handle","errorOrId","handleWithRecaptchaSitekey","handleWithPaymentHumanVerificationRequestError","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","_performRecaptcha","human_verification_token","recaptchaSitekey","cardingProtectionElementId","cardingProtectionElement","getElementById","parentNode","removeChild","setAttribute","appendChild","load","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","container","event$","Subject","_widgetId","render","size","getResponse","reset","_event$","_recaptcha","element","querySelector","retryWhen","delay","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","style","visibility","attributes","attributeFilter","_scriptLoader","_loadPromise","_loadScript","callbackName","resolve","grecaptcha","loadScript","createSpamProtection","scriptLoader","MutationObserverFactory","fieldErrors","HostedFieldEventType","HostedInputEventType","_type","_containerId","_placeholder","_accessibilityLabel","_styles","_eventPoster","_eventListener","_detachmentObserver","_cardInstrument","_iframe","src","border","height","overflow","width","getType","attach","contentWindow","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","styles","location","AttachSucceeded","AttachFailed","detach","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","links","querySelectorAll","link","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","noop","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","without","all","otherField","submit","additionalActionData","additionalAction","isVaultedInstrument","_store","instrumentMeta","orderMeta","paymentData","paymentMethodMeta","authToken","vaultAccessToken","fieldOptions","_getCardInstrument","createScriptLoader","_orderRequestSender","_checkoutValidator","loadOrder","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","submitOrder","SubmitOrderRequested","shouldExecuteSpamCheck","_mapToOrderRequestBody","customerMessage","checkoutVariant","SubmitOrderFailed","finalizeOrder","FinalizeOrderRequested","FinalizeOrderFailed","isNil","_paymentRequestSender","_orderActionCreator","_paymentRequestTransformer","initializeOffsitePayment","shouldSaveInstrument","shouldSetAsDefaultInstrument","formattedPayload","bigpay_token","vault_payment_instrument","set_as_default_stored_instrument","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","_client","_transformResponse","statusText","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","_decimalPlaces","toInteger","round","pow","CheckoutButtonMethodType","couponTypes","mapToInternalCoupon","coupon","discount","displayName","discountType","couponType","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalLineItems","itemMap","decimalPlaces","idKey","amountTransformer","imageUrl","amountAfterDiscount","integerAmount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","sender","mapGiftCertificateToInternalLineItem","extendedListPrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","option","addedByPromotion","mapToInternalLineItem","mapToInternalLineItemType","mapToInternalCart","promotions","notifications","sum","discountNotifications","promotion","banners","banner","placeholders","messageHtml","text","totalDiscountedAmount","certificate","appliedGiftCertificates","keyBy","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","subtotal","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","mapToInternalCustomer","addresses","customerId","fullName","customerGroupName","customerGroup","format","month","year","trimmedMonth","trimmedYear","toObject","number","maxLength","creditCardType","info","lengths","unformattedValue","unformat","gaps","gapIndex","mapToInternalOrder","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","description","image","shareText","sharingLink","channelName","channel","channelCode","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_cardExpiryFormatter","_cardNumberFormatter","checkoutState","formattedInstrument","_mapShippingAddress","shippingOption","contextConfig","paymentMeta","internalCustomer","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","storeProfile","transformWithHostedFormData","_transformHostedInputValues","initializationData","BRAINTREE_VENMO","BRAINTREE_PAYPAL","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","isBopisEnabled","bopis","enabled","requiredAddress","isPickup","CheckoutIncludes","_consignmentRequestSender","unassignItemsByAddress","_consignmentHasAddress","existingConsignment","_removeLineItems","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","AvailableShippingOptions","_getUpdateAddressRequestBody","createConsignments","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","sharedItem","DEFAULT_INCLUDES","initialize","spamProtectionElementId","spamProtectionElement","googleRecaptchaSitekey","verifyCheckoutSpamProtection","VerifyCheckoutRequested","VerifyCheckoutFailed","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_subscriptionsRequestSender","cloneDeep","input","cloneDeepSafe","cache","cloneResult","createPaymentIntegrationSelectors","isPaymentMethodInitialized","_storeProjectionFactory","_hostedFormFactory","_billingAddressActionCreator","_consignmentActionCreator","_paymentMethodActionCreator","_paymentActionCreator","_customerActionCreator","_cartRequestSender","_storeCreditActionCreator","_storeProjection","createHostedForm","subscribe","subscriber","filters","initializeOffsitePaymentConfig","dispatch","updateBillingAddress","updateShippingAddress","buyNowCartRequestBody","ProjectionActionType","_transformSelectors","projection","Synchronize","initial","createDataStoreProjection","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","selectorDecorator","resolver","memoizedMethod","cachedValue","isPrivate","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","uniqueId","setUniqueElementId","queueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_registryV2","paymentMethodRequestParams","currencyCode","paymentMethodRequestOptions","_getStrategy","strategy","_factories","_instances","_defaultToken","defaultToken","_useFallback","useFallback","_tokenResolver","tokenResolver","cacheToken","_getInstance","_hasFactory","_hasInstance","resolvedToken","getShippableItemsCount","total","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","_amazonPayV2ScriptLoader","_amazonPayV2SDK","_buttonParentContainer","_createAmazonPayButtonParentContainer","_amazonPayV2Button","remove","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","_prepareRequestConfig","_getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","decoupleCheckoutInitiation","placement","parentContainerId","_getButtonParentContainer","design","C0001","amazonPayV2ButtonOptions","_getAmazonPayV2ButtonOptions","setCartRequestBody","_buyNowCartRequestBody","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","_isEnvironmentSpecific","uid","random","substr","parentContainer","Gold","merchantId","testMode","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","PayOnly","PayAndShip","shopPath","buttonOptions","tmpConfig","createCheckoutSession","_getOrThrow","amazonPayV2Region","amazon","PAYPAL_COMPONENTS","_braintreeScriptLoader","_dataCollectors","clientToken","_clientToken","getClient","loadClient","client","authorization","getPaypal","_paypal","loadPaypal","getPaypalCheckout","onSuccess","onError","loadPaypalCheckout","paypalCheckout","paypalCheckoutConfig","paypalCheckoutCallback","braintreePaypalCheckout","paypalSdkLoadConfig","isCreditEnabled","components","intent","paypal","loadPayPalSDK","_paypalCheckout","getVenmoCheckout","_venmoCheckout","loadVenmoCheckout","venmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","venmoCheckoutCallback","braintreeVenmoCheckout","isBrowserSupported","get3DS","_3ds","load3DS","version","getDataCollector","cached","loadDataCollector","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","loadVisaCheckout","getGooglePaymentComponent","_googlePay","loadGooglePayment","createHostedFields","loadHostedFields","_teardown","mod","threeDSecure","dataCollector","visaCheckout","venmo","googlePayment","hostedFields","CallbackTriggerType","TotalPriceStatusType","CallbackIntentsType","ButtonType","ButtonColor","BillingAddressFormat","getFirstAndLastName","nameParts","_googlePayScriptLoader","_googlePayInitializer","_isBuyNowFlow","googlePayClientOptions","_methodId","_configureWallet","buttonType","Short","Default","_googlePayClient","updatePaymentDataRequest","paymentDataRequest","existingPaymentDataRequest","_getPaymentDataRequest","_paymentDataRequest","merchantInfo","transactionInfo","shippingAddressParameters","displayWallet","loadPaymentData","handleSuccess","parseResponse","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","updateBuyNowFlowFlag","isBuyNowFlow","_getMethodId","_getCheckout","hasShippingAddress","googlePay","_getGooglePayClient","isReadyToPay","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","apiVersion","apiVersionMinor","_getCardInformation","cardInformation","lastFour","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","customerEmail","paymentMethodData","locality","companyName","address3","administrativeArea","phoneNumber","postPaymentData","details","buyNowCartId","payment_type","tokenFormat","card_information","cart_id","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","requestSender","createRequestSender","getScriptLoader","_getGooglePayPaymentDataRequest","totalPrice","toFixed","gatewayMerchantId","merchantName","authJwt","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","totalPriceStatus","FINAL","emailRequired","shippingAddressRequired","baseRequest","_getGooglePaymentDataRequest","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","_braintreeSDKCreator","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","_errorMessage","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","finalToken","cardNetwork","cardDetails","token_format","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","Json","Authorization","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","useMasterpassSrc","language","sourceUrl","masterpass","scriptSrc","async","isWithBuyNowFeatures","_amazonPayV2PaymentProcessor","_amazonPayV2ConfigRequestSender","amazonpay","initializeAmazonButtonOptions","buyNowInitializeOptions","getBuyNowCartRequestBody","Cart","_getCheckoutCreationRequestConfig","_createBuyNowCart","_createCheckoutConfig","public_key","rest","payloadJSON","buyNowCart","String","mapToBraintreeShippingAddressOverride","recipientName","line1","line2","getValidButtonStyle","color","fundingicons","layout","shape","tagline","validStyles","getValidHeight","mapToLegacyBillingAddress","first_name","last_name","phone_number","address_line_1","address_line_2","country_code","postal_code","mapToLegacyShippingAddress","_formPoster","messagingContainerId","paypalCheckoutOptions","paypalCheckoutSuccessCallback","_renderPayPalComponents","paypalCheckoutErrorCallback","_handleError","_renderPayPalMessages","_renderPayPalButton","shouldProcessPayment","onAuthorizeError","fundingSource","FUNDING","PAYPAL","validButtonStyle","paypalButtonRender","Buttons","env","commit","createOrder","_setupPayment","onApprove","authorizeData","_tokenizePayment","isEligible","_removeElement","isMessageContainerAvailable","Messages","onPaymentError","_buyNowCart","shippingAddressOverride","createPayment","flow","enableShippingAddress","shippingAddressEditable","offerCredit","cartRequestBody","tokenizePayment","postForm","device_data","billing_address","shipping_address","buttonContainerId","onErrorCallback","elementId","PaypalButtonStyleLayoutOption","PaypalButtonStyleSizeOption","PaypalButtonStyleColorOption","PaypalButtonStyleLabelOption","PaypalButtonStyleShapeOption","braintreepaypalcredit","hasRenderedSmartButton","fundingSources","PAYLATER","CREDIT","buttonStyle","venmoButtonStyle","backgroundColor","backgroundPosition","backgroundSize","backgroundImage","backgroundRepeat","borderRadius","cursor","transition","minHeight","minWidth","_onError","braintreevenmo","_handleInitializationVenmoSuccess","_handleInitializationVenmoError","_renderVenmoButton","_removeVenmoContainer","buttonContainer","venmoButton","buyBowCart","tokenize","removeAttribute","_handlePostForm","_googlePayPaymentProcessor","googlePayOptions","_getGooglePayOptions","_getGooglePayClientOptions","_walletButton","_createSignInButton","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","INITIALIZE","newTransactionInfo","googlePayButton","_handleWalletButtonClick","GOOGLEPAY_ADYENV2","googlepayadyenv2","GOOGLEPAY_ADYENV3","googlepayadyenv3","GOOGLEPAY_AUTHORIZENET","googlepayauthorizenet","GOOGLEPAY_BNZ","googlepaybnz","GOOGLEPAY_BRAINTREE","googlepaybraintree","GOOGLEPAY_CHECKOUTCOM","googlepaycheckoutcom","GOOGLEPAY_CYBERSOURCEV2","googlepaycybersourcev2","GOOGLEPAY_ORBITAL","googlepayorbital","GOOGLEPAY_STRIPE","googlepaystripe","GOOGLEPAY_STRIPEUPE","googlepaystripeupe","GOOGLEPAY_WORLDPAYACCESS","googlepayworldpayaccess","preventDefault","ESTIMATED","callbackIntents","OFFER","_onPaymentSelectComplete","supportedLocales","es","en","pt","zu","ar","zh","ms","uk","sv","hr","pl","nl","it","de","fr","formatLocale","localeLanguage","toLowerCase","formattedLocale","countryLocales","_masterpassScriptLoader","_locale","masterpassScriptLoaderParams","isMasterpassSrcEnabled","_masterpassClient","_signInButton","button","subdomain","_createMasterpassPayload","allowedCardTypes","CheckoutButtonNotInitialized","_paypalScriptLoader","_host","paypalOptions","_paymentMethod","clientId","fundingCreditOption","allowedSources","allowCredit","disallowedSources","Button","funding","allowed","disallowed","RECT","RESPONSIVE","actions","onAuthorize","res","paymentID","payerID","payerId","payerInfo","payer","payer_info","getEnvironment","process","NODE_ENV","_console","log","_logToConsole","messages","warn","debug","isEnabled","logger","console","_resolveToken","resolveId","_encodeToken","_decodeToken","atob","registeredTokens","results","registeredToken","resolverId","matches","entries","matchedResults","matched","toResolvableModule","resolveIds","ApplePaySession","DefaultLabels","_paymentIntegrationService","_sessionFactory","_onAuthorizeCallback","_subTotalLabel","Subtotal","_shippingLabel","Shipping","applepay","buttonClassName","onPaymentAuthorize","requiresShipping","_requiresShipping","_buyNowInitializeOptions","_applePayButton","_createButton","classList","add","merchantCapabilities","supportedNetworks","storeName","_getRequestWithEmptyTotal","requiredShippingContactFields","applePaySession","_handleApplePayEvents","begin","_getBaseRequest","requiredBillingContactFields","tax","onvalidatemerchant","_onValidateMerchant","merchantSession","completeMerchantValidation","onpaymentmethodselected","_handlePaymentMethodSelected","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","onpaymentauthorized","_onPaymentAuthorized","completePaymentMethodSelection","newTotal","newLineItems","_transformContactToAddress","shippingContact","abort","selectionShippingOptionId","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","shippingOptions","additionalDescription","identifier","completeShippingContactSelection","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","_getUpdatedLineItems","completeShippingMethodSelection","validationURL","bigPayEndpoint","paymentsUrl","billingContact","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","givenName","familyName","addressLines","paymentIntegrationService","BoltDeveloperMode","StyleButtonSize","StyleButtonShape","boltScriptLoader","boltHostWindow","storefrontApiToken","publishableKey","developerConfig","loadBoltClient","BoltConnect","setupProductPageCheckout","addButtonContainer","boltButtonContainer","boltButtonObject","getBoltObjectData","append","innerHTML","domainUrl","getDomainURL","buttonHeight","getButtonHeight","buttonBorderRadius","getButtonBorderRadius","stringifyUrl","publishable_key","variant","border_radius","buttonSize","Small","Large","Medium","buttonShape","Pill","Rect","developerModeParams","BoltCheckout","getScriptOptions","loadBoltEmbedded","Bolt","developerMode","StagingMode","DevelopmentMode","developerDomain","CartSource","PayPalCommerceIntent","StyleButtonLabel","StyleButtonColor","NonInstantAlternativePaymentMethods","PayPalOrderStatus","formPoster","paypalCommerceRequestSender","paypalCommerceScriptLoader","loadPayPalSdk","providedCurrencyCode","initializesOnCheckoutPage","getPayPalSDK","paypalSdk","getPayPalSdkOrThrow","createBuyNowCartOrThrow","requestBody","updateOrder","getOrderStatus","order_id","BuyNow","device_info","method_id","paypal_account","getShippingOptionOrThrow","selectedShippingOptionId","recommendedShippingOption","shippingOptionToSelect","getAddress","getBillingAddressFromOrderDetails","given_name","surname","email_address","admin_area_2","admin_area_1","getShippingAddressFromOrderDetails","orderDetails","removeElement","getPayPalSdkScriptConfigOrThrow","paypalSdkScriptConfig","paypalLoadScript","buyerCountry","attributionId","isVenmoEnabled","isHostedCheckoutEnabled","isPayPalCreditAvailable","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","shouldEnableCard","enableCardFunding","disableCardFunding","enableCreditFunding","disableCreditFunding","shouldEnableAPMs","enableVenmoFunding","disableVenmoFunding","enableAPMsFunding","disableAPMsFunding","apm","disableFunding","enableFunding","createFormPoster","paypalCommerceIntegrationService","paypalcommerce","onComplete","defaultCallbacks","orderID","buyNowFlowCallbacks","handleClick","onCancel","hostedCheckoutCallbacks","onShippingAddressChange","onShippingOptionsChange","onHostedCheckoutApprove","buttonRenderOptions","paypalButton","paypalcommercecredit","renderMessages","paypalMessagesOptions","paypalcommercevenmo","VENMO","getValidVenmoButtonStyles","gold","paypalcommercealternativemethods","paypalExpressScriptLoader","loadPaypalSDK","paypalSDK","getStyle","setupPayment","getPaymentData","createCheckoutButtonInitializer","registryV2","checkoutButtonStrategyFactories","registry","createCheckoutButtonStrategy","isResolvableModule","storeProjectionFactory","checkoutActionCreator","hostedFormFactory","orderActionCreator","billingAddressActionCreator","consignmentActionCreator","paymentMethodActionCreator","paymentActionCreator","paymentClient","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","customerActionCreator","storeCreditActionCreator","spamProtection","spamProtectionRequestSender","spamProtectionActionCreator","cartRequestSender","createPaymentIntegrationService","checkoutRequestSender","braintreeSdkCreator","amazonPayV2RequestSender","AMAZON_PAY_V2","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","PAYPALEXPRESS","createCheckoutButtonRegistry"],"sourceRoot":""}